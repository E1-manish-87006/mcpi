
dac_tim6_led.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000260  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080003e8  080003e8  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080003e8  080003e8  00002004  2**0
                  CONTENTS
  4 .ARM          00000000  080003e8  080003e8  00002004  2**0
                  CONTENTS
  5 .preinit_array 00000000  080003e8  080003e8  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003e8  080003e8  000013e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080003ec  080003ec  000013ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  080003f0  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00002004  2**0
                  CONTENTS
 10 .bss          0000001c  20000004  20000004  00002004  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000020  20000020  00002004  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000baa  00000000  00000000  0000202e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000395  00000000  00000000  00002bd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000b0  00000000  00000000  00002f70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000071  00000000  00000000  00003020  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018e87  00000000  00000000  00003091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000f0b  00000000  00000000  0001bf18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008b74b  00000000  00000000  0001ce23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000a856e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000160  00000000  00000000  000a85b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loclists 0000001f  00000000  00000000  000a8714  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000061  00000000  00000000  000a8733  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080003d0 	.word	0x080003d0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	080003d0 	.word	0x080003d0

080001c8 <DAC_Init>:


#include "dac.h"

void DAC_Init(void) {
 80001c8:	b480      	push	{r7}
 80001ca:	af00      	add	r7, sp, #0
	//1. Enable GPIOA peripheral. (DAC1_OUT=PA4)
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 80001cc:	4b0f      	ldr	r3, [pc, #60]	@ (800020c <DAC_Init+0x44>)
 80001ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80001d0:	4a0e      	ldr	r2, [pc, #56]	@ (800020c <DAC_Init+0x44>)
 80001d2:	f043 0301 	orr.w	r3, r3, #1
 80001d6:	6313      	str	r3, [r2, #48]	@ 0x30
	//2. Set GPIO mode to Analog. (MODER = 0b11).
	GPIOA->MODER |= BV(4*2) | BV(4*2+1);
 80001d8:	4b0d      	ldr	r3, [pc, #52]	@ (8000210 <DAC_Init+0x48>)
 80001da:	681b      	ldr	r3, [r3, #0]
 80001dc:	4a0c      	ldr	r2, [pc, #48]	@ (8000210 <DAC_Init+0x48>)
 80001de:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 80001e2:	6013      	str	r3, [r2, #0]
	//3. Enable DAC peripheral (APB1).
	RCC->APB1ENR |= RCC_APB1ENR_DACEN;
 80001e4:	4b09      	ldr	r3, [pc, #36]	@ (800020c <DAC_Init+0x44>)
 80001e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80001e8:	4a08      	ldr	r2, [pc, #32]	@ (800020c <DAC_Init+0x44>)
 80001ea:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80001ee:	6413      	str	r3, [r2, #64]	@ 0x40
	//4. Enable DAC channel, Output buffer, Enable trigger, and select Trigger (Software=0b111) (CR).
	DAC1->CR = DAC_CR_EN1 | DAC_CR_TEN1;
 80001f0:	4b08      	ldr	r3, [pc, #32]	@ (8000214 <DAC_Init+0x4c>)
 80001f2:	2205      	movs	r2, #5
 80001f4:	601a      	str	r2, [r3, #0]
	DAC1->CR &= ~(DAC_CR_TSEL1_0 | DAC_CR_TSEL1_1 | DAC_CR_TSEL1_2);
 80001f6:	4b07      	ldr	r3, [pc, #28]	@ (8000214 <DAC_Init+0x4c>)
 80001f8:	681b      	ldr	r3, [r3, #0]
 80001fa:	4a06      	ldr	r2, [pc, #24]	@ (8000214 <DAC_Init+0x4c>)
 80001fc:	f023 0338 	bic.w	r3, r3, #56	@ 0x38
 8000200:	6013      	str	r3, [r2, #0]
}
 8000202:	bf00      	nop
 8000204:	46bd      	mov	sp, r7
 8000206:	bc80      	pop	{r7}
 8000208:	4770      	bx	lr
 800020a:	bf00      	nop
 800020c:	40023800 	.word	0x40023800
 8000210:	40020000 	.word	0x40020000
 8000214:	40007400 	.word	0x40007400

08000218 <DAC_SetValue>:

void DAC_SetValue(uint16_t val) {
 8000218:	b480      	push	{r7}
 800021a:	b083      	sub	sp, #12
 800021c:	af00      	add	r7, sp, #0
 800021e:	4603      	mov	r3, r0
 8000220:	80fb      	strh	r3, [r7, #6]
	//1. Set value in DAC register. (DHRxR)
	DAC1->DHR12R1 = val;
 8000222:	4a07      	ldr	r2, [pc, #28]	@ (8000240 <DAC_SetValue+0x28>)
 8000224:	88fb      	ldrh	r3, [r7, #6]
 8000226:	6093      	str	r3, [r2, #8]
	//2. Trigger conversion (in SWTRIGR).
	DAC1->SWTRIGR |= DAC_SWTRIGR_SWTRIG1;
 8000228:	4b05      	ldr	r3, [pc, #20]	@ (8000240 <DAC_SetValue+0x28>)
 800022a:	685b      	ldr	r3, [r3, #4]
 800022c:	4a04      	ldr	r2, [pc, #16]	@ (8000240 <DAC_SetValue+0x28>)
 800022e:	f043 0301 	orr.w	r3, r3, #1
 8000232:	6053      	str	r3, [r2, #4]
}
 8000234:	bf00      	nop
 8000236:	370c      	adds	r7, #12
 8000238:	46bd      	mov	sp, r7
 800023a:	bc80      	pop	{r7}
 800023c:	4770      	bx	lr
 800023e:	bf00      	nop
 8000240:	40007400 	.word	0x40007400

08000244 <DelayMs>:
uint32_t DWT_Init(void);

#ifndef DELAY_MS
#define DELAY_MS

static inline void DelayMs(volatile uint32_t ms) {
 8000244:	b480      	push	{r7}
 8000246:	b085      	sub	sp, #20
 8000248:	af00      	add	r7, sp, #0
 800024a:	6078      	str	r0, [r7, #4]
	uint32_t init_ticks = DWT->CYCCNT;
 800024c:	4b0e      	ldr	r3, [pc, #56]	@ (8000288 <DelayMs+0x44>)
 800024e:	685b      	ldr	r3, [r3, #4]
 8000250:	60fb      	str	r3, [r7, #12]
	uint32_t ticks = (SystemCoreClock / 1000);
 8000252:	4b0e      	ldr	r3, [pc, #56]	@ (800028c <DelayMs+0x48>)
 8000254:	681b      	ldr	r3, [r3, #0]
 8000256:	4a0e      	ldr	r2, [pc, #56]	@ (8000290 <DelayMs+0x4c>)
 8000258:	fba2 2303 	umull	r2, r3, r2, r3
 800025c:	099b      	lsrs	r3, r3, #6
 800025e:	60bb      	str	r3, [r7, #8]
	ms *= ticks;
 8000260:	687b      	ldr	r3, [r7, #4]
 8000262:	68ba      	ldr	r2, [r7, #8]
 8000264:	fb02 f303 	mul.w	r3, r2, r3
 8000268:	607b      	str	r3, [r7, #4]
	while ((DWT->CYCCNT - init_ticks) < ms);
 800026a:	bf00      	nop
 800026c:	4b06      	ldr	r3, [pc, #24]	@ (8000288 <DelayMs+0x44>)
 800026e:	685a      	ldr	r2, [r3, #4]
 8000270:	68fb      	ldr	r3, [r7, #12]
 8000272:	1ad2      	subs	r2, r2, r3
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	429a      	cmp	r2, r3
 8000278:	d3f8      	bcc.n	800026c <DelayMs+0x28>
}
 800027a:	bf00      	nop
 800027c:	bf00      	nop
 800027e:	3714      	adds	r7, #20
 8000280:	46bd      	mov	sp, r7
 8000282:	bc80      	pop	{r7}
 8000284:	4770      	bx	lr
 8000286:	bf00      	nop
 8000288:	e0001000 	.word	0xe0001000
 800028c:	20000000 	.word	0x20000000
 8000290:	10624dd3 	.word	0x10624dd3

08000294 <main>:

#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

int main(void) {
 8000294:	b580      	push	{r7, lr}
 8000296:	b082      	sub	sp, #8
 8000298:	af00      	add	r7, sp, #0
	int val;
	SystemInit();
 800029a:	f000 f815 	bl	80002c8 <SystemInit>
	DAC_Init();
 800029e:	f7ff ff93 	bl	80001c8 <DAC_Init>
	while(1) {
		for(val = 0; val < 4096; val += 4) {
 80002a2:	2300      	movs	r3, #0
 80002a4:	607b      	str	r3, [r7, #4]
 80002a6:	e00a      	b.n	80002be <main+0x2a>
			DAC_SetValue(val);
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	b29b      	uxth	r3, r3
 80002ac:	4618      	mov	r0, r3
 80002ae:	f7ff ffb3 	bl	8000218 <DAC_SetValue>
			DelayMs(16);
 80002b2:	2010      	movs	r0, #16
 80002b4:	f7ff ffc6 	bl	8000244 <DelayMs>
		for(val = 0; val < 4096; val += 4) {
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	3304      	adds	r3, #4
 80002bc:	607b      	str	r3, [r7, #4]
 80002be:	687b      	ldr	r3, [r7, #4]
 80002c0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80002c4:	dbf0      	blt.n	80002a8 <main+0x14>
 80002c6:	e7ec      	b.n	80002a2 <main+0xe>

080002c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80002c8:	b580      	push	{r7, lr}
 80002ca:	af00      	add	r7, sp, #0
  DWT_Init();
 80002cc:	f000 f802 	bl	80002d4 <DWT_Init>
}
 80002d0:	bf00      	nop
 80002d2:	bd80      	pop	{r7, pc}

080002d4 <DWT_Init>:
}
#pragma GCC pop_options


uint32_t DWT_Init(void)
{
 80002d4:	b480      	push	{r7}
 80002d6:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 80002d8:	4b14      	ldr	r3, [pc, #80]	@ (800032c <DWT_Init+0x58>)
 80002da:	68db      	ldr	r3, [r3, #12]
 80002dc:	4a13      	ldr	r2, [pc, #76]	@ (800032c <DWT_Init+0x58>)
 80002de:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80002e2:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 80002e4:	4b11      	ldr	r3, [pc, #68]	@ (800032c <DWT_Init+0x58>)
 80002e6:	68db      	ldr	r3, [r3, #12]
 80002e8:	4a10      	ldr	r2, [pc, #64]	@ (800032c <DWT_Init+0x58>)
 80002ea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80002ee:	60d3      	str	r3, [r2, #12]
    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 80002f0:	4b0f      	ldr	r3, [pc, #60]	@ (8000330 <DWT_Init+0x5c>)
 80002f2:	681b      	ldr	r3, [r3, #0]
 80002f4:	4a0e      	ldr	r2, [pc, #56]	@ (8000330 <DWT_Init+0x5c>)
 80002f6:	f023 0301 	bic.w	r3, r3, #1
 80002fa:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 80002fc:	4b0c      	ldr	r3, [pc, #48]	@ (8000330 <DWT_Init+0x5c>)
 80002fe:	681b      	ldr	r3, [r3, #0]
 8000300:	4a0b      	ldr	r2, [pc, #44]	@ (8000330 <DWT_Init+0x5c>)
 8000302:	f043 0301 	orr.w	r3, r3, #1
 8000306:	6013      	str	r3, [r2, #0]
    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 8000308:	4b09      	ldr	r3, [pc, #36]	@ (8000330 <DWT_Init+0x5c>)
 800030a:	2200      	movs	r2, #0
 800030c:	605a      	str	r2, [r3, #4]
    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 800030e:	bf00      	nop
    __ASM volatile ("NOP");
 8000310:	bf00      	nop
    __ASM volatile ("NOP");
 8000312:	bf00      	nop
    /* Check if clock cycle counter has started: 0 on success */
    return !(DWT->CYCCNT);
 8000314:	4b06      	ldr	r3, [pc, #24]	@ (8000330 <DWT_Init+0x5c>)
 8000316:	685b      	ldr	r3, [r3, #4]
 8000318:	2b00      	cmp	r3, #0
 800031a:	bf0c      	ite	eq
 800031c:	2301      	moveq	r3, #1
 800031e:	2300      	movne	r3, #0
 8000320:	b2db      	uxtb	r3, r3
}
 8000322:	4618      	mov	r0, r3
 8000324:	46bd      	mov	sp, r7
 8000326:	bc80      	pop	{r7}
 8000328:	4770      	bx	lr
 800032a:	bf00      	nop
 800032c:	e000edf0 	.word	0xe000edf0
 8000330:	e0001000 	.word	0xe0001000

08000334 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000334:	480d      	ldr	r0, [pc, #52]	@ (800036c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000336:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000338:	f7ff ffc6 	bl	80002c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800033c:	480c      	ldr	r0, [pc, #48]	@ (8000370 <LoopForever+0x6>)
  ldr r1, =_edata
 800033e:	490d      	ldr	r1, [pc, #52]	@ (8000374 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000340:	4a0d      	ldr	r2, [pc, #52]	@ (8000378 <LoopForever+0xe>)
  movs r3, #0
 8000342:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000344:	e002      	b.n	800034c <LoopCopyDataInit>

08000346 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000346:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000348:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800034a:	3304      	adds	r3, #4

0800034c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800034c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800034e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000350:	d3f9      	bcc.n	8000346 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000352:	4a0a      	ldr	r2, [pc, #40]	@ (800037c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000354:	4c0a      	ldr	r4, [pc, #40]	@ (8000380 <LoopForever+0x16>)
  movs r3, #0
 8000356:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000358:	e001      	b.n	800035e <LoopFillZerobss>

0800035a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800035a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800035c:	3204      	adds	r2, #4

0800035e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800035e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000360:	d3fb      	bcc.n	800035a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000362:	f000 f811 	bl	8000388 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000366:	f7ff ff95 	bl	8000294 <main>

0800036a <LoopForever>:

LoopForever:
  b LoopForever
 800036a:	e7fe      	b.n	800036a <LoopForever>
  ldr   r0, =_estack
 800036c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000370:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000374:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000378:	080003f0 	.word	0x080003f0
  ldr r2, =_sbss
 800037c:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000380:	20000020 	.word	0x20000020

08000384 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000384:	e7fe      	b.n	8000384 <ADC_IRQHandler>
	...

08000388 <__libc_init_array>:
 8000388:	b570      	push	{r4, r5, r6, lr}
 800038a:	4d0d      	ldr	r5, [pc, #52]	@ (80003c0 <__libc_init_array+0x38>)
 800038c:	4c0d      	ldr	r4, [pc, #52]	@ (80003c4 <__libc_init_array+0x3c>)
 800038e:	1b64      	subs	r4, r4, r5
 8000390:	10a4      	asrs	r4, r4, #2
 8000392:	2600      	movs	r6, #0
 8000394:	42a6      	cmp	r6, r4
 8000396:	d109      	bne.n	80003ac <__libc_init_array+0x24>
 8000398:	4d0b      	ldr	r5, [pc, #44]	@ (80003c8 <__libc_init_array+0x40>)
 800039a:	4c0c      	ldr	r4, [pc, #48]	@ (80003cc <__libc_init_array+0x44>)
 800039c:	f000 f818 	bl	80003d0 <_init>
 80003a0:	1b64      	subs	r4, r4, r5
 80003a2:	10a4      	asrs	r4, r4, #2
 80003a4:	2600      	movs	r6, #0
 80003a6:	42a6      	cmp	r6, r4
 80003a8:	d105      	bne.n	80003b6 <__libc_init_array+0x2e>
 80003aa:	bd70      	pop	{r4, r5, r6, pc}
 80003ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80003b0:	4798      	blx	r3
 80003b2:	3601      	adds	r6, #1
 80003b4:	e7ee      	b.n	8000394 <__libc_init_array+0xc>
 80003b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80003ba:	4798      	blx	r3
 80003bc:	3601      	adds	r6, #1
 80003be:	e7f2      	b.n	80003a6 <__libc_init_array+0x1e>
 80003c0:	080003e8 	.word	0x080003e8
 80003c4:	080003e8 	.word	0x080003e8
 80003c8:	080003e8 	.word	0x080003e8
 80003cc:	080003ec 	.word	0x080003ec

080003d0 <_init>:
 80003d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003d2:	bf00      	nop
 80003d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003d6:	bc08      	pop	{r3}
 80003d8:	469e      	mov	lr, r3
 80003da:	4770      	bx	lr

080003dc <_fini>:
 80003dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003de:	bf00      	nop
 80003e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003e2:	bc08      	pop	{r3}
 80003e4:	469e      	mov	lr, r3
 80003e6:	4770      	bx	lr
