
SPI_STHAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000036f0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08003880  08003880  00004880  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080038e0  080038e0  0000505c  2**0
                  CONTENTS
  4 .ARM          00000008  080038e0  080038e0  000048e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080038e8  080038e8  0000505c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080038e8  080038e8  000048e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080038ec  080038ec  000048ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080038f0  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000505c  2**0
                  CONTENTS
 10 .bss          0000020c  2000005c  2000005c  0000505c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000268  20000268  0000505c  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  0000505c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008cb5  00000000  00000000  00005086  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000163b  00000000  00000000  0000dd3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000858  00000000  00000000  0000f378  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000665  00000000  00000000  0000fbd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000204a3  00000000  00000000  00010235  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000096c9  00000000  00000000  000306d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c464b  00000000  00000000  00039da1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000fe3ec  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000026ec  00000000  00000000  000fe430  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000063  00000000  00000000  00100b1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003868 	.word	0x08003868

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	08003868 	.word	0x08003868

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <SPI_Write>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void SPI_Write(uint8_t reg, uint8_t data[], uint8_t size) {
 8000560:	b580      	push	{r7, lr}
 8000562:	b082      	sub	sp, #8
 8000564:	af00      	add	r7, sp, #0
 8000566:	4603      	mov	r3, r0
 8000568:	6039      	str	r1, [r7, #0]
 800056a:	71fb      	strb	r3, [r7, #7]
 800056c:	4613      	mov	r3, r2
 800056e:	71bb      	strb	r3, [r7, #6]
	// Enable Slave device (PE3=0)
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 8000570:	2200      	movs	r2, #0
 8000572:	2108      	movs	r1, #8
 8000574:	480f      	ldr	r0, [pc, #60]	@ (80005b4 <SPI_Write+0x54>)
 8000576:	f000 fe3f 	bl	80011f8 <HAL_GPIO_WritePin>
	// Send the register address (MSB=0)
	reg &= ~BV(7);
 800057a:	79fb      	ldrb	r3, [r7, #7]
 800057c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000580:	b2db      	uxtb	r3, r3
 8000582:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspi1, &reg, 1, HAL_MAX_DELAY);
 8000584:	1df9      	adds	r1, r7, #7
 8000586:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800058a:	2201      	movs	r2, #1
 800058c:	480a      	ldr	r0, [pc, #40]	@ (80005b8 <SPI_Write+0x58>)
 800058e:	f001 fb70 	bl	8001c72 <HAL_SPI_Transmit>
	// Write given data of given bytes on SPI
	HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8000592:	79bb      	ldrb	r3, [r7, #6]
 8000594:	b29a      	uxth	r2, r3
 8000596:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800059a:	6839      	ldr	r1, [r7, #0]
 800059c:	4806      	ldr	r0, [pc, #24]	@ (80005b8 <SPI_Write+0x58>)
 800059e:	f001 fb68 	bl	8001c72 <HAL_SPI_Transmit>
	// Disable Slave device (PE3=1)
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
 80005a2:	2201      	movs	r2, #1
 80005a4:	2108      	movs	r1, #8
 80005a6:	4803      	ldr	r0, [pc, #12]	@ (80005b4 <SPI_Write+0x54>)
 80005a8:	f000 fe26 	bl	80011f8 <HAL_GPIO_WritePin>
}
 80005ac:	bf00      	nop
 80005ae:	3708      	adds	r7, #8
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	40021000 	.word	0x40021000
 80005b8:	20000078 	.word	0x20000078

080005bc <SPI_Read>:

void SPI_Read(uint8_t reg, uint8_t data[], uint8_t size) {
 80005bc:	b580      	push	{r7, lr}
 80005be:	b082      	sub	sp, #8
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	4603      	mov	r3, r0
 80005c4:	6039      	str	r1, [r7, #0]
 80005c6:	71fb      	strb	r3, [r7, #7]
 80005c8:	4613      	mov	r3, r2
 80005ca:	71bb      	strb	r3, [r7, #6]
	// Enable Slave device (PE3=0)
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 80005cc:	2200      	movs	r2, #0
 80005ce:	2108      	movs	r1, #8
 80005d0:	480f      	ldr	r0, [pc, #60]	@ (8000610 <SPI_Read+0x54>)
 80005d2:	f000 fe11 	bl	80011f8 <HAL_GPIO_WritePin>
	// Send the register address (MSB=1)
	reg |= BV(7);
 80005d6:	79fb      	ldrb	r3, [r7, #7]
 80005d8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80005dc:	b2db      	uxtb	r3, r3
 80005de:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspi1, &reg, 1, HAL_MAX_DELAY);
 80005e0:	1df9      	adds	r1, r7, #7
 80005e2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80005e6:	2201      	movs	r2, #1
 80005e8:	480a      	ldr	r0, [pc, #40]	@ (8000614 <SPI_Read+0x58>)
 80005ea:	f001 fb42 	bl	8001c72 <HAL_SPI_Transmit>
	// Read data into given buffer of given bytes from SPI
	HAL_SPI_Receive(&hspi1, data, size, HAL_MAX_DELAY);
 80005ee:	79bb      	ldrb	r3, [r7, #6]
 80005f0:	b29a      	uxth	r2, r3
 80005f2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80005f6:	6839      	ldr	r1, [r7, #0]
 80005f8:	4806      	ldr	r0, [pc, #24]	@ (8000614 <SPI_Read+0x58>)
 80005fa:	f001 fc7e 	bl	8001efa <HAL_SPI_Receive>
	// Disable Slave device (PE3=1)
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
 80005fe:	2201      	movs	r2, #1
 8000600:	2108      	movs	r1, #8
 8000602:	4803      	ldr	r0, [pc, #12]	@ (8000610 <SPI_Read+0x54>)
 8000604:	f000 fdf8 	bl	80011f8 <HAL_GPIO_WritePin>
}
 8000608:	bf00      	nop
 800060a:	3708      	adds	r7, #8
 800060c:	46bd      	mov	sp, r7
 800060e:	bd80      	pop	{r7, pc}
 8000610:	40021000 	.word	0x40021000
 8000614:	20000078 	.word	0x20000078

08000618 <LIS3DSH_Init>:

void LIS3DSH_Init(void) {
 8000618:	b580      	push	{r7, lr}
 800061a:	b082      	sub	sp, #8
 800061c:	af00      	add	r7, sp, #0
	// CTRL_REG4 = ODR_25Hz | XEN | YEN | ZEN
	uint8_t val = LIS3DSH_CR4_ODR_25HZ | LIS3DSH_CR4_XEN | LIS3DSH_CR4_YEN | LIS3DSH_CR4_ZEN;
 800061e:	2347      	movs	r3, #71	@ 0x47
 8000620:	71fb      	strb	r3, [r7, #7]
	SPI_Write(LIS3DSH_CTRL_REG4, &val, 1);
 8000622:	1dfb      	adds	r3, r7, #7
 8000624:	2201      	movs	r2, #1
 8000626:	4619      	mov	r1, r3
 8000628:	2020      	movs	r0, #32
 800062a:	f7ff ff99 	bl	8000560 <SPI_Write>
}
 800062e:	bf00      	nop
 8000630:	3708      	adds	r7, #8
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}

08000636 <LIS3DSH_WaitForData>:

void LIS3DSH_WaitForData(void) {
 8000636:	b580      	push	{r7, lr}
 8000638:	b082      	sub	sp, #8
 800063a:	af00      	add	r7, sp, #0
	uint8_t val;
	// Read STATUS and check if any one bit from XDA, YDA, ZDA is ON
	do {
		SPI_Read(LIS3DSH_STATUS, &val, 1);
 800063c:	1dfb      	adds	r3, r7, #7
 800063e:	2201      	movs	r2, #1
 8000640:	4619      	mov	r1, r3
 8000642:	2027      	movs	r0, #39	@ 0x27
 8000644:	f7ff ffba 	bl	80005bc <SPI_Read>
	}while( (val & LIS3DSH_STATUS_XYZDA_Msk) == 0 );
 8000648:	79fb      	ldrb	r3, [r7, #7]
 800064a:	f003 0307 	and.w	r3, r3, #7
 800064e:	2b00      	cmp	r3, #0
 8000650:	d0f4      	beq.n	800063c <LIS3DSH_WaitForData+0x6>
}
 8000652:	bf00      	nop
 8000654:	bf00      	nop
 8000656:	3708      	adds	r7, #8
 8000658:	46bd      	mov	sp, r7
 800065a:	bd80      	pop	{r7, pc}

0800065c <LIS3DSH_ReadData>:

void LIS3DSH_ReadData(LIS3DSH_Data *data) {
 800065c:	b580      	push	{r7, lr}
 800065e:	b084      	sub	sp, #16
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
	uint8_t buf[6];
	// Read XL, XH, YL, YH, ZL, ZH data from Accel
	SPI_Read(LIS3DSH_OUT_X_L, buf, 6);
 8000664:	f107 0308 	add.w	r3, r7, #8
 8000668:	2206      	movs	r2, #6
 800066a:	4619      	mov	r1, r3
 800066c:	2028      	movs	r0, #40	@ 0x28
 800066e:	f7ff ffa5 	bl	80005bc <SPI_Read>
	// Read XL & XH into data.x
	data->x = (((uint16_t)buf[1]) << 8) | buf[0];
 8000672:	7a7b      	ldrb	r3, [r7, #9]
 8000674:	021b      	lsls	r3, r3, #8
 8000676:	b21a      	sxth	r2, r3
 8000678:	7a3b      	ldrb	r3, [r7, #8]
 800067a:	b21b      	sxth	r3, r3
 800067c:	4313      	orrs	r3, r2
 800067e:	b21a      	sxth	r2, r3
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	801a      	strh	r2, [r3, #0]
	// Read YL & YH into data.y
	data->y = (((uint16_t)buf[3]) << 8) | buf[2];
 8000684:	7afb      	ldrb	r3, [r7, #11]
 8000686:	021b      	lsls	r3, r3, #8
 8000688:	b21a      	sxth	r2, r3
 800068a:	7abb      	ldrb	r3, [r7, #10]
 800068c:	b21b      	sxth	r3, r3
 800068e:	4313      	orrs	r3, r2
 8000690:	b21a      	sxth	r2, r3
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	805a      	strh	r2, [r3, #2]
	// Read ZL & ZH into data.z
	data->z = (((uint16_t)buf[5]) << 8) | buf[4];
 8000696:	7b7b      	ldrb	r3, [r7, #13]
 8000698:	021b      	lsls	r3, r3, #8
 800069a:	b21a      	sxth	r2, r3
 800069c:	7b3b      	ldrb	r3, [r7, #12]
 800069e:	b21b      	sxth	r3, r3
 80006a0:	4313      	orrs	r3, r2
 80006a2:	b21a      	sxth	r2, r3
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	809a      	strh	r2, [r3, #4]
}
 80006a8:	bf00      	nop
 80006aa:	3710      	adds	r7, #16
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}

080006b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b096      	sub	sp, #88	@ 0x58
 80006b4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006b6:	f000 fa8f 	bl	8000bd8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006ba:	f000 f831 	bl	8000720 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006be:	f000 f8f9 	bl	80008b4 <MX_GPIO_Init>
  MX_SPI1_Init();
 80006c2:	f000 f897 	bl	80007f4 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 80006c6:	f000 f8cb 	bl	8000860 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  LIS3DSH_Init();
 80006ca:	f7ff ffa5 	bl	8000618 <LIS3DSH_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  LIS3DSH_WaitForData();
 80006ce:	f7ff ffb2 	bl	8000636 <LIS3DSH_WaitForData>
	  LIS3DSH_ReadData(&data);
 80006d2:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80006d6:	4618      	mov	r0, r3
 80006d8:	f7ff ffc0 	bl	800065c <LIS3DSH_ReadData>
	  count = sprintf(str, "X=%d, Y=%d, Z=%d\r\n", data.x, data.y, data.z);
 80006dc:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	@ 0x44
 80006e0:	461a      	mov	r2, r3
 80006e2:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	@ 0x46
 80006e6:	4619      	mov	r1, r3
 80006e8:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	@ 0x48
 80006ec:	1d38      	adds	r0, r7, #4
 80006ee:	9300      	str	r3, [sp, #0]
 80006f0:	460b      	mov	r3, r1
 80006f2:	4909      	ldr	r1, [pc, #36]	@ (8000718 <main+0x68>)
 80006f4:	f002 fc18 	bl	8002f28 <siprintf>
 80006f8:	64f8      	str	r0, [r7, #76]	@ 0x4c
	  HAL_UART_Transmit(&huart2, (uint8_t*)str, count, HAL_MAX_DELAY);
 80006fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80006fc:	b29a      	uxth	r2, r3
 80006fe:	1d39      	adds	r1, r7, #4
 8000700:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000704:	4805      	ldr	r0, [pc, #20]	@ (800071c <main+0x6c>)
 8000706:	f002 f84d 	bl	80027a4 <HAL_UART_Transmit>
	  HAL_Delay(1000);
 800070a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800070e:	f000 fad1 	bl	8000cb4 <HAL_Delay>
	  LIS3DSH_WaitForData();
 8000712:	bf00      	nop
 8000714:	e7db      	b.n	80006ce <main+0x1e>
 8000716:	bf00      	nop
 8000718:	08003880 	.word	0x08003880
 800071c:	200000d0 	.word	0x200000d0

08000720 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b094      	sub	sp, #80	@ 0x50
 8000724:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000726:	f107 0320 	add.w	r3, r7, #32
 800072a:	2230      	movs	r2, #48	@ 0x30
 800072c:	2100      	movs	r1, #0
 800072e:	4618      	mov	r0, r3
 8000730:	f002 fc1a 	bl	8002f68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000734:	f107 030c 	add.w	r3, r7, #12
 8000738:	2200      	movs	r2, #0
 800073a:	601a      	str	r2, [r3, #0]
 800073c:	605a      	str	r2, [r3, #4]
 800073e:	609a      	str	r2, [r3, #8]
 8000740:	60da      	str	r2, [r3, #12]
 8000742:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000744:	2300      	movs	r3, #0
 8000746:	60bb      	str	r3, [r7, #8]
 8000748:	4b28      	ldr	r3, [pc, #160]	@ (80007ec <SystemClock_Config+0xcc>)
 800074a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800074c:	4a27      	ldr	r2, [pc, #156]	@ (80007ec <SystemClock_Config+0xcc>)
 800074e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000752:	6413      	str	r3, [r2, #64]	@ 0x40
 8000754:	4b25      	ldr	r3, [pc, #148]	@ (80007ec <SystemClock_Config+0xcc>)
 8000756:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000758:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800075c:	60bb      	str	r3, [r7, #8]
 800075e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000760:	2300      	movs	r3, #0
 8000762:	607b      	str	r3, [r7, #4]
 8000764:	4b22      	ldr	r3, [pc, #136]	@ (80007f0 <SystemClock_Config+0xd0>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	4a21      	ldr	r2, [pc, #132]	@ (80007f0 <SystemClock_Config+0xd0>)
 800076a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800076e:	6013      	str	r3, [r2, #0]
 8000770:	4b1f      	ldr	r3, [pc, #124]	@ (80007f0 <SystemClock_Config+0xd0>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000778:	607b      	str	r3, [r7, #4]
 800077a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800077c:	2302      	movs	r3, #2
 800077e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000780:	2301      	movs	r3, #1
 8000782:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000784:	2310      	movs	r3, #16
 8000786:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000788:	2302      	movs	r3, #2
 800078a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800078c:	2300      	movs	r3, #0
 800078e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000790:	2308      	movs	r3, #8
 8000792:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000794:	2332      	movs	r3, #50	@ 0x32
 8000796:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000798:	2304      	movs	r3, #4
 800079a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800079c:	2307      	movs	r3, #7
 800079e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007a0:	f107 0320 	add.w	r3, r7, #32
 80007a4:	4618      	mov	r0, r3
 80007a6:	f000 fd3f 	bl	8001228 <HAL_RCC_OscConfig>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d001      	beq.n	80007b4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80007b0:	f000 f8c2 	bl	8000938 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007b4:	230f      	movs	r3, #15
 80007b6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007b8:	2302      	movs	r3, #2
 80007ba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007bc:	2300      	movs	r3, #0
 80007be:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007c0:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80007c4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007c6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007ca:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80007cc:	f107 030c 	add.w	r3, r7, #12
 80007d0:	2100      	movs	r1, #0
 80007d2:	4618      	mov	r0, r3
 80007d4:	f000 ffa0 	bl	8001718 <HAL_RCC_ClockConfig>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80007de:	f000 f8ab 	bl	8000938 <Error_Handler>
  }
}
 80007e2:	bf00      	nop
 80007e4:	3750      	adds	r7, #80	@ 0x50
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	40023800 	.word	0x40023800
 80007f0:	40007000 	.word	0x40007000

080007f4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80007f8:	4b17      	ldr	r3, [pc, #92]	@ (8000858 <MX_SPI1_Init+0x64>)
 80007fa:	4a18      	ldr	r2, [pc, #96]	@ (800085c <MX_SPI1_Init+0x68>)
 80007fc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80007fe:	4b16      	ldr	r3, [pc, #88]	@ (8000858 <MX_SPI1_Init+0x64>)
 8000800:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000804:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000806:	4b14      	ldr	r3, [pc, #80]	@ (8000858 <MX_SPI1_Init+0x64>)
 8000808:	2200      	movs	r2, #0
 800080a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800080c:	4b12      	ldr	r3, [pc, #72]	@ (8000858 <MX_SPI1_Init+0x64>)
 800080e:	2200      	movs	r2, #0
 8000810:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000812:	4b11      	ldr	r3, [pc, #68]	@ (8000858 <MX_SPI1_Init+0x64>)
 8000814:	2200      	movs	r2, #0
 8000816:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000818:	4b0f      	ldr	r3, [pc, #60]	@ (8000858 <MX_SPI1_Init+0x64>)
 800081a:	2200      	movs	r2, #0
 800081c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800081e:	4b0e      	ldr	r3, [pc, #56]	@ (8000858 <MX_SPI1_Init+0x64>)
 8000820:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000824:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000826:	4b0c      	ldr	r3, [pc, #48]	@ (8000858 <MX_SPI1_Init+0x64>)
 8000828:	2210      	movs	r2, #16
 800082a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800082c:	4b0a      	ldr	r3, [pc, #40]	@ (8000858 <MX_SPI1_Init+0x64>)
 800082e:	2200      	movs	r2, #0
 8000830:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000832:	4b09      	ldr	r3, [pc, #36]	@ (8000858 <MX_SPI1_Init+0x64>)
 8000834:	2200      	movs	r2, #0
 8000836:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000838:	4b07      	ldr	r3, [pc, #28]	@ (8000858 <MX_SPI1_Init+0x64>)
 800083a:	2200      	movs	r2, #0
 800083c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800083e:	4b06      	ldr	r3, [pc, #24]	@ (8000858 <MX_SPI1_Init+0x64>)
 8000840:	220a      	movs	r2, #10
 8000842:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000844:	4804      	ldr	r0, [pc, #16]	@ (8000858 <MX_SPI1_Init+0x64>)
 8000846:	f001 f98b 	bl	8001b60 <HAL_SPI_Init>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000850:	f000 f872 	bl	8000938 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000854:	bf00      	nop
 8000856:	bd80      	pop	{r7, pc}
 8000858:	20000078 	.word	0x20000078
 800085c:	40013000 	.word	0x40013000

08000860 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000864:	4b11      	ldr	r3, [pc, #68]	@ (80008ac <MX_USART2_UART_Init+0x4c>)
 8000866:	4a12      	ldr	r2, [pc, #72]	@ (80008b0 <MX_USART2_UART_Init+0x50>)
 8000868:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800086a:	4b10      	ldr	r3, [pc, #64]	@ (80008ac <MX_USART2_UART_Init+0x4c>)
 800086c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000870:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000872:	4b0e      	ldr	r3, [pc, #56]	@ (80008ac <MX_USART2_UART_Init+0x4c>)
 8000874:	2200      	movs	r2, #0
 8000876:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000878:	4b0c      	ldr	r3, [pc, #48]	@ (80008ac <MX_USART2_UART_Init+0x4c>)
 800087a:	2200      	movs	r2, #0
 800087c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800087e:	4b0b      	ldr	r3, [pc, #44]	@ (80008ac <MX_USART2_UART_Init+0x4c>)
 8000880:	2200      	movs	r2, #0
 8000882:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000884:	4b09      	ldr	r3, [pc, #36]	@ (80008ac <MX_USART2_UART_Init+0x4c>)
 8000886:	220c      	movs	r2, #12
 8000888:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800088a:	4b08      	ldr	r3, [pc, #32]	@ (80008ac <MX_USART2_UART_Init+0x4c>)
 800088c:	2200      	movs	r2, #0
 800088e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000890:	4b06      	ldr	r3, [pc, #24]	@ (80008ac <MX_USART2_UART_Init+0x4c>)
 8000892:	2200      	movs	r2, #0
 8000894:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000896:	4805      	ldr	r0, [pc, #20]	@ (80008ac <MX_USART2_UART_Init+0x4c>)
 8000898:	f001 ff34 	bl	8002704 <HAL_UART_Init>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d001      	beq.n	80008a6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80008a2:	f000 f849 	bl	8000938 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008a6:	bf00      	nop
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	200000d0 	.word	0x200000d0
 80008b0:	40004400 	.word	0x40004400

080008b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b088      	sub	sp, #32
 80008b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ba:	f107 030c 	add.w	r3, r7, #12
 80008be:	2200      	movs	r2, #0
 80008c0:	601a      	str	r2, [r3, #0]
 80008c2:	605a      	str	r2, [r3, #4]
 80008c4:	609a      	str	r2, [r3, #8]
 80008c6:	60da      	str	r2, [r3, #12]
 80008c8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008ca:	2300      	movs	r3, #0
 80008cc:	60bb      	str	r3, [r7, #8]
 80008ce:	4b18      	ldr	r3, [pc, #96]	@ (8000930 <MX_GPIO_Init+0x7c>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008d2:	4a17      	ldr	r2, [pc, #92]	@ (8000930 <MX_GPIO_Init+0x7c>)
 80008d4:	f043 0310 	orr.w	r3, r3, #16
 80008d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008da:	4b15      	ldr	r3, [pc, #84]	@ (8000930 <MX_GPIO_Init+0x7c>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008de:	f003 0310 	and.w	r3, r3, #16
 80008e2:	60bb      	str	r3, [r7, #8]
 80008e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008e6:	2300      	movs	r3, #0
 80008e8:	607b      	str	r3, [r7, #4]
 80008ea:	4b11      	ldr	r3, [pc, #68]	@ (8000930 <MX_GPIO_Init+0x7c>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ee:	4a10      	ldr	r2, [pc, #64]	@ (8000930 <MX_GPIO_Init+0x7c>)
 80008f0:	f043 0301 	orr.w	r3, r3, #1
 80008f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008f6:	4b0e      	ldr	r3, [pc, #56]	@ (8000930 <MX_GPIO_Init+0x7c>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008fa:	f003 0301 	and.w	r3, r3, #1
 80008fe:	607b      	str	r3, [r7, #4]
 8000900:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 8000902:	2200      	movs	r2, #0
 8000904:	2108      	movs	r1, #8
 8000906:	480b      	ldr	r0, [pc, #44]	@ (8000934 <MX_GPIO_Init+0x80>)
 8000908:	f000 fc76 	bl	80011f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800090c:	2308      	movs	r3, #8
 800090e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000910:	2301      	movs	r3, #1
 8000912:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000914:	2300      	movs	r3, #0
 8000916:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000918:	2300      	movs	r3, #0
 800091a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800091c:	f107 030c 	add.w	r3, r7, #12
 8000920:	4619      	mov	r1, r3
 8000922:	4804      	ldr	r0, [pc, #16]	@ (8000934 <MX_GPIO_Init+0x80>)
 8000924:	f000 face 	bl	8000ec4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000928:	bf00      	nop
 800092a:	3720      	adds	r7, #32
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}
 8000930:	40023800 	.word	0x40023800
 8000934:	40021000 	.word	0x40021000

08000938 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800093c:	b672      	cpsid	i
}
 800093e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000940:	bf00      	nop
 8000942:	e7fd      	b.n	8000940 <Error_Handler+0x8>

08000944 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b082      	sub	sp, #8
 8000948:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800094a:	2300      	movs	r3, #0
 800094c:	607b      	str	r3, [r7, #4]
 800094e:	4b10      	ldr	r3, [pc, #64]	@ (8000990 <HAL_MspInit+0x4c>)
 8000950:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000952:	4a0f      	ldr	r2, [pc, #60]	@ (8000990 <HAL_MspInit+0x4c>)
 8000954:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000958:	6453      	str	r3, [r2, #68]	@ 0x44
 800095a:	4b0d      	ldr	r3, [pc, #52]	@ (8000990 <HAL_MspInit+0x4c>)
 800095c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800095e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000962:	607b      	str	r3, [r7, #4]
 8000964:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000966:	2300      	movs	r3, #0
 8000968:	603b      	str	r3, [r7, #0]
 800096a:	4b09      	ldr	r3, [pc, #36]	@ (8000990 <HAL_MspInit+0x4c>)
 800096c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800096e:	4a08      	ldr	r2, [pc, #32]	@ (8000990 <HAL_MspInit+0x4c>)
 8000970:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000974:	6413      	str	r3, [r2, #64]	@ 0x40
 8000976:	4b06      	ldr	r3, [pc, #24]	@ (8000990 <HAL_MspInit+0x4c>)
 8000978:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800097a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800097e:	603b      	str	r3, [r7, #0]
 8000980:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000982:	2007      	movs	r0, #7
 8000984:	f000 fa6a 	bl	8000e5c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000988:	bf00      	nop
 800098a:	3708      	adds	r7, #8
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}
 8000990:	40023800 	.word	0x40023800

08000994 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b08a      	sub	sp, #40	@ 0x28
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800099c:	f107 0314 	add.w	r3, r7, #20
 80009a0:	2200      	movs	r2, #0
 80009a2:	601a      	str	r2, [r3, #0]
 80009a4:	605a      	str	r2, [r3, #4]
 80009a6:	609a      	str	r2, [r3, #8]
 80009a8:	60da      	str	r2, [r3, #12]
 80009aa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	4a19      	ldr	r2, [pc, #100]	@ (8000a18 <HAL_SPI_MspInit+0x84>)
 80009b2:	4293      	cmp	r3, r2
 80009b4:	d12b      	bne.n	8000a0e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80009b6:	2300      	movs	r3, #0
 80009b8:	613b      	str	r3, [r7, #16]
 80009ba:	4b18      	ldr	r3, [pc, #96]	@ (8000a1c <HAL_SPI_MspInit+0x88>)
 80009bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009be:	4a17      	ldr	r2, [pc, #92]	@ (8000a1c <HAL_SPI_MspInit+0x88>)
 80009c0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80009c4:	6453      	str	r3, [r2, #68]	@ 0x44
 80009c6:	4b15      	ldr	r3, [pc, #84]	@ (8000a1c <HAL_SPI_MspInit+0x88>)
 80009c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009ca:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80009ce:	613b      	str	r3, [r7, #16]
 80009d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009d2:	2300      	movs	r3, #0
 80009d4:	60fb      	str	r3, [r7, #12]
 80009d6:	4b11      	ldr	r3, [pc, #68]	@ (8000a1c <HAL_SPI_MspInit+0x88>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009da:	4a10      	ldr	r2, [pc, #64]	@ (8000a1c <HAL_SPI_MspInit+0x88>)
 80009dc:	f043 0301 	orr.w	r3, r3, #1
 80009e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80009e2:	4b0e      	ldr	r3, [pc, #56]	@ (8000a1c <HAL_SPI_MspInit+0x88>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009e6:	f003 0301 	and.w	r3, r3, #1
 80009ea:	60fb      	str	r3, [r7, #12]
 80009ec:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80009ee:	23e0      	movs	r3, #224	@ 0xe0
 80009f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f2:	2302      	movs	r3, #2
 80009f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f6:	2300      	movs	r3, #0
 80009f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009fa:	2303      	movs	r3, #3
 80009fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80009fe:	2305      	movs	r3, #5
 8000a00:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a02:	f107 0314 	add.w	r3, r7, #20
 8000a06:	4619      	mov	r1, r3
 8000a08:	4805      	ldr	r0, [pc, #20]	@ (8000a20 <HAL_SPI_MspInit+0x8c>)
 8000a0a:	f000 fa5b 	bl	8000ec4 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000a0e:	bf00      	nop
 8000a10:	3728      	adds	r7, #40	@ 0x28
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	40013000 	.word	0x40013000
 8000a1c:	40023800 	.word	0x40023800
 8000a20:	40020000 	.word	0x40020000

08000a24 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b08a      	sub	sp, #40	@ 0x28
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a2c:	f107 0314 	add.w	r3, r7, #20
 8000a30:	2200      	movs	r2, #0
 8000a32:	601a      	str	r2, [r3, #0]
 8000a34:	605a      	str	r2, [r3, #4]
 8000a36:	609a      	str	r2, [r3, #8]
 8000a38:	60da      	str	r2, [r3, #12]
 8000a3a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	4a19      	ldr	r2, [pc, #100]	@ (8000aa8 <HAL_UART_MspInit+0x84>)
 8000a42:	4293      	cmp	r3, r2
 8000a44:	d12b      	bne.n	8000a9e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a46:	2300      	movs	r3, #0
 8000a48:	613b      	str	r3, [r7, #16]
 8000a4a:	4b18      	ldr	r3, [pc, #96]	@ (8000aac <HAL_UART_MspInit+0x88>)
 8000a4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a4e:	4a17      	ldr	r2, [pc, #92]	@ (8000aac <HAL_UART_MspInit+0x88>)
 8000a50:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a54:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a56:	4b15      	ldr	r3, [pc, #84]	@ (8000aac <HAL_UART_MspInit+0x88>)
 8000a58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a5e:	613b      	str	r3, [r7, #16]
 8000a60:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a62:	2300      	movs	r3, #0
 8000a64:	60fb      	str	r3, [r7, #12]
 8000a66:	4b11      	ldr	r3, [pc, #68]	@ (8000aac <HAL_UART_MspInit+0x88>)
 8000a68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a6a:	4a10      	ldr	r2, [pc, #64]	@ (8000aac <HAL_UART_MspInit+0x88>)
 8000a6c:	f043 0301 	orr.w	r3, r3, #1
 8000a70:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a72:	4b0e      	ldr	r3, [pc, #56]	@ (8000aac <HAL_UART_MspInit+0x88>)
 8000a74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a76:	f003 0301 	and.w	r3, r3, #1
 8000a7a:	60fb      	str	r3, [r7, #12]
 8000a7c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000a7e:	230c      	movs	r3, #12
 8000a80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a82:	2302      	movs	r3, #2
 8000a84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a86:	2300      	movs	r3, #0
 8000a88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a8a:	2303      	movs	r3, #3
 8000a8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a8e:	2307      	movs	r3, #7
 8000a90:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a92:	f107 0314 	add.w	r3, r7, #20
 8000a96:	4619      	mov	r1, r3
 8000a98:	4805      	ldr	r0, [pc, #20]	@ (8000ab0 <HAL_UART_MspInit+0x8c>)
 8000a9a:	f000 fa13 	bl	8000ec4 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000a9e:	bf00      	nop
 8000aa0:	3728      	adds	r7, #40	@ 0x28
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	40004400 	.word	0x40004400
 8000aac:	40023800 	.word	0x40023800
 8000ab0:	40020000 	.word	0x40020000

08000ab4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ab8:	bf00      	nop
 8000aba:	e7fd      	b.n	8000ab8 <NMI_Handler+0x4>

08000abc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ac0:	bf00      	nop
 8000ac2:	e7fd      	b.n	8000ac0 <HardFault_Handler+0x4>

08000ac4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ac8:	bf00      	nop
 8000aca:	e7fd      	b.n	8000ac8 <MemManage_Handler+0x4>

08000acc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ad0:	bf00      	nop
 8000ad2:	e7fd      	b.n	8000ad0 <BusFault_Handler+0x4>

08000ad4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ad8:	bf00      	nop
 8000ada:	e7fd      	b.n	8000ad8 <UsageFault_Handler+0x4>

08000adc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ae0:	bf00      	nop
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bc80      	pop	{r7}
 8000ae6:	4770      	bx	lr

08000ae8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000aec:	bf00      	nop
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bc80      	pop	{r7}
 8000af2:	4770      	bx	lr

08000af4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000af8:	bf00      	nop
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bc80      	pop	{r7}
 8000afe:	4770      	bx	lr

08000b00 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b04:	f000 f8ba 	bl	8000c7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b08:	bf00      	nop
 8000b0a:	bd80      	pop	{r7, pc}

08000b0c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b086      	sub	sp, #24
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b14:	4a14      	ldr	r2, [pc, #80]	@ (8000b68 <_sbrk+0x5c>)
 8000b16:	4b15      	ldr	r3, [pc, #84]	@ (8000b6c <_sbrk+0x60>)
 8000b18:	1ad3      	subs	r3, r2, r3
 8000b1a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b1c:	697b      	ldr	r3, [r7, #20]
 8000b1e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b20:	4b13      	ldr	r3, [pc, #76]	@ (8000b70 <_sbrk+0x64>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d102      	bne.n	8000b2e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b28:	4b11      	ldr	r3, [pc, #68]	@ (8000b70 <_sbrk+0x64>)
 8000b2a:	4a12      	ldr	r2, [pc, #72]	@ (8000b74 <_sbrk+0x68>)
 8000b2c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b2e:	4b10      	ldr	r3, [pc, #64]	@ (8000b70 <_sbrk+0x64>)
 8000b30:	681a      	ldr	r2, [r3, #0]
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	4413      	add	r3, r2
 8000b36:	693a      	ldr	r2, [r7, #16]
 8000b38:	429a      	cmp	r2, r3
 8000b3a:	d207      	bcs.n	8000b4c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b3c:	f002 fa1c 	bl	8002f78 <__errno>
 8000b40:	4603      	mov	r3, r0
 8000b42:	220c      	movs	r2, #12
 8000b44:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b46:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000b4a:	e009      	b.n	8000b60 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b4c:	4b08      	ldr	r3, [pc, #32]	@ (8000b70 <_sbrk+0x64>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b52:	4b07      	ldr	r3, [pc, #28]	@ (8000b70 <_sbrk+0x64>)
 8000b54:	681a      	ldr	r2, [r3, #0]
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	4413      	add	r3, r2
 8000b5a:	4a05      	ldr	r2, [pc, #20]	@ (8000b70 <_sbrk+0x64>)
 8000b5c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b5e:	68fb      	ldr	r3, [r7, #12]
}
 8000b60:	4618      	mov	r0, r3
 8000b62:	3718      	adds	r7, #24
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	20020000 	.word	0x20020000
 8000b6c:	00000400 	.word	0x00000400
 8000b70:	20000118 	.word	0x20000118
 8000b74:	20000268 	.word	0x20000268

08000b78 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b7c:	bf00      	nop
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bc80      	pop	{r7}
 8000b82:	4770      	bx	lr

08000b84 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000b84:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000bbc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000b88:	f7ff fff6 	bl	8000b78 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b8c:	480c      	ldr	r0, [pc, #48]	@ (8000bc0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b8e:	490d      	ldr	r1, [pc, #52]	@ (8000bc4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b90:	4a0d      	ldr	r2, [pc, #52]	@ (8000bc8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b94:	e002      	b.n	8000b9c <LoopCopyDataInit>

08000b96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b9a:	3304      	adds	r3, #4

08000b9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ba0:	d3f9      	bcc.n	8000b96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ba2:	4a0a      	ldr	r2, [pc, #40]	@ (8000bcc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ba4:	4c0a      	ldr	r4, [pc, #40]	@ (8000bd0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ba6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ba8:	e001      	b.n	8000bae <LoopFillZerobss>

08000baa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000baa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bac:	3204      	adds	r2, #4

08000bae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bb0:	d3fb      	bcc.n	8000baa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bb2:	f002 f9e7 	bl	8002f84 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bb6:	f7ff fd7b 	bl	80006b0 <main>
  bx  lr    
 8000bba:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000bbc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000bc0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bc4:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000bc8:	080038f0 	.word	0x080038f0
  ldr r2, =_sbss
 8000bcc:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000bd0:	20000268 	.word	0x20000268

08000bd4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bd4:	e7fe      	b.n	8000bd4 <ADC_IRQHandler>
	...

08000bd8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000bdc:	4b0e      	ldr	r3, [pc, #56]	@ (8000c18 <HAL_Init+0x40>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	4a0d      	ldr	r2, [pc, #52]	@ (8000c18 <HAL_Init+0x40>)
 8000be2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000be6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000be8:	4b0b      	ldr	r3, [pc, #44]	@ (8000c18 <HAL_Init+0x40>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	4a0a      	ldr	r2, [pc, #40]	@ (8000c18 <HAL_Init+0x40>)
 8000bee:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000bf2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bf4:	4b08      	ldr	r3, [pc, #32]	@ (8000c18 <HAL_Init+0x40>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	4a07      	ldr	r2, [pc, #28]	@ (8000c18 <HAL_Init+0x40>)
 8000bfa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000bfe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c00:	2003      	movs	r0, #3
 8000c02:	f000 f92b 	bl	8000e5c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c06:	2000      	movs	r0, #0
 8000c08:	f000 f808 	bl	8000c1c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c0c:	f7ff fe9a 	bl	8000944 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c10:	2300      	movs	r3, #0
}
 8000c12:	4618      	mov	r0, r3
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	40023c00 	.word	0x40023c00

08000c1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b082      	sub	sp, #8
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c24:	4b12      	ldr	r3, [pc, #72]	@ (8000c70 <HAL_InitTick+0x54>)
 8000c26:	681a      	ldr	r2, [r3, #0]
 8000c28:	4b12      	ldr	r3, [pc, #72]	@ (8000c74 <HAL_InitTick+0x58>)
 8000c2a:	781b      	ldrb	r3, [r3, #0]
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c32:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c36:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f000 f935 	bl	8000eaa <HAL_SYSTICK_Config>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d001      	beq.n	8000c4a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c46:	2301      	movs	r3, #1
 8000c48:	e00e      	b.n	8000c68 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	2b0f      	cmp	r3, #15
 8000c4e:	d80a      	bhi.n	8000c66 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c50:	2200      	movs	r2, #0
 8000c52:	6879      	ldr	r1, [r7, #4]
 8000c54:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000c58:	f000 f90b 	bl	8000e72 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c5c:	4a06      	ldr	r2, [pc, #24]	@ (8000c78 <HAL_InitTick+0x5c>)
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c62:	2300      	movs	r3, #0
 8000c64:	e000      	b.n	8000c68 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c66:	2301      	movs	r3, #1
}
 8000c68:	4618      	mov	r0, r3
 8000c6a:	3708      	adds	r7, #8
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	20000000 	.word	0x20000000
 8000c74:	20000008 	.word	0x20000008
 8000c78:	20000004 	.word	0x20000004

08000c7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c80:	4b05      	ldr	r3, [pc, #20]	@ (8000c98 <HAL_IncTick+0x1c>)
 8000c82:	781b      	ldrb	r3, [r3, #0]
 8000c84:	461a      	mov	r2, r3
 8000c86:	4b05      	ldr	r3, [pc, #20]	@ (8000c9c <HAL_IncTick+0x20>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	4413      	add	r3, r2
 8000c8c:	4a03      	ldr	r2, [pc, #12]	@ (8000c9c <HAL_IncTick+0x20>)
 8000c8e:	6013      	str	r3, [r2, #0]
}
 8000c90:	bf00      	nop
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bc80      	pop	{r7}
 8000c96:	4770      	bx	lr
 8000c98:	20000008 	.word	0x20000008
 8000c9c:	2000011c 	.word	0x2000011c

08000ca0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ca4:	4b02      	ldr	r3, [pc, #8]	@ (8000cb0 <HAL_GetTick+0x10>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
}
 8000ca8:	4618      	mov	r0, r3
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bc80      	pop	{r7}
 8000cae:	4770      	bx	lr
 8000cb0:	2000011c 	.word	0x2000011c

08000cb4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b084      	sub	sp, #16
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cbc:	f7ff fff0 	bl	8000ca0 <HAL_GetTick>
 8000cc0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000ccc:	d005      	beq.n	8000cda <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cce:	4b0a      	ldr	r3, [pc, #40]	@ (8000cf8 <HAL_Delay+0x44>)
 8000cd0:	781b      	ldrb	r3, [r3, #0]
 8000cd2:	461a      	mov	r2, r3
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	4413      	add	r3, r2
 8000cd8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000cda:	bf00      	nop
 8000cdc:	f7ff ffe0 	bl	8000ca0 <HAL_GetTick>
 8000ce0:	4602      	mov	r2, r0
 8000ce2:	68bb      	ldr	r3, [r7, #8]
 8000ce4:	1ad3      	subs	r3, r2, r3
 8000ce6:	68fa      	ldr	r2, [r7, #12]
 8000ce8:	429a      	cmp	r2, r3
 8000cea:	d8f7      	bhi.n	8000cdc <HAL_Delay+0x28>
  {
  }
}
 8000cec:	bf00      	nop
 8000cee:	bf00      	nop
 8000cf0:	3710      	adds	r7, #16
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	20000008 	.word	0x20000008

08000cfc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	b085      	sub	sp, #20
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	f003 0307 	and.w	r3, r3, #7
 8000d0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d0c:	4b0c      	ldr	r3, [pc, #48]	@ (8000d40 <__NVIC_SetPriorityGrouping+0x44>)
 8000d0e:	68db      	ldr	r3, [r3, #12]
 8000d10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d12:	68ba      	ldr	r2, [r7, #8]
 8000d14:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d18:	4013      	ands	r3, r2
 8000d1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d20:	68bb      	ldr	r3, [r7, #8]
 8000d22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d24:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d28:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d2e:	4a04      	ldr	r2, [pc, #16]	@ (8000d40 <__NVIC_SetPriorityGrouping+0x44>)
 8000d30:	68bb      	ldr	r3, [r7, #8]
 8000d32:	60d3      	str	r3, [r2, #12]
}
 8000d34:	bf00      	nop
 8000d36:	3714      	adds	r7, #20
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bc80      	pop	{r7}
 8000d3c:	4770      	bx	lr
 8000d3e:	bf00      	nop
 8000d40:	e000ed00 	.word	0xe000ed00

08000d44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d48:	4b04      	ldr	r3, [pc, #16]	@ (8000d5c <__NVIC_GetPriorityGrouping+0x18>)
 8000d4a:	68db      	ldr	r3, [r3, #12]
 8000d4c:	0a1b      	lsrs	r3, r3, #8
 8000d4e:	f003 0307 	and.w	r3, r3, #7
}
 8000d52:	4618      	mov	r0, r3
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bc80      	pop	{r7}
 8000d58:	4770      	bx	lr
 8000d5a:	bf00      	nop
 8000d5c:	e000ed00 	.word	0xe000ed00

08000d60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d60:	b480      	push	{r7}
 8000d62:	b083      	sub	sp, #12
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	4603      	mov	r3, r0
 8000d68:	6039      	str	r1, [r7, #0]
 8000d6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	db0a      	blt.n	8000d8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	b2da      	uxtb	r2, r3
 8000d78:	490c      	ldr	r1, [pc, #48]	@ (8000dac <__NVIC_SetPriority+0x4c>)
 8000d7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d7e:	0112      	lsls	r2, r2, #4
 8000d80:	b2d2      	uxtb	r2, r2
 8000d82:	440b      	add	r3, r1
 8000d84:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d88:	e00a      	b.n	8000da0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	b2da      	uxtb	r2, r3
 8000d8e:	4908      	ldr	r1, [pc, #32]	@ (8000db0 <__NVIC_SetPriority+0x50>)
 8000d90:	79fb      	ldrb	r3, [r7, #7]
 8000d92:	f003 030f 	and.w	r3, r3, #15
 8000d96:	3b04      	subs	r3, #4
 8000d98:	0112      	lsls	r2, r2, #4
 8000d9a:	b2d2      	uxtb	r2, r2
 8000d9c:	440b      	add	r3, r1
 8000d9e:	761a      	strb	r2, [r3, #24]
}
 8000da0:	bf00      	nop
 8000da2:	370c      	adds	r7, #12
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bc80      	pop	{r7}
 8000da8:	4770      	bx	lr
 8000daa:	bf00      	nop
 8000dac:	e000e100 	.word	0xe000e100
 8000db0:	e000ed00 	.word	0xe000ed00

08000db4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000db4:	b480      	push	{r7}
 8000db6:	b089      	sub	sp, #36	@ 0x24
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	60f8      	str	r0, [r7, #12]
 8000dbc:	60b9      	str	r1, [r7, #8]
 8000dbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	f003 0307 	and.w	r3, r3, #7
 8000dc6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dc8:	69fb      	ldr	r3, [r7, #28]
 8000dca:	f1c3 0307 	rsb	r3, r3, #7
 8000dce:	2b04      	cmp	r3, #4
 8000dd0:	bf28      	it	cs
 8000dd2:	2304      	movcs	r3, #4
 8000dd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dd6:	69fb      	ldr	r3, [r7, #28]
 8000dd8:	3304      	adds	r3, #4
 8000dda:	2b06      	cmp	r3, #6
 8000ddc:	d902      	bls.n	8000de4 <NVIC_EncodePriority+0x30>
 8000dde:	69fb      	ldr	r3, [r7, #28]
 8000de0:	3b03      	subs	r3, #3
 8000de2:	e000      	b.n	8000de6 <NVIC_EncodePriority+0x32>
 8000de4:	2300      	movs	r3, #0
 8000de6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000de8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000dec:	69bb      	ldr	r3, [r7, #24]
 8000dee:	fa02 f303 	lsl.w	r3, r2, r3
 8000df2:	43da      	mvns	r2, r3
 8000df4:	68bb      	ldr	r3, [r7, #8]
 8000df6:	401a      	ands	r2, r3
 8000df8:	697b      	ldr	r3, [r7, #20]
 8000dfa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dfc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000e00:	697b      	ldr	r3, [r7, #20]
 8000e02:	fa01 f303 	lsl.w	r3, r1, r3
 8000e06:	43d9      	mvns	r1, r3
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e0c:	4313      	orrs	r3, r2
         );
}
 8000e0e:	4618      	mov	r0, r3
 8000e10:	3724      	adds	r7, #36	@ 0x24
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bc80      	pop	{r7}
 8000e16:	4770      	bx	lr

08000e18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b082      	sub	sp, #8
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	3b01      	subs	r3, #1
 8000e24:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000e28:	d301      	bcc.n	8000e2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	e00f      	b.n	8000e4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e2e:	4a0a      	ldr	r2, [pc, #40]	@ (8000e58 <SysTick_Config+0x40>)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	3b01      	subs	r3, #1
 8000e34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e36:	210f      	movs	r1, #15
 8000e38:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000e3c:	f7ff ff90 	bl	8000d60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e40:	4b05      	ldr	r3, [pc, #20]	@ (8000e58 <SysTick_Config+0x40>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e46:	4b04      	ldr	r3, [pc, #16]	@ (8000e58 <SysTick_Config+0x40>)
 8000e48:	2207      	movs	r2, #7
 8000e4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e4c:	2300      	movs	r3, #0
}
 8000e4e:	4618      	mov	r0, r3
 8000e50:	3708      	adds	r7, #8
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	e000e010 	.word	0xe000e010

08000e5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b082      	sub	sp, #8
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e64:	6878      	ldr	r0, [r7, #4]
 8000e66:	f7ff ff49 	bl	8000cfc <__NVIC_SetPriorityGrouping>
}
 8000e6a:	bf00      	nop
 8000e6c:	3708      	adds	r7, #8
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}

08000e72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e72:	b580      	push	{r7, lr}
 8000e74:	b086      	sub	sp, #24
 8000e76:	af00      	add	r7, sp, #0
 8000e78:	4603      	mov	r3, r0
 8000e7a:	60b9      	str	r1, [r7, #8]
 8000e7c:	607a      	str	r2, [r7, #4]
 8000e7e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e80:	2300      	movs	r3, #0
 8000e82:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e84:	f7ff ff5e 	bl	8000d44 <__NVIC_GetPriorityGrouping>
 8000e88:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e8a:	687a      	ldr	r2, [r7, #4]
 8000e8c:	68b9      	ldr	r1, [r7, #8]
 8000e8e:	6978      	ldr	r0, [r7, #20]
 8000e90:	f7ff ff90 	bl	8000db4 <NVIC_EncodePriority>
 8000e94:	4602      	mov	r2, r0
 8000e96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e9a:	4611      	mov	r1, r2
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f7ff ff5f 	bl	8000d60 <__NVIC_SetPriority>
}
 8000ea2:	bf00      	nop
 8000ea4:	3718      	adds	r7, #24
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}

08000eaa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000eaa:	b580      	push	{r7, lr}
 8000eac:	b082      	sub	sp, #8
 8000eae:	af00      	add	r7, sp, #0
 8000eb0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000eb2:	6878      	ldr	r0, [r7, #4]
 8000eb4:	f7ff ffb0 	bl	8000e18 <SysTick_Config>
 8000eb8:	4603      	mov	r3, r0
}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	3708      	adds	r7, #8
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
	...

08000ec4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b089      	sub	sp, #36	@ 0x24
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
 8000ecc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000eda:	2300      	movs	r3, #0
 8000edc:	61fb      	str	r3, [r7, #28]
 8000ede:	e16b      	b.n	80011b8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	69fb      	ldr	r3, [r7, #28]
 8000ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	697a      	ldr	r2, [r7, #20]
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ef4:	693a      	ldr	r2, [r7, #16]
 8000ef6:	697b      	ldr	r3, [r7, #20]
 8000ef8:	429a      	cmp	r2, r3
 8000efa:	f040 815a 	bne.w	80011b2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	685b      	ldr	r3, [r3, #4]
 8000f02:	f003 0303 	and.w	r3, r3, #3
 8000f06:	2b01      	cmp	r3, #1
 8000f08:	d005      	beq.n	8000f16 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	685b      	ldr	r3, [r3, #4]
 8000f0e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f12:	2b02      	cmp	r3, #2
 8000f14:	d130      	bne.n	8000f78 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	689b      	ldr	r3, [r3, #8]
 8000f1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f1c:	69fb      	ldr	r3, [r7, #28]
 8000f1e:	005b      	lsls	r3, r3, #1
 8000f20:	2203      	movs	r2, #3
 8000f22:	fa02 f303 	lsl.w	r3, r2, r3
 8000f26:	43db      	mvns	r3, r3
 8000f28:	69ba      	ldr	r2, [r7, #24]
 8000f2a:	4013      	ands	r3, r2
 8000f2c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	68da      	ldr	r2, [r3, #12]
 8000f32:	69fb      	ldr	r3, [r7, #28]
 8000f34:	005b      	lsls	r3, r3, #1
 8000f36:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3a:	69ba      	ldr	r2, [r7, #24]
 8000f3c:	4313      	orrs	r3, r2
 8000f3e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	69ba      	ldr	r2, [r7, #24]
 8000f44:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	685b      	ldr	r3, [r3, #4]
 8000f4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	69fb      	ldr	r3, [r7, #28]
 8000f50:	fa02 f303 	lsl.w	r3, r2, r3
 8000f54:	43db      	mvns	r3, r3
 8000f56:	69ba      	ldr	r2, [r7, #24]
 8000f58:	4013      	ands	r3, r2
 8000f5a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	685b      	ldr	r3, [r3, #4]
 8000f60:	091b      	lsrs	r3, r3, #4
 8000f62:	f003 0201 	and.w	r2, r3, #1
 8000f66:	69fb      	ldr	r3, [r7, #28]
 8000f68:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6c:	69ba      	ldr	r2, [r7, #24]
 8000f6e:	4313      	orrs	r3, r2
 8000f70:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	69ba      	ldr	r2, [r7, #24]
 8000f76:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	685b      	ldr	r3, [r3, #4]
 8000f7c:	f003 0303 	and.w	r3, r3, #3
 8000f80:	2b03      	cmp	r3, #3
 8000f82:	d017      	beq.n	8000fb4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	68db      	ldr	r3, [r3, #12]
 8000f88:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f8a:	69fb      	ldr	r3, [r7, #28]
 8000f8c:	005b      	lsls	r3, r3, #1
 8000f8e:	2203      	movs	r2, #3
 8000f90:	fa02 f303 	lsl.w	r3, r2, r3
 8000f94:	43db      	mvns	r3, r3
 8000f96:	69ba      	ldr	r2, [r7, #24]
 8000f98:	4013      	ands	r3, r2
 8000f9a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	689a      	ldr	r2, [r3, #8]
 8000fa0:	69fb      	ldr	r3, [r7, #28]
 8000fa2:	005b      	lsls	r3, r3, #1
 8000fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa8:	69ba      	ldr	r2, [r7, #24]
 8000faa:	4313      	orrs	r3, r2
 8000fac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	69ba      	ldr	r2, [r7, #24]
 8000fb2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	f003 0303 	and.w	r3, r3, #3
 8000fbc:	2b02      	cmp	r3, #2
 8000fbe:	d123      	bne.n	8001008 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000fc0:	69fb      	ldr	r3, [r7, #28]
 8000fc2:	08da      	lsrs	r2, r3, #3
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	3208      	adds	r2, #8
 8000fc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fcc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000fce:	69fb      	ldr	r3, [r7, #28]
 8000fd0:	f003 0307 	and.w	r3, r3, #7
 8000fd4:	009b      	lsls	r3, r3, #2
 8000fd6:	220f      	movs	r2, #15
 8000fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fdc:	43db      	mvns	r3, r3
 8000fde:	69ba      	ldr	r2, [r7, #24]
 8000fe0:	4013      	ands	r3, r2
 8000fe2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	691a      	ldr	r2, [r3, #16]
 8000fe8:	69fb      	ldr	r3, [r7, #28]
 8000fea:	f003 0307 	and.w	r3, r3, #7
 8000fee:	009b      	lsls	r3, r3, #2
 8000ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff4:	69ba      	ldr	r2, [r7, #24]
 8000ff6:	4313      	orrs	r3, r2
 8000ff8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000ffa:	69fb      	ldr	r3, [r7, #28]
 8000ffc:	08da      	lsrs	r2, r3, #3
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	3208      	adds	r2, #8
 8001002:	69b9      	ldr	r1, [r7, #24]
 8001004:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800100e:	69fb      	ldr	r3, [r7, #28]
 8001010:	005b      	lsls	r3, r3, #1
 8001012:	2203      	movs	r2, #3
 8001014:	fa02 f303 	lsl.w	r3, r2, r3
 8001018:	43db      	mvns	r3, r3
 800101a:	69ba      	ldr	r2, [r7, #24]
 800101c:	4013      	ands	r3, r2
 800101e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	f003 0203 	and.w	r2, r3, #3
 8001028:	69fb      	ldr	r3, [r7, #28]
 800102a:	005b      	lsls	r3, r3, #1
 800102c:	fa02 f303 	lsl.w	r3, r2, r3
 8001030:	69ba      	ldr	r2, [r7, #24]
 8001032:	4313      	orrs	r3, r2
 8001034:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	69ba      	ldr	r2, [r7, #24]
 800103a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001044:	2b00      	cmp	r3, #0
 8001046:	f000 80b4 	beq.w	80011b2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800104a:	2300      	movs	r3, #0
 800104c:	60fb      	str	r3, [r7, #12]
 800104e:	4b5f      	ldr	r3, [pc, #380]	@ (80011cc <HAL_GPIO_Init+0x308>)
 8001050:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001052:	4a5e      	ldr	r2, [pc, #376]	@ (80011cc <HAL_GPIO_Init+0x308>)
 8001054:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001058:	6453      	str	r3, [r2, #68]	@ 0x44
 800105a:	4b5c      	ldr	r3, [pc, #368]	@ (80011cc <HAL_GPIO_Init+0x308>)
 800105c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800105e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001062:	60fb      	str	r3, [r7, #12]
 8001064:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001066:	4a5a      	ldr	r2, [pc, #360]	@ (80011d0 <HAL_GPIO_Init+0x30c>)
 8001068:	69fb      	ldr	r3, [r7, #28]
 800106a:	089b      	lsrs	r3, r3, #2
 800106c:	3302      	adds	r3, #2
 800106e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001072:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001074:	69fb      	ldr	r3, [r7, #28]
 8001076:	f003 0303 	and.w	r3, r3, #3
 800107a:	009b      	lsls	r3, r3, #2
 800107c:	220f      	movs	r2, #15
 800107e:	fa02 f303 	lsl.w	r3, r2, r3
 8001082:	43db      	mvns	r3, r3
 8001084:	69ba      	ldr	r2, [r7, #24]
 8001086:	4013      	ands	r3, r2
 8001088:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	4a51      	ldr	r2, [pc, #324]	@ (80011d4 <HAL_GPIO_Init+0x310>)
 800108e:	4293      	cmp	r3, r2
 8001090:	d02b      	beq.n	80010ea <HAL_GPIO_Init+0x226>
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	4a50      	ldr	r2, [pc, #320]	@ (80011d8 <HAL_GPIO_Init+0x314>)
 8001096:	4293      	cmp	r3, r2
 8001098:	d025      	beq.n	80010e6 <HAL_GPIO_Init+0x222>
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	4a4f      	ldr	r2, [pc, #316]	@ (80011dc <HAL_GPIO_Init+0x318>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d01f      	beq.n	80010e2 <HAL_GPIO_Init+0x21e>
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	4a4e      	ldr	r2, [pc, #312]	@ (80011e0 <HAL_GPIO_Init+0x31c>)
 80010a6:	4293      	cmp	r3, r2
 80010a8:	d019      	beq.n	80010de <HAL_GPIO_Init+0x21a>
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	4a4d      	ldr	r2, [pc, #308]	@ (80011e4 <HAL_GPIO_Init+0x320>)
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d013      	beq.n	80010da <HAL_GPIO_Init+0x216>
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	4a4c      	ldr	r2, [pc, #304]	@ (80011e8 <HAL_GPIO_Init+0x324>)
 80010b6:	4293      	cmp	r3, r2
 80010b8:	d00d      	beq.n	80010d6 <HAL_GPIO_Init+0x212>
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	4a4b      	ldr	r2, [pc, #300]	@ (80011ec <HAL_GPIO_Init+0x328>)
 80010be:	4293      	cmp	r3, r2
 80010c0:	d007      	beq.n	80010d2 <HAL_GPIO_Init+0x20e>
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	4a4a      	ldr	r2, [pc, #296]	@ (80011f0 <HAL_GPIO_Init+0x32c>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d101      	bne.n	80010ce <HAL_GPIO_Init+0x20a>
 80010ca:	2307      	movs	r3, #7
 80010cc:	e00e      	b.n	80010ec <HAL_GPIO_Init+0x228>
 80010ce:	2308      	movs	r3, #8
 80010d0:	e00c      	b.n	80010ec <HAL_GPIO_Init+0x228>
 80010d2:	2306      	movs	r3, #6
 80010d4:	e00a      	b.n	80010ec <HAL_GPIO_Init+0x228>
 80010d6:	2305      	movs	r3, #5
 80010d8:	e008      	b.n	80010ec <HAL_GPIO_Init+0x228>
 80010da:	2304      	movs	r3, #4
 80010dc:	e006      	b.n	80010ec <HAL_GPIO_Init+0x228>
 80010de:	2303      	movs	r3, #3
 80010e0:	e004      	b.n	80010ec <HAL_GPIO_Init+0x228>
 80010e2:	2302      	movs	r3, #2
 80010e4:	e002      	b.n	80010ec <HAL_GPIO_Init+0x228>
 80010e6:	2301      	movs	r3, #1
 80010e8:	e000      	b.n	80010ec <HAL_GPIO_Init+0x228>
 80010ea:	2300      	movs	r3, #0
 80010ec:	69fa      	ldr	r2, [r7, #28]
 80010ee:	f002 0203 	and.w	r2, r2, #3
 80010f2:	0092      	lsls	r2, r2, #2
 80010f4:	4093      	lsls	r3, r2
 80010f6:	69ba      	ldr	r2, [r7, #24]
 80010f8:	4313      	orrs	r3, r2
 80010fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010fc:	4934      	ldr	r1, [pc, #208]	@ (80011d0 <HAL_GPIO_Init+0x30c>)
 80010fe:	69fb      	ldr	r3, [r7, #28]
 8001100:	089b      	lsrs	r3, r3, #2
 8001102:	3302      	adds	r3, #2
 8001104:	69ba      	ldr	r2, [r7, #24]
 8001106:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800110a:	4b3a      	ldr	r3, [pc, #232]	@ (80011f4 <HAL_GPIO_Init+0x330>)
 800110c:	689b      	ldr	r3, [r3, #8]
 800110e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001110:	693b      	ldr	r3, [r7, #16]
 8001112:	43db      	mvns	r3, r3
 8001114:	69ba      	ldr	r2, [r7, #24]
 8001116:	4013      	ands	r3, r2
 8001118:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001122:	2b00      	cmp	r3, #0
 8001124:	d003      	beq.n	800112e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001126:	69ba      	ldr	r2, [r7, #24]
 8001128:	693b      	ldr	r3, [r7, #16]
 800112a:	4313      	orrs	r3, r2
 800112c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800112e:	4a31      	ldr	r2, [pc, #196]	@ (80011f4 <HAL_GPIO_Init+0x330>)
 8001130:	69bb      	ldr	r3, [r7, #24]
 8001132:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001134:	4b2f      	ldr	r3, [pc, #188]	@ (80011f4 <HAL_GPIO_Init+0x330>)
 8001136:	68db      	ldr	r3, [r3, #12]
 8001138:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800113a:	693b      	ldr	r3, [r7, #16]
 800113c:	43db      	mvns	r3, r3
 800113e:	69ba      	ldr	r2, [r7, #24]
 8001140:	4013      	ands	r3, r2
 8001142:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800114c:	2b00      	cmp	r3, #0
 800114e:	d003      	beq.n	8001158 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001150:	69ba      	ldr	r2, [r7, #24]
 8001152:	693b      	ldr	r3, [r7, #16]
 8001154:	4313      	orrs	r3, r2
 8001156:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001158:	4a26      	ldr	r2, [pc, #152]	@ (80011f4 <HAL_GPIO_Init+0x330>)
 800115a:	69bb      	ldr	r3, [r7, #24]
 800115c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800115e:	4b25      	ldr	r3, [pc, #148]	@ (80011f4 <HAL_GPIO_Init+0x330>)
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001164:	693b      	ldr	r3, [r7, #16]
 8001166:	43db      	mvns	r3, r3
 8001168:	69ba      	ldr	r2, [r7, #24]
 800116a:	4013      	ands	r3, r2
 800116c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001176:	2b00      	cmp	r3, #0
 8001178:	d003      	beq.n	8001182 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800117a:	69ba      	ldr	r2, [r7, #24]
 800117c:	693b      	ldr	r3, [r7, #16]
 800117e:	4313      	orrs	r3, r2
 8001180:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001182:	4a1c      	ldr	r2, [pc, #112]	@ (80011f4 <HAL_GPIO_Init+0x330>)
 8001184:	69bb      	ldr	r3, [r7, #24]
 8001186:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001188:	4b1a      	ldr	r3, [pc, #104]	@ (80011f4 <HAL_GPIO_Init+0x330>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800118e:	693b      	ldr	r3, [r7, #16]
 8001190:	43db      	mvns	r3, r3
 8001192:	69ba      	ldr	r2, [r7, #24]
 8001194:	4013      	ands	r3, r2
 8001196:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d003      	beq.n	80011ac <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80011a4:	69ba      	ldr	r2, [r7, #24]
 80011a6:	693b      	ldr	r3, [r7, #16]
 80011a8:	4313      	orrs	r3, r2
 80011aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80011ac:	4a11      	ldr	r2, [pc, #68]	@ (80011f4 <HAL_GPIO_Init+0x330>)
 80011ae:	69bb      	ldr	r3, [r7, #24]
 80011b0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011b2:	69fb      	ldr	r3, [r7, #28]
 80011b4:	3301      	adds	r3, #1
 80011b6:	61fb      	str	r3, [r7, #28]
 80011b8:	69fb      	ldr	r3, [r7, #28]
 80011ba:	2b0f      	cmp	r3, #15
 80011bc:	f67f ae90 	bls.w	8000ee0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80011c0:	bf00      	nop
 80011c2:	bf00      	nop
 80011c4:	3724      	adds	r7, #36	@ 0x24
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bc80      	pop	{r7}
 80011ca:	4770      	bx	lr
 80011cc:	40023800 	.word	0x40023800
 80011d0:	40013800 	.word	0x40013800
 80011d4:	40020000 	.word	0x40020000
 80011d8:	40020400 	.word	0x40020400
 80011dc:	40020800 	.word	0x40020800
 80011e0:	40020c00 	.word	0x40020c00
 80011e4:	40021000 	.word	0x40021000
 80011e8:	40021400 	.word	0x40021400
 80011ec:	40021800 	.word	0x40021800
 80011f0:	40021c00 	.word	0x40021c00
 80011f4:	40013c00 	.word	0x40013c00

080011f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b083      	sub	sp, #12
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
 8001200:	460b      	mov	r3, r1
 8001202:	807b      	strh	r3, [r7, #2]
 8001204:	4613      	mov	r3, r2
 8001206:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001208:	787b      	ldrb	r3, [r7, #1]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d003      	beq.n	8001216 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800120e:	887a      	ldrh	r2, [r7, #2]
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001214:	e003      	b.n	800121e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001216:	887b      	ldrh	r3, [r7, #2]
 8001218:	041a      	lsls	r2, r3, #16
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	619a      	str	r2, [r3, #24]
}
 800121e:	bf00      	nop
 8001220:	370c      	adds	r7, #12
 8001222:	46bd      	mov	sp, r7
 8001224:	bc80      	pop	{r7}
 8001226:	4770      	bx	lr

08001228 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b086      	sub	sp, #24
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d101      	bne.n	800123a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001236:	2301      	movs	r3, #1
 8001238:	e267      	b.n	800170a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f003 0301 	and.w	r3, r3, #1
 8001242:	2b00      	cmp	r3, #0
 8001244:	d075      	beq.n	8001332 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001246:	4b88      	ldr	r3, [pc, #544]	@ (8001468 <HAL_RCC_OscConfig+0x240>)
 8001248:	689b      	ldr	r3, [r3, #8]
 800124a:	f003 030c 	and.w	r3, r3, #12
 800124e:	2b04      	cmp	r3, #4
 8001250:	d00c      	beq.n	800126c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001252:	4b85      	ldr	r3, [pc, #532]	@ (8001468 <HAL_RCC_OscConfig+0x240>)
 8001254:	689b      	ldr	r3, [r3, #8]
 8001256:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800125a:	2b08      	cmp	r3, #8
 800125c:	d112      	bne.n	8001284 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800125e:	4b82      	ldr	r3, [pc, #520]	@ (8001468 <HAL_RCC_OscConfig+0x240>)
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001266:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800126a:	d10b      	bne.n	8001284 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800126c:	4b7e      	ldr	r3, [pc, #504]	@ (8001468 <HAL_RCC_OscConfig+0x240>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001274:	2b00      	cmp	r3, #0
 8001276:	d05b      	beq.n	8001330 <HAL_RCC_OscConfig+0x108>
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	2b00      	cmp	r3, #0
 800127e:	d157      	bne.n	8001330 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001280:	2301      	movs	r3, #1
 8001282:	e242      	b.n	800170a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800128c:	d106      	bne.n	800129c <HAL_RCC_OscConfig+0x74>
 800128e:	4b76      	ldr	r3, [pc, #472]	@ (8001468 <HAL_RCC_OscConfig+0x240>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4a75      	ldr	r2, [pc, #468]	@ (8001468 <HAL_RCC_OscConfig+0x240>)
 8001294:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001298:	6013      	str	r3, [r2, #0]
 800129a:	e01d      	b.n	80012d8 <HAL_RCC_OscConfig+0xb0>
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80012a4:	d10c      	bne.n	80012c0 <HAL_RCC_OscConfig+0x98>
 80012a6:	4b70      	ldr	r3, [pc, #448]	@ (8001468 <HAL_RCC_OscConfig+0x240>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4a6f      	ldr	r2, [pc, #444]	@ (8001468 <HAL_RCC_OscConfig+0x240>)
 80012ac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80012b0:	6013      	str	r3, [r2, #0]
 80012b2:	4b6d      	ldr	r3, [pc, #436]	@ (8001468 <HAL_RCC_OscConfig+0x240>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	4a6c      	ldr	r2, [pc, #432]	@ (8001468 <HAL_RCC_OscConfig+0x240>)
 80012b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80012bc:	6013      	str	r3, [r2, #0]
 80012be:	e00b      	b.n	80012d8 <HAL_RCC_OscConfig+0xb0>
 80012c0:	4b69      	ldr	r3, [pc, #420]	@ (8001468 <HAL_RCC_OscConfig+0x240>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4a68      	ldr	r2, [pc, #416]	@ (8001468 <HAL_RCC_OscConfig+0x240>)
 80012c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80012ca:	6013      	str	r3, [r2, #0]
 80012cc:	4b66      	ldr	r3, [pc, #408]	@ (8001468 <HAL_RCC_OscConfig+0x240>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a65      	ldr	r2, [pc, #404]	@ (8001468 <HAL_RCC_OscConfig+0x240>)
 80012d2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80012d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d013      	beq.n	8001308 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012e0:	f7ff fcde 	bl	8000ca0 <HAL_GetTick>
 80012e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012e6:	e008      	b.n	80012fa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012e8:	f7ff fcda 	bl	8000ca0 <HAL_GetTick>
 80012ec:	4602      	mov	r2, r0
 80012ee:	693b      	ldr	r3, [r7, #16]
 80012f0:	1ad3      	subs	r3, r2, r3
 80012f2:	2b64      	cmp	r3, #100	@ 0x64
 80012f4:	d901      	bls.n	80012fa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80012f6:	2303      	movs	r3, #3
 80012f8:	e207      	b.n	800170a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012fa:	4b5b      	ldr	r3, [pc, #364]	@ (8001468 <HAL_RCC_OscConfig+0x240>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001302:	2b00      	cmp	r3, #0
 8001304:	d0f0      	beq.n	80012e8 <HAL_RCC_OscConfig+0xc0>
 8001306:	e014      	b.n	8001332 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001308:	f7ff fcca 	bl	8000ca0 <HAL_GetTick>
 800130c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800130e:	e008      	b.n	8001322 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001310:	f7ff fcc6 	bl	8000ca0 <HAL_GetTick>
 8001314:	4602      	mov	r2, r0
 8001316:	693b      	ldr	r3, [r7, #16]
 8001318:	1ad3      	subs	r3, r2, r3
 800131a:	2b64      	cmp	r3, #100	@ 0x64
 800131c:	d901      	bls.n	8001322 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800131e:	2303      	movs	r3, #3
 8001320:	e1f3      	b.n	800170a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001322:	4b51      	ldr	r3, [pc, #324]	@ (8001468 <HAL_RCC_OscConfig+0x240>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800132a:	2b00      	cmp	r3, #0
 800132c:	d1f0      	bne.n	8001310 <HAL_RCC_OscConfig+0xe8>
 800132e:	e000      	b.n	8001332 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001330:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f003 0302 	and.w	r3, r3, #2
 800133a:	2b00      	cmp	r3, #0
 800133c:	d063      	beq.n	8001406 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800133e:	4b4a      	ldr	r3, [pc, #296]	@ (8001468 <HAL_RCC_OscConfig+0x240>)
 8001340:	689b      	ldr	r3, [r3, #8]
 8001342:	f003 030c 	and.w	r3, r3, #12
 8001346:	2b00      	cmp	r3, #0
 8001348:	d00b      	beq.n	8001362 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800134a:	4b47      	ldr	r3, [pc, #284]	@ (8001468 <HAL_RCC_OscConfig+0x240>)
 800134c:	689b      	ldr	r3, [r3, #8]
 800134e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001352:	2b08      	cmp	r3, #8
 8001354:	d11c      	bne.n	8001390 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001356:	4b44      	ldr	r3, [pc, #272]	@ (8001468 <HAL_RCC_OscConfig+0x240>)
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800135e:	2b00      	cmp	r3, #0
 8001360:	d116      	bne.n	8001390 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001362:	4b41      	ldr	r3, [pc, #260]	@ (8001468 <HAL_RCC_OscConfig+0x240>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f003 0302 	and.w	r3, r3, #2
 800136a:	2b00      	cmp	r3, #0
 800136c:	d005      	beq.n	800137a <HAL_RCC_OscConfig+0x152>
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	68db      	ldr	r3, [r3, #12]
 8001372:	2b01      	cmp	r3, #1
 8001374:	d001      	beq.n	800137a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001376:	2301      	movs	r3, #1
 8001378:	e1c7      	b.n	800170a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800137a:	4b3b      	ldr	r3, [pc, #236]	@ (8001468 <HAL_RCC_OscConfig+0x240>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	691b      	ldr	r3, [r3, #16]
 8001386:	00db      	lsls	r3, r3, #3
 8001388:	4937      	ldr	r1, [pc, #220]	@ (8001468 <HAL_RCC_OscConfig+0x240>)
 800138a:	4313      	orrs	r3, r2
 800138c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800138e:	e03a      	b.n	8001406 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	68db      	ldr	r3, [r3, #12]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d020      	beq.n	80013da <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001398:	4b34      	ldr	r3, [pc, #208]	@ (800146c <HAL_RCC_OscConfig+0x244>)
 800139a:	2201      	movs	r2, #1
 800139c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800139e:	f7ff fc7f 	bl	8000ca0 <HAL_GetTick>
 80013a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013a4:	e008      	b.n	80013b8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013a6:	f7ff fc7b 	bl	8000ca0 <HAL_GetTick>
 80013aa:	4602      	mov	r2, r0
 80013ac:	693b      	ldr	r3, [r7, #16]
 80013ae:	1ad3      	subs	r3, r2, r3
 80013b0:	2b02      	cmp	r3, #2
 80013b2:	d901      	bls.n	80013b8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80013b4:	2303      	movs	r3, #3
 80013b6:	e1a8      	b.n	800170a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013b8:	4b2b      	ldr	r3, [pc, #172]	@ (8001468 <HAL_RCC_OscConfig+0x240>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f003 0302 	and.w	r3, r3, #2
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d0f0      	beq.n	80013a6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013c4:	4b28      	ldr	r3, [pc, #160]	@ (8001468 <HAL_RCC_OscConfig+0x240>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	691b      	ldr	r3, [r3, #16]
 80013d0:	00db      	lsls	r3, r3, #3
 80013d2:	4925      	ldr	r1, [pc, #148]	@ (8001468 <HAL_RCC_OscConfig+0x240>)
 80013d4:	4313      	orrs	r3, r2
 80013d6:	600b      	str	r3, [r1, #0]
 80013d8:	e015      	b.n	8001406 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013da:	4b24      	ldr	r3, [pc, #144]	@ (800146c <HAL_RCC_OscConfig+0x244>)
 80013dc:	2200      	movs	r2, #0
 80013de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013e0:	f7ff fc5e 	bl	8000ca0 <HAL_GetTick>
 80013e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013e6:	e008      	b.n	80013fa <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013e8:	f7ff fc5a 	bl	8000ca0 <HAL_GetTick>
 80013ec:	4602      	mov	r2, r0
 80013ee:	693b      	ldr	r3, [r7, #16]
 80013f0:	1ad3      	subs	r3, r2, r3
 80013f2:	2b02      	cmp	r3, #2
 80013f4:	d901      	bls.n	80013fa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80013f6:	2303      	movs	r3, #3
 80013f8:	e187      	b.n	800170a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013fa:	4b1b      	ldr	r3, [pc, #108]	@ (8001468 <HAL_RCC_OscConfig+0x240>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f003 0302 	and.w	r3, r3, #2
 8001402:	2b00      	cmp	r3, #0
 8001404:	d1f0      	bne.n	80013e8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f003 0308 	and.w	r3, r3, #8
 800140e:	2b00      	cmp	r3, #0
 8001410:	d036      	beq.n	8001480 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	695b      	ldr	r3, [r3, #20]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d016      	beq.n	8001448 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800141a:	4b15      	ldr	r3, [pc, #84]	@ (8001470 <HAL_RCC_OscConfig+0x248>)
 800141c:	2201      	movs	r2, #1
 800141e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001420:	f7ff fc3e 	bl	8000ca0 <HAL_GetTick>
 8001424:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001426:	e008      	b.n	800143a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001428:	f7ff fc3a 	bl	8000ca0 <HAL_GetTick>
 800142c:	4602      	mov	r2, r0
 800142e:	693b      	ldr	r3, [r7, #16]
 8001430:	1ad3      	subs	r3, r2, r3
 8001432:	2b02      	cmp	r3, #2
 8001434:	d901      	bls.n	800143a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001436:	2303      	movs	r3, #3
 8001438:	e167      	b.n	800170a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800143a:	4b0b      	ldr	r3, [pc, #44]	@ (8001468 <HAL_RCC_OscConfig+0x240>)
 800143c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800143e:	f003 0302 	and.w	r3, r3, #2
 8001442:	2b00      	cmp	r3, #0
 8001444:	d0f0      	beq.n	8001428 <HAL_RCC_OscConfig+0x200>
 8001446:	e01b      	b.n	8001480 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001448:	4b09      	ldr	r3, [pc, #36]	@ (8001470 <HAL_RCC_OscConfig+0x248>)
 800144a:	2200      	movs	r2, #0
 800144c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800144e:	f7ff fc27 	bl	8000ca0 <HAL_GetTick>
 8001452:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001454:	e00e      	b.n	8001474 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001456:	f7ff fc23 	bl	8000ca0 <HAL_GetTick>
 800145a:	4602      	mov	r2, r0
 800145c:	693b      	ldr	r3, [r7, #16]
 800145e:	1ad3      	subs	r3, r2, r3
 8001460:	2b02      	cmp	r3, #2
 8001462:	d907      	bls.n	8001474 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001464:	2303      	movs	r3, #3
 8001466:	e150      	b.n	800170a <HAL_RCC_OscConfig+0x4e2>
 8001468:	40023800 	.word	0x40023800
 800146c:	42470000 	.word	0x42470000
 8001470:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001474:	4b88      	ldr	r3, [pc, #544]	@ (8001698 <HAL_RCC_OscConfig+0x470>)
 8001476:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001478:	f003 0302 	and.w	r3, r3, #2
 800147c:	2b00      	cmp	r3, #0
 800147e:	d1ea      	bne.n	8001456 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f003 0304 	and.w	r3, r3, #4
 8001488:	2b00      	cmp	r3, #0
 800148a:	f000 8097 	beq.w	80015bc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800148e:	2300      	movs	r3, #0
 8001490:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001492:	4b81      	ldr	r3, [pc, #516]	@ (8001698 <HAL_RCC_OscConfig+0x470>)
 8001494:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001496:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800149a:	2b00      	cmp	r3, #0
 800149c:	d10f      	bne.n	80014be <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800149e:	2300      	movs	r3, #0
 80014a0:	60bb      	str	r3, [r7, #8]
 80014a2:	4b7d      	ldr	r3, [pc, #500]	@ (8001698 <HAL_RCC_OscConfig+0x470>)
 80014a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014a6:	4a7c      	ldr	r2, [pc, #496]	@ (8001698 <HAL_RCC_OscConfig+0x470>)
 80014a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80014ae:	4b7a      	ldr	r3, [pc, #488]	@ (8001698 <HAL_RCC_OscConfig+0x470>)
 80014b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014b6:	60bb      	str	r3, [r7, #8]
 80014b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014ba:	2301      	movs	r3, #1
 80014bc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014be:	4b77      	ldr	r3, [pc, #476]	@ (800169c <HAL_RCC_OscConfig+0x474>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d118      	bne.n	80014fc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014ca:	4b74      	ldr	r3, [pc, #464]	@ (800169c <HAL_RCC_OscConfig+0x474>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	4a73      	ldr	r2, [pc, #460]	@ (800169c <HAL_RCC_OscConfig+0x474>)
 80014d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80014d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014d6:	f7ff fbe3 	bl	8000ca0 <HAL_GetTick>
 80014da:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014dc:	e008      	b.n	80014f0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014de:	f7ff fbdf 	bl	8000ca0 <HAL_GetTick>
 80014e2:	4602      	mov	r2, r0
 80014e4:	693b      	ldr	r3, [r7, #16]
 80014e6:	1ad3      	subs	r3, r2, r3
 80014e8:	2b02      	cmp	r3, #2
 80014ea:	d901      	bls.n	80014f0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80014ec:	2303      	movs	r3, #3
 80014ee:	e10c      	b.n	800170a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014f0:	4b6a      	ldr	r3, [pc, #424]	@ (800169c <HAL_RCC_OscConfig+0x474>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d0f0      	beq.n	80014de <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	689b      	ldr	r3, [r3, #8]
 8001500:	2b01      	cmp	r3, #1
 8001502:	d106      	bne.n	8001512 <HAL_RCC_OscConfig+0x2ea>
 8001504:	4b64      	ldr	r3, [pc, #400]	@ (8001698 <HAL_RCC_OscConfig+0x470>)
 8001506:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001508:	4a63      	ldr	r2, [pc, #396]	@ (8001698 <HAL_RCC_OscConfig+0x470>)
 800150a:	f043 0301 	orr.w	r3, r3, #1
 800150e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001510:	e01c      	b.n	800154c <HAL_RCC_OscConfig+0x324>
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	689b      	ldr	r3, [r3, #8]
 8001516:	2b05      	cmp	r3, #5
 8001518:	d10c      	bne.n	8001534 <HAL_RCC_OscConfig+0x30c>
 800151a:	4b5f      	ldr	r3, [pc, #380]	@ (8001698 <HAL_RCC_OscConfig+0x470>)
 800151c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800151e:	4a5e      	ldr	r2, [pc, #376]	@ (8001698 <HAL_RCC_OscConfig+0x470>)
 8001520:	f043 0304 	orr.w	r3, r3, #4
 8001524:	6713      	str	r3, [r2, #112]	@ 0x70
 8001526:	4b5c      	ldr	r3, [pc, #368]	@ (8001698 <HAL_RCC_OscConfig+0x470>)
 8001528:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800152a:	4a5b      	ldr	r2, [pc, #364]	@ (8001698 <HAL_RCC_OscConfig+0x470>)
 800152c:	f043 0301 	orr.w	r3, r3, #1
 8001530:	6713      	str	r3, [r2, #112]	@ 0x70
 8001532:	e00b      	b.n	800154c <HAL_RCC_OscConfig+0x324>
 8001534:	4b58      	ldr	r3, [pc, #352]	@ (8001698 <HAL_RCC_OscConfig+0x470>)
 8001536:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001538:	4a57      	ldr	r2, [pc, #348]	@ (8001698 <HAL_RCC_OscConfig+0x470>)
 800153a:	f023 0301 	bic.w	r3, r3, #1
 800153e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001540:	4b55      	ldr	r3, [pc, #340]	@ (8001698 <HAL_RCC_OscConfig+0x470>)
 8001542:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001544:	4a54      	ldr	r2, [pc, #336]	@ (8001698 <HAL_RCC_OscConfig+0x470>)
 8001546:	f023 0304 	bic.w	r3, r3, #4
 800154a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	689b      	ldr	r3, [r3, #8]
 8001550:	2b00      	cmp	r3, #0
 8001552:	d015      	beq.n	8001580 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001554:	f7ff fba4 	bl	8000ca0 <HAL_GetTick>
 8001558:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800155a:	e00a      	b.n	8001572 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800155c:	f7ff fba0 	bl	8000ca0 <HAL_GetTick>
 8001560:	4602      	mov	r2, r0
 8001562:	693b      	ldr	r3, [r7, #16]
 8001564:	1ad3      	subs	r3, r2, r3
 8001566:	f241 3288 	movw	r2, #5000	@ 0x1388
 800156a:	4293      	cmp	r3, r2
 800156c:	d901      	bls.n	8001572 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800156e:	2303      	movs	r3, #3
 8001570:	e0cb      	b.n	800170a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001572:	4b49      	ldr	r3, [pc, #292]	@ (8001698 <HAL_RCC_OscConfig+0x470>)
 8001574:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001576:	f003 0302 	and.w	r3, r3, #2
 800157a:	2b00      	cmp	r3, #0
 800157c:	d0ee      	beq.n	800155c <HAL_RCC_OscConfig+0x334>
 800157e:	e014      	b.n	80015aa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001580:	f7ff fb8e 	bl	8000ca0 <HAL_GetTick>
 8001584:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001586:	e00a      	b.n	800159e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001588:	f7ff fb8a 	bl	8000ca0 <HAL_GetTick>
 800158c:	4602      	mov	r2, r0
 800158e:	693b      	ldr	r3, [r7, #16]
 8001590:	1ad3      	subs	r3, r2, r3
 8001592:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001596:	4293      	cmp	r3, r2
 8001598:	d901      	bls.n	800159e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800159a:	2303      	movs	r3, #3
 800159c:	e0b5      	b.n	800170a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800159e:	4b3e      	ldr	r3, [pc, #248]	@ (8001698 <HAL_RCC_OscConfig+0x470>)
 80015a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015a2:	f003 0302 	and.w	r3, r3, #2
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d1ee      	bne.n	8001588 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80015aa:	7dfb      	ldrb	r3, [r7, #23]
 80015ac:	2b01      	cmp	r3, #1
 80015ae:	d105      	bne.n	80015bc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015b0:	4b39      	ldr	r3, [pc, #228]	@ (8001698 <HAL_RCC_OscConfig+0x470>)
 80015b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015b4:	4a38      	ldr	r2, [pc, #224]	@ (8001698 <HAL_RCC_OscConfig+0x470>)
 80015b6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80015ba:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	699b      	ldr	r3, [r3, #24]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	f000 80a1 	beq.w	8001708 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80015c6:	4b34      	ldr	r3, [pc, #208]	@ (8001698 <HAL_RCC_OscConfig+0x470>)
 80015c8:	689b      	ldr	r3, [r3, #8]
 80015ca:	f003 030c 	and.w	r3, r3, #12
 80015ce:	2b08      	cmp	r3, #8
 80015d0:	d05c      	beq.n	800168c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	699b      	ldr	r3, [r3, #24]
 80015d6:	2b02      	cmp	r3, #2
 80015d8:	d141      	bne.n	800165e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015da:	4b31      	ldr	r3, [pc, #196]	@ (80016a0 <HAL_RCC_OscConfig+0x478>)
 80015dc:	2200      	movs	r2, #0
 80015de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015e0:	f7ff fb5e 	bl	8000ca0 <HAL_GetTick>
 80015e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015e6:	e008      	b.n	80015fa <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015e8:	f7ff fb5a 	bl	8000ca0 <HAL_GetTick>
 80015ec:	4602      	mov	r2, r0
 80015ee:	693b      	ldr	r3, [r7, #16]
 80015f0:	1ad3      	subs	r3, r2, r3
 80015f2:	2b02      	cmp	r3, #2
 80015f4:	d901      	bls.n	80015fa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80015f6:	2303      	movs	r3, #3
 80015f8:	e087      	b.n	800170a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015fa:	4b27      	ldr	r3, [pc, #156]	@ (8001698 <HAL_RCC_OscConfig+0x470>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001602:	2b00      	cmp	r3, #0
 8001604:	d1f0      	bne.n	80015e8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	69da      	ldr	r2, [r3, #28]
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6a1b      	ldr	r3, [r3, #32]
 800160e:	431a      	orrs	r2, r3
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001614:	019b      	lsls	r3, r3, #6
 8001616:	431a      	orrs	r2, r3
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800161c:	085b      	lsrs	r3, r3, #1
 800161e:	3b01      	subs	r3, #1
 8001620:	041b      	lsls	r3, r3, #16
 8001622:	431a      	orrs	r2, r3
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001628:	061b      	lsls	r3, r3, #24
 800162a:	491b      	ldr	r1, [pc, #108]	@ (8001698 <HAL_RCC_OscConfig+0x470>)
 800162c:	4313      	orrs	r3, r2
 800162e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001630:	4b1b      	ldr	r3, [pc, #108]	@ (80016a0 <HAL_RCC_OscConfig+0x478>)
 8001632:	2201      	movs	r2, #1
 8001634:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001636:	f7ff fb33 	bl	8000ca0 <HAL_GetTick>
 800163a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800163c:	e008      	b.n	8001650 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800163e:	f7ff fb2f 	bl	8000ca0 <HAL_GetTick>
 8001642:	4602      	mov	r2, r0
 8001644:	693b      	ldr	r3, [r7, #16]
 8001646:	1ad3      	subs	r3, r2, r3
 8001648:	2b02      	cmp	r3, #2
 800164a:	d901      	bls.n	8001650 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800164c:	2303      	movs	r3, #3
 800164e:	e05c      	b.n	800170a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001650:	4b11      	ldr	r3, [pc, #68]	@ (8001698 <HAL_RCC_OscConfig+0x470>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001658:	2b00      	cmp	r3, #0
 800165a:	d0f0      	beq.n	800163e <HAL_RCC_OscConfig+0x416>
 800165c:	e054      	b.n	8001708 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800165e:	4b10      	ldr	r3, [pc, #64]	@ (80016a0 <HAL_RCC_OscConfig+0x478>)
 8001660:	2200      	movs	r2, #0
 8001662:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001664:	f7ff fb1c 	bl	8000ca0 <HAL_GetTick>
 8001668:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800166a:	e008      	b.n	800167e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800166c:	f7ff fb18 	bl	8000ca0 <HAL_GetTick>
 8001670:	4602      	mov	r2, r0
 8001672:	693b      	ldr	r3, [r7, #16]
 8001674:	1ad3      	subs	r3, r2, r3
 8001676:	2b02      	cmp	r3, #2
 8001678:	d901      	bls.n	800167e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800167a:	2303      	movs	r3, #3
 800167c:	e045      	b.n	800170a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800167e:	4b06      	ldr	r3, [pc, #24]	@ (8001698 <HAL_RCC_OscConfig+0x470>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001686:	2b00      	cmp	r3, #0
 8001688:	d1f0      	bne.n	800166c <HAL_RCC_OscConfig+0x444>
 800168a:	e03d      	b.n	8001708 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	699b      	ldr	r3, [r3, #24]
 8001690:	2b01      	cmp	r3, #1
 8001692:	d107      	bne.n	80016a4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001694:	2301      	movs	r3, #1
 8001696:	e038      	b.n	800170a <HAL_RCC_OscConfig+0x4e2>
 8001698:	40023800 	.word	0x40023800
 800169c:	40007000 	.word	0x40007000
 80016a0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80016a4:	4b1b      	ldr	r3, [pc, #108]	@ (8001714 <HAL_RCC_OscConfig+0x4ec>)
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	699b      	ldr	r3, [r3, #24]
 80016ae:	2b01      	cmp	r3, #1
 80016b0:	d028      	beq.n	8001704 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016bc:	429a      	cmp	r2, r3
 80016be:	d121      	bne.n	8001704 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016ca:	429a      	cmp	r2, r3
 80016cc:	d11a      	bne.n	8001704 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80016ce:	68fa      	ldr	r2, [r7, #12]
 80016d0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80016d4:	4013      	ands	r3, r2
 80016d6:	687a      	ldr	r2, [r7, #4]
 80016d8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80016da:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80016dc:	4293      	cmp	r3, r2
 80016de:	d111      	bne.n	8001704 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016ea:	085b      	lsrs	r3, r3, #1
 80016ec:	3b01      	subs	r3, #1
 80016ee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80016f0:	429a      	cmp	r2, r3
 80016f2:	d107      	bne.n	8001704 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016fe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001700:	429a      	cmp	r2, r3
 8001702:	d001      	beq.n	8001708 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001704:	2301      	movs	r3, #1
 8001706:	e000      	b.n	800170a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001708:	2300      	movs	r3, #0
}
 800170a:	4618      	mov	r0, r3
 800170c:	3718      	adds	r7, #24
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	40023800 	.word	0x40023800

08001718 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b084      	sub	sp, #16
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
 8001720:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d101      	bne.n	800172c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001728:	2301      	movs	r3, #1
 800172a:	e0cc      	b.n	80018c6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800172c:	4b68      	ldr	r3, [pc, #416]	@ (80018d0 <HAL_RCC_ClockConfig+0x1b8>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f003 0307 	and.w	r3, r3, #7
 8001734:	683a      	ldr	r2, [r7, #0]
 8001736:	429a      	cmp	r2, r3
 8001738:	d90c      	bls.n	8001754 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800173a:	4b65      	ldr	r3, [pc, #404]	@ (80018d0 <HAL_RCC_ClockConfig+0x1b8>)
 800173c:	683a      	ldr	r2, [r7, #0]
 800173e:	b2d2      	uxtb	r2, r2
 8001740:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001742:	4b63      	ldr	r3, [pc, #396]	@ (80018d0 <HAL_RCC_ClockConfig+0x1b8>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f003 0307 	and.w	r3, r3, #7
 800174a:	683a      	ldr	r2, [r7, #0]
 800174c:	429a      	cmp	r2, r3
 800174e:	d001      	beq.n	8001754 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001750:	2301      	movs	r3, #1
 8001752:	e0b8      	b.n	80018c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f003 0302 	and.w	r3, r3, #2
 800175c:	2b00      	cmp	r3, #0
 800175e:	d020      	beq.n	80017a2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f003 0304 	and.w	r3, r3, #4
 8001768:	2b00      	cmp	r3, #0
 800176a:	d005      	beq.n	8001778 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800176c:	4b59      	ldr	r3, [pc, #356]	@ (80018d4 <HAL_RCC_ClockConfig+0x1bc>)
 800176e:	689b      	ldr	r3, [r3, #8]
 8001770:	4a58      	ldr	r2, [pc, #352]	@ (80018d4 <HAL_RCC_ClockConfig+0x1bc>)
 8001772:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001776:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f003 0308 	and.w	r3, r3, #8
 8001780:	2b00      	cmp	r3, #0
 8001782:	d005      	beq.n	8001790 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001784:	4b53      	ldr	r3, [pc, #332]	@ (80018d4 <HAL_RCC_ClockConfig+0x1bc>)
 8001786:	689b      	ldr	r3, [r3, #8]
 8001788:	4a52      	ldr	r2, [pc, #328]	@ (80018d4 <HAL_RCC_ClockConfig+0x1bc>)
 800178a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800178e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001790:	4b50      	ldr	r3, [pc, #320]	@ (80018d4 <HAL_RCC_ClockConfig+0x1bc>)
 8001792:	689b      	ldr	r3, [r3, #8]
 8001794:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	689b      	ldr	r3, [r3, #8]
 800179c:	494d      	ldr	r1, [pc, #308]	@ (80018d4 <HAL_RCC_ClockConfig+0x1bc>)
 800179e:	4313      	orrs	r3, r2
 80017a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f003 0301 	and.w	r3, r3, #1
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d044      	beq.n	8001838 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	2b01      	cmp	r3, #1
 80017b4:	d107      	bne.n	80017c6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017b6:	4b47      	ldr	r3, [pc, #284]	@ (80018d4 <HAL_RCC_ClockConfig+0x1bc>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d119      	bne.n	80017f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017c2:	2301      	movs	r3, #1
 80017c4:	e07f      	b.n	80018c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	2b02      	cmp	r3, #2
 80017cc:	d003      	beq.n	80017d6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017d2:	2b03      	cmp	r3, #3
 80017d4:	d107      	bne.n	80017e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017d6:	4b3f      	ldr	r3, [pc, #252]	@ (80018d4 <HAL_RCC_ClockConfig+0x1bc>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d109      	bne.n	80017f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017e2:	2301      	movs	r3, #1
 80017e4:	e06f      	b.n	80018c6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017e6:	4b3b      	ldr	r3, [pc, #236]	@ (80018d4 <HAL_RCC_ClockConfig+0x1bc>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f003 0302 	and.w	r3, r3, #2
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d101      	bne.n	80017f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017f2:	2301      	movs	r3, #1
 80017f4:	e067      	b.n	80018c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017f6:	4b37      	ldr	r3, [pc, #220]	@ (80018d4 <HAL_RCC_ClockConfig+0x1bc>)
 80017f8:	689b      	ldr	r3, [r3, #8]
 80017fa:	f023 0203 	bic.w	r2, r3, #3
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	4934      	ldr	r1, [pc, #208]	@ (80018d4 <HAL_RCC_ClockConfig+0x1bc>)
 8001804:	4313      	orrs	r3, r2
 8001806:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001808:	f7ff fa4a 	bl	8000ca0 <HAL_GetTick>
 800180c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800180e:	e00a      	b.n	8001826 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001810:	f7ff fa46 	bl	8000ca0 <HAL_GetTick>
 8001814:	4602      	mov	r2, r0
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	1ad3      	subs	r3, r2, r3
 800181a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800181e:	4293      	cmp	r3, r2
 8001820:	d901      	bls.n	8001826 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001822:	2303      	movs	r3, #3
 8001824:	e04f      	b.n	80018c6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001826:	4b2b      	ldr	r3, [pc, #172]	@ (80018d4 <HAL_RCC_ClockConfig+0x1bc>)
 8001828:	689b      	ldr	r3, [r3, #8]
 800182a:	f003 020c 	and.w	r2, r3, #12
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	009b      	lsls	r3, r3, #2
 8001834:	429a      	cmp	r2, r3
 8001836:	d1eb      	bne.n	8001810 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001838:	4b25      	ldr	r3, [pc, #148]	@ (80018d0 <HAL_RCC_ClockConfig+0x1b8>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f003 0307 	and.w	r3, r3, #7
 8001840:	683a      	ldr	r2, [r7, #0]
 8001842:	429a      	cmp	r2, r3
 8001844:	d20c      	bcs.n	8001860 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001846:	4b22      	ldr	r3, [pc, #136]	@ (80018d0 <HAL_RCC_ClockConfig+0x1b8>)
 8001848:	683a      	ldr	r2, [r7, #0]
 800184a:	b2d2      	uxtb	r2, r2
 800184c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800184e:	4b20      	ldr	r3, [pc, #128]	@ (80018d0 <HAL_RCC_ClockConfig+0x1b8>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f003 0307 	and.w	r3, r3, #7
 8001856:	683a      	ldr	r2, [r7, #0]
 8001858:	429a      	cmp	r2, r3
 800185a:	d001      	beq.n	8001860 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800185c:	2301      	movs	r3, #1
 800185e:	e032      	b.n	80018c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f003 0304 	and.w	r3, r3, #4
 8001868:	2b00      	cmp	r3, #0
 800186a:	d008      	beq.n	800187e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800186c:	4b19      	ldr	r3, [pc, #100]	@ (80018d4 <HAL_RCC_ClockConfig+0x1bc>)
 800186e:	689b      	ldr	r3, [r3, #8]
 8001870:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	68db      	ldr	r3, [r3, #12]
 8001878:	4916      	ldr	r1, [pc, #88]	@ (80018d4 <HAL_RCC_ClockConfig+0x1bc>)
 800187a:	4313      	orrs	r3, r2
 800187c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f003 0308 	and.w	r3, r3, #8
 8001886:	2b00      	cmp	r3, #0
 8001888:	d009      	beq.n	800189e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800188a:	4b12      	ldr	r3, [pc, #72]	@ (80018d4 <HAL_RCC_ClockConfig+0x1bc>)
 800188c:	689b      	ldr	r3, [r3, #8]
 800188e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	691b      	ldr	r3, [r3, #16]
 8001896:	00db      	lsls	r3, r3, #3
 8001898:	490e      	ldr	r1, [pc, #56]	@ (80018d4 <HAL_RCC_ClockConfig+0x1bc>)
 800189a:	4313      	orrs	r3, r2
 800189c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800189e:	f000 f821 	bl	80018e4 <HAL_RCC_GetSysClockFreq>
 80018a2:	4602      	mov	r2, r0
 80018a4:	4b0b      	ldr	r3, [pc, #44]	@ (80018d4 <HAL_RCC_ClockConfig+0x1bc>)
 80018a6:	689b      	ldr	r3, [r3, #8]
 80018a8:	091b      	lsrs	r3, r3, #4
 80018aa:	f003 030f 	and.w	r3, r3, #15
 80018ae:	490a      	ldr	r1, [pc, #40]	@ (80018d8 <HAL_RCC_ClockConfig+0x1c0>)
 80018b0:	5ccb      	ldrb	r3, [r1, r3]
 80018b2:	fa22 f303 	lsr.w	r3, r2, r3
 80018b6:	4a09      	ldr	r2, [pc, #36]	@ (80018dc <HAL_RCC_ClockConfig+0x1c4>)
 80018b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80018ba:	4b09      	ldr	r3, [pc, #36]	@ (80018e0 <HAL_RCC_ClockConfig+0x1c8>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4618      	mov	r0, r3
 80018c0:	f7ff f9ac 	bl	8000c1c <HAL_InitTick>

  return HAL_OK;
 80018c4:	2300      	movs	r3, #0
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	3710      	adds	r7, #16
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	40023c00 	.word	0x40023c00
 80018d4:	40023800 	.word	0x40023800
 80018d8:	08003894 	.word	0x08003894
 80018dc:	20000000 	.word	0x20000000
 80018e0:	20000004 	.word	0x20000004

080018e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80018e8:	b094      	sub	sp, #80	@ 0x50
 80018ea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80018ec:	2300      	movs	r3, #0
 80018ee:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80018f0:	2300      	movs	r3, #0
 80018f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80018f4:	2300      	movs	r3, #0
 80018f6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80018f8:	2300      	movs	r3, #0
 80018fa:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80018fc:	4b7c      	ldr	r3, [pc, #496]	@ (8001af0 <HAL_RCC_GetSysClockFreq+0x20c>)
 80018fe:	689b      	ldr	r3, [r3, #8]
 8001900:	f003 030c 	and.w	r3, r3, #12
 8001904:	2b08      	cmp	r3, #8
 8001906:	d00d      	beq.n	8001924 <HAL_RCC_GetSysClockFreq+0x40>
 8001908:	2b08      	cmp	r3, #8
 800190a:	f200 80e7 	bhi.w	8001adc <HAL_RCC_GetSysClockFreq+0x1f8>
 800190e:	2b00      	cmp	r3, #0
 8001910:	d002      	beq.n	8001918 <HAL_RCC_GetSysClockFreq+0x34>
 8001912:	2b04      	cmp	r3, #4
 8001914:	d003      	beq.n	800191e <HAL_RCC_GetSysClockFreq+0x3a>
 8001916:	e0e1      	b.n	8001adc <HAL_RCC_GetSysClockFreq+0x1f8>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001918:	4b76      	ldr	r3, [pc, #472]	@ (8001af4 <HAL_RCC_GetSysClockFreq+0x210>)
 800191a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800191c:	e0e1      	b.n	8001ae2 <HAL_RCC_GetSysClockFreq+0x1fe>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800191e:	4b76      	ldr	r3, [pc, #472]	@ (8001af8 <HAL_RCC_GetSysClockFreq+0x214>)
 8001920:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001922:	e0de      	b.n	8001ae2 <HAL_RCC_GetSysClockFreq+0x1fe>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001924:	4b72      	ldr	r3, [pc, #456]	@ (8001af0 <HAL_RCC_GetSysClockFreq+0x20c>)
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800192c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800192e:	4b70      	ldr	r3, [pc, #448]	@ (8001af0 <HAL_RCC_GetSysClockFreq+0x20c>)
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001936:	2b00      	cmp	r3, #0
 8001938:	d065      	beq.n	8001a06 <HAL_RCC_GetSysClockFreq+0x122>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800193a:	4b6d      	ldr	r3, [pc, #436]	@ (8001af0 <HAL_RCC_GetSysClockFreq+0x20c>)
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	099b      	lsrs	r3, r3, #6
 8001940:	2200      	movs	r2, #0
 8001942:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001944:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001946:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001948:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800194c:	633b      	str	r3, [r7, #48]	@ 0x30
 800194e:	2300      	movs	r3, #0
 8001950:	637b      	str	r3, [r7, #52]	@ 0x34
 8001952:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001956:	4622      	mov	r2, r4
 8001958:	462b      	mov	r3, r5
 800195a:	f04f 0000 	mov.w	r0, #0
 800195e:	f04f 0100 	mov.w	r1, #0
 8001962:	0159      	lsls	r1, r3, #5
 8001964:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001968:	0150      	lsls	r0, r2, #5
 800196a:	4602      	mov	r2, r0
 800196c:	460b      	mov	r3, r1
 800196e:	4621      	mov	r1, r4
 8001970:	1a51      	subs	r1, r2, r1
 8001972:	6139      	str	r1, [r7, #16]
 8001974:	4629      	mov	r1, r5
 8001976:	eb63 0301 	sbc.w	r3, r3, r1
 800197a:	617b      	str	r3, [r7, #20]
 800197c:	f04f 0200 	mov.w	r2, #0
 8001980:	f04f 0300 	mov.w	r3, #0
 8001984:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001988:	4659      	mov	r1, fp
 800198a:	018b      	lsls	r3, r1, #6
 800198c:	4651      	mov	r1, sl
 800198e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001992:	4651      	mov	r1, sl
 8001994:	018a      	lsls	r2, r1, #6
 8001996:	46d4      	mov	ip, sl
 8001998:	ebb2 080c 	subs.w	r8, r2, ip
 800199c:	4659      	mov	r1, fp
 800199e:	eb63 0901 	sbc.w	r9, r3, r1
 80019a2:	f04f 0200 	mov.w	r2, #0
 80019a6:	f04f 0300 	mov.w	r3, #0
 80019aa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80019ae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80019b2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80019b6:	4690      	mov	r8, r2
 80019b8:	4699      	mov	r9, r3
 80019ba:	4623      	mov	r3, r4
 80019bc:	eb18 0303 	adds.w	r3, r8, r3
 80019c0:	60bb      	str	r3, [r7, #8]
 80019c2:	462b      	mov	r3, r5
 80019c4:	eb49 0303 	adc.w	r3, r9, r3
 80019c8:	60fb      	str	r3, [r7, #12]
 80019ca:	f04f 0200 	mov.w	r2, #0
 80019ce:	f04f 0300 	mov.w	r3, #0
 80019d2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80019d6:	4629      	mov	r1, r5
 80019d8:	024b      	lsls	r3, r1, #9
 80019da:	4620      	mov	r0, r4
 80019dc:	4629      	mov	r1, r5
 80019de:	4604      	mov	r4, r0
 80019e0:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 80019e4:	4601      	mov	r1, r0
 80019e6:	024a      	lsls	r2, r1, #9
 80019e8:	4610      	mov	r0, r2
 80019ea:	4619      	mov	r1, r3
 80019ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80019ee:	2200      	movs	r2, #0
 80019f0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80019f2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80019f4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80019f8:	f7fe fc3a 	bl	8000270 <__aeabi_uldivmod>
 80019fc:	4602      	mov	r2, r0
 80019fe:	460b      	mov	r3, r1
 8001a00:	4613      	mov	r3, r2
 8001a02:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001a04:	e05c      	b.n	8001ac0 <HAL_RCC_GetSysClockFreq+0x1dc>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a06:	4b3a      	ldr	r3, [pc, #232]	@ (8001af0 <HAL_RCC_GetSysClockFreq+0x20c>)
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	099b      	lsrs	r3, r3, #6
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	4618      	mov	r0, r3
 8001a10:	4611      	mov	r1, r2
 8001a12:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001a16:	623b      	str	r3, [r7, #32]
 8001a18:	2300      	movs	r3, #0
 8001a1a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a1c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001a20:	4642      	mov	r2, r8
 8001a22:	464b      	mov	r3, r9
 8001a24:	f04f 0000 	mov.w	r0, #0
 8001a28:	f04f 0100 	mov.w	r1, #0
 8001a2c:	0159      	lsls	r1, r3, #5
 8001a2e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a32:	0150      	lsls	r0, r2, #5
 8001a34:	4602      	mov	r2, r0
 8001a36:	460b      	mov	r3, r1
 8001a38:	46c4      	mov	ip, r8
 8001a3a:	ebb2 0a0c 	subs.w	sl, r2, ip
 8001a3e:	4640      	mov	r0, r8
 8001a40:	4649      	mov	r1, r9
 8001a42:	468c      	mov	ip, r1
 8001a44:	eb63 0b0c 	sbc.w	fp, r3, ip
 8001a48:	f04f 0200 	mov.w	r2, #0
 8001a4c:	f04f 0300 	mov.w	r3, #0
 8001a50:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001a54:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001a58:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001a5c:	ebb2 040a 	subs.w	r4, r2, sl
 8001a60:	eb63 050b 	sbc.w	r5, r3, fp
 8001a64:	f04f 0200 	mov.w	r2, #0
 8001a68:	f04f 0300 	mov.w	r3, #0
 8001a6c:	00eb      	lsls	r3, r5, #3
 8001a6e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001a72:	00e2      	lsls	r2, r4, #3
 8001a74:	4614      	mov	r4, r2
 8001a76:	461d      	mov	r5, r3
 8001a78:	4603      	mov	r3, r0
 8001a7a:	18e3      	adds	r3, r4, r3
 8001a7c:	603b      	str	r3, [r7, #0]
 8001a7e:	460b      	mov	r3, r1
 8001a80:	eb45 0303 	adc.w	r3, r5, r3
 8001a84:	607b      	str	r3, [r7, #4]
 8001a86:	f04f 0200 	mov.w	r2, #0
 8001a8a:	f04f 0300 	mov.w	r3, #0
 8001a8e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001a92:	4629      	mov	r1, r5
 8001a94:	028b      	lsls	r3, r1, #10
 8001a96:	4620      	mov	r0, r4
 8001a98:	4629      	mov	r1, r5
 8001a9a:	4604      	mov	r4, r0
 8001a9c:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8001aa0:	4601      	mov	r1, r0
 8001aa2:	028a      	lsls	r2, r1, #10
 8001aa4:	4610      	mov	r0, r2
 8001aa6:	4619      	mov	r1, r3
 8001aa8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001aaa:	2200      	movs	r2, #0
 8001aac:	61bb      	str	r3, [r7, #24]
 8001aae:	61fa      	str	r2, [r7, #28]
 8001ab0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001ab4:	f7fe fbdc 	bl	8000270 <__aeabi_uldivmod>
 8001ab8:	4602      	mov	r2, r0
 8001aba:	460b      	mov	r3, r1
 8001abc:	4613      	mov	r3, r2
 8001abe:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001ac0:	4b0b      	ldr	r3, [pc, #44]	@ (8001af0 <HAL_RCC_GetSysClockFreq+0x20c>)
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	0c1b      	lsrs	r3, r3, #16
 8001ac6:	f003 0303 	and.w	r3, r3, #3
 8001aca:	3301      	adds	r3, #1
 8001acc:	005b      	lsls	r3, r3, #1
 8001ace:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001ad0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001ad2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001ad4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ad8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001ada:	e002      	b.n	8001ae2 <HAL_RCC_GetSysClockFreq+0x1fe>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001adc:	4b05      	ldr	r3, [pc, #20]	@ (8001af4 <HAL_RCC_GetSysClockFreq+0x210>)
 8001ade:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001ae0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ae2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	3750      	adds	r7, #80	@ 0x50
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001aee:	bf00      	nop
 8001af0:	40023800 	.word	0x40023800
 8001af4:	00f42400 	.word	0x00f42400
 8001af8:	007a1200 	.word	0x007a1200

08001afc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001afc:	b480      	push	{r7}
 8001afe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b00:	4b02      	ldr	r3, [pc, #8]	@ (8001b0c <HAL_RCC_GetHCLKFreq+0x10>)
 8001b02:	681b      	ldr	r3, [r3, #0]
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bc80      	pop	{r7}
 8001b0a:	4770      	bx	lr
 8001b0c:	20000000 	.word	0x20000000

08001b10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001b14:	f7ff fff2 	bl	8001afc <HAL_RCC_GetHCLKFreq>
 8001b18:	4602      	mov	r2, r0
 8001b1a:	4b05      	ldr	r3, [pc, #20]	@ (8001b30 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b1c:	689b      	ldr	r3, [r3, #8]
 8001b1e:	0a9b      	lsrs	r3, r3, #10
 8001b20:	f003 0307 	and.w	r3, r3, #7
 8001b24:	4903      	ldr	r1, [pc, #12]	@ (8001b34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b26:	5ccb      	ldrb	r3, [r1, r3]
 8001b28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	bd80      	pop	{r7, pc}
 8001b30:	40023800 	.word	0x40023800
 8001b34:	080038a4 	.word	0x080038a4

08001b38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001b3c:	f7ff ffde 	bl	8001afc <HAL_RCC_GetHCLKFreq>
 8001b40:	4602      	mov	r2, r0
 8001b42:	4b05      	ldr	r3, [pc, #20]	@ (8001b58 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b44:	689b      	ldr	r3, [r3, #8]
 8001b46:	0b5b      	lsrs	r3, r3, #13
 8001b48:	f003 0307 	and.w	r3, r3, #7
 8001b4c:	4903      	ldr	r1, [pc, #12]	@ (8001b5c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b4e:	5ccb      	ldrb	r3, [r1, r3]
 8001b50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	bd80      	pop	{r7, pc}
 8001b58:	40023800 	.word	0x40023800
 8001b5c:	080038a4 	.word	0x080038a4

08001b60 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b082      	sub	sp, #8
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d101      	bne.n	8001b72 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e07b      	b.n	8001c6a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d108      	bne.n	8001b8c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001b82:	d009      	beq.n	8001b98 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2200      	movs	r2, #0
 8001b88:	61da      	str	r2, [r3, #28]
 8001b8a:	e005      	b.n	8001b98 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2200      	movs	r2, #0
 8001b90:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2200      	movs	r2, #0
 8001b96:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001ba4:	b2db      	uxtb	r3, r3
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d106      	bne.n	8001bb8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2200      	movs	r2, #0
 8001bae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001bb2:	6878      	ldr	r0, [r7, #4]
 8001bb4:	f7fe feee 	bl	8000994 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2202      	movs	r2, #2
 8001bbc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	681a      	ldr	r2, [r3, #0]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001bce:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	689b      	ldr	r3, [r3, #8]
 8001bdc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8001be0:	431a      	orrs	r2, r3
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	68db      	ldr	r3, [r3, #12]
 8001be6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001bea:	431a      	orrs	r2, r3
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	691b      	ldr	r3, [r3, #16]
 8001bf0:	f003 0302 	and.w	r3, r3, #2
 8001bf4:	431a      	orrs	r2, r3
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	695b      	ldr	r3, [r3, #20]
 8001bfa:	f003 0301 	and.w	r3, r3, #1
 8001bfe:	431a      	orrs	r2, r3
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	699b      	ldr	r3, [r3, #24]
 8001c04:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001c08:	431a      	orrs	r2, r3
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	69db      	ldr	r3, [r3, #28]
 8001c0e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001c12:	431a      	orrs	r2, r3
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6a1b      	ldr	r3, [r3, #32]
 8001c18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c1c:	ea42 0103 	orr.w	r1, r2, r3
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c24:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	430a      	orrs	r2, r1
 8001c2e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	699b      	ldr	r3, [r3, #24]
 8001c34:	0c1b      	lsrs	r3, r3, #16
 8001c36:	f003 0104 	and.w	r1, r3, #4
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c3e:	f003 0210 	and.w	r2, r3, #16
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	430a      	orrs	r2, r1
 8001c48:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	69da      	ldr	r2, [r3, #28]
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001c58:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2201      	movs	r2, #1
 8001c64:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8001c68:	2300      	movs	r3, #0
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	3708      	adds	r7, #8
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}

08001c72 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c72:	b580      	push	{r7, lr}
 8001c74:	b088      	sub	sp, #32
 8001c76:	af00      	add	r7, sp, #0
 8001c78:	60f8      	str	r0, [r7, #12]
 8001c7a:	60b9      	str	r1, [r7, #8]
 8001c7c:	603b      	str	r3, [r7, #0]
 8001c7e:	4613      	mov	r3, r2
 8001c80:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001c82:	f7ff f80d 	bl	8000ca0 <HAL_GetTick>
 8001c86:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8001c88:	88fb      	ldrh	r3, [r7, #6]
 8001c8a:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001c92:	b2db      	uxtb	r3, r3
 8001c94:	2b01      	cmp	r3, #1
 8001c96:	d001      	beq.n	8001c9c <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8001c98:	2302      	movs	r3, #2
 8001c9a:	e12a      	b.n	8001ef2 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8001c9c:	68bb      	ldr	r3, [r7, #8]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d002      	beq.n	8001ca8 <HAL_SPI_Transmit+0x36>
 8001ca2:	88fb      	ldrh	r3, [r7, #6]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d101      	bne.n	8001cac <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	e122      	b.n	8001ef2 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001cb2:	2b01      	cmp	r3, #1
 8001cb4:	d101      	bne.n	8001cba <HAL_SPI_Transmit+0x48>
 8001cb6:	2302      	movs	r3, #2
 8001cb8:	e11b      	b.n	8001ef2 <HAL_SPI_Transmit+0x280>
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	2201      	movs	r2, #1
 8001cbe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	2203      	movs	r2, #3
 8001cc6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	2200      	movs	r2, #0
 8001cce:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	68ba      	ldr	r2, [r7, #8]
 8001cd4:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	88fa      	ldrh	r2, [r7, #6]
 8001cda:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	88fa      	ldrh	r2, [r7, #6]
 8001ce0:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	2200      	movs	r2, #0
 8001cec:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	689b      	ldr	r3, [r3, #8]
 8001d04:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001d08:	d10f      	bne.n	8001d2a <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	681a      	ldr	r2, [r3, #0]
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001d18:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	681a      	ldr	r2, [r3, #0]
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001d28:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d34:	2b40      	cmp	r3, #64	@ 0x40
 8001d36:	d007      	beq.n	8001d48 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	681a      	ldr	r2, [r3, #0]
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001d46:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	68db      	ldr	r3, [r3, #12]
 8001d4c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001d50:	d152      	bne.n	8001df8 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d002      	beq.n	8001d60 <HAL_SPI_Transmit+0xee>
 8001d5a:	8b7b      	ldrh	r3, [r7, #26]
 8001d5c:	2b01      	cmp	r3, #1
 8001d5e:	d145      	bne.n	8001dec <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d64:	881a      	ldrh	r2, [r3, #0]
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d70:	1c9a      	adds	r2, r3, #2
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001d7a:	b29b      	uxth	r3, r3
 8001d7c:	3b01      	subs	r3, #1
 8001d7e:	b29a      	uxth	r2, r3
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001d84:	e032      	b.n	8001dec <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	689b      	ldr	r3, [r3, #8]
 8001d8c:	f003 0302 	and.w	r3, r3, #2
 8001d90:	2b02      	cmp	r3, #2
 8001d92:	d112      	bne.n	8001dba <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d98:	881a      	ldrh	r2, [r3, #0]
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001da4:	1c9a      	adds	r2, r3, #2
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001dae:	b29b      	uxth	r3, r3
 8001db0:	3b01      	subs	r3, #1
 8001db2:	b29a      	uxth	r2, r3
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	86da      	strh	r2, [r3, #54]	@ 0x36
 8001db8:	e018      	b.n	8001dec <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001dba:	f7fe ff71 	bl	8000ca0 <HAL_GetTick>
 8001dbe:	4602      	mov	r2, r0
 8001dc0:	69fb      	ldr	r3, [r7, #28]
 8001dc2:	1ad3      	subs	r3, r2, r3
 8001dc4:	683a      	ldr	r2, [r7, #0]
 8001dc6:	429a      	cmp	r2, r3
 8001dc8:	d803      	bhi.n	8001dd2 <HAL_SPI_Transmit+0x160>
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001dd0:	d102      	bne.n	8001dd8 <HAL_SPI_Transmit+0x166>
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d109      	bne.n	8001dec <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	2201      	movs	r2, #1
 8001ddc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	2200      	movs	r2, #0
 8001de4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8001de8:	2303      	movs	r3, #3
 8001dea:	e082      	b.n	8001ef2 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001df0:	b29b      	uxth	r3, r3
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d1c7      	bne.n	8001d86 <HAL_SPI_Transmit+0x114>
 8001df6:	e053      	b.n	8001ea0 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d002      	beq.n	8001e06 <HAL_SPI_Transmit+0x194>
 8001e00:	8b7b      	ldrh	r3, [r7, #26]
 8001e02:	2b01      	cmp	r3, #1
 8001e04:	d147      	bne.n	8001e96 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	330c      	adds	r3, #12
 8001e10:	7812      	ldrb	r2, [r2, #0]
 8001e12:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e18:	1c5a      	adds	r2, r3, #1
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001e22:	b29b      	uxth	r3, r3
 8001e24:	3b01      	subs	r3, #1
 8001e26:	b29a      	uxth	r2, r3
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8001e2c:	e033      	b.n	8001e96 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	689b      	ldr	r3, [r3, #8]
 8001e34:	f003 0302 	and.w	r3, r3, #2
 8001e38:	2b02      	cmp	r3, #2
 8001e3a:	d113      	bne.n	8001e64 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	330c      	adds	r3, #12
 8001e46:	7812      	ldrb	r2, [r2, #0]
 8001e48:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e4e:	1c5a      	adds	r2, r3, #1
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001e58:	b29b      	uxth	r3, r3
 8001e5a:	3b01      	subs	r3, #1
 8001e5c:	b29a      	uxth	r2, r3
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	86da      	strh	r2, [r3, #54]	@ 0x36
 8001e62:	e018      	b.n	8001e96 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001e64:	f7fe ff1c 	bl	8000ca0 <HAL_GetTick>
 8001e68:	4602      	mov	r2, r0
 8001e6a:	69fb      	ldr	r3, [r7, #28]
 8001e6c:	1ad3      	subs	r3, r2, r3
 8001e6e:	683a      	ldr	r2, [r7, #0]
 8001e70:	429a      	cmp	r2, r3
 8001e72:	d803      	bhi.n	8001e7c <HAL_SPI_Transmit+0x20a>
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001e7a:	d102      	bne.n	8001e82 <HAL_SPI_Transmit+0x210>
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d109      	bne.n	8001e96 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	2201      	movs	r2, #1
 8001e86:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8001e92:	2303      	movs	r3, #3
 8001e94:	e02d      	b.n	8001ef2 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001e9a:	b29b      	uxth	r3, r3
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d1c6      	bne.n	8001e2e <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001ea0:	69fa      	ldr	r2, [r7, #28]
 8001ea2:	6839      	ldr	r1, [r7, #0]
 8001ea4:	68f8      	ldr	r0, [r7, #12]
 8001ea6:	f000 fbd9 	bl	800265c <SPI_EndRxTxTransaction>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d002      	beq.n	8001eb6 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	2220      	movs	r2, #32
 8001eb4:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	689b      	ldr	r3, [r3, #8]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d10a      	bne.n	8001ed4 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	617b      	str	r3, [r7, #20]
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	68db      	ldr	r3, [r3, #12]
 8001ec8:	617b      	str	r3, [r7, #20]
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	689b      	ldr	r3, [r3, #8]
 8001ed0:	617b      	str	r3, [r7, #20]
 8001ed2:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	2200      	movs	r2, #0
 8001ee0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d001      	beq.n	8001ef0 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8001eec:	2301      	movs	r3, #1
 8001eee:	e000      	b.n	8001ef2 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8001ef0:	2300      	movs	r3, #0
  }
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	3720      	adds	r7, #32
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}

08001efa <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001efa:	b580      	push	{r7, lr}
 8001efc:	b088      	sub	sp, #32
 8001efe:	af02      	add	r7, sp, #8
 8001f00:	60f8      	str	r0, [r7, #12]
 8001f02:	60b9      	str	r1, [r7, #8]
 8001f04:	603b      	str	r3, [r7, #0]
 8001f06:	4613      	mov	r3, r2
 8001f08:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001f10:	b2db      	uxtb	r3, r3
 8001f12:	2b01      	cmp	r3, #1
 8001f14:	d001      	beq.n	8001f1a <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8001f16:	2302      	movs	r3, #2
 8001f18:	e104      	b.n	8002124 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001f22:	d112      	bne.n	8001f4a <HAL_SPI_Receive+0x50>
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	689b      	ldr	r3, [r3, #8]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d10e      	bne.n	8001f4a <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	2204      	movs	r2, #4
 8001f30:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8001f34:	88fa      	ldrh	r2, [r7, #6]
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	9300      	str	r3, [sp, #0]
 8001f3a:	4613      	mov	r3, r2
 8001f3c:	68ba      	ldr	r2, [r7, #8]
 8001f3e:	68b9      	ldr	r1, [r7, #8]
 8001f40:	68f8      	ldr	r0, [r7, #12]
 8001f42:	f000 f8f3 	bl	800212c <HAL_SPI_TransmitReceive>
 8001f46:	4603      	mov	r3, r0
 8001f48:	e0ec      	b.n	8002124 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001f4a:	f7fe fea9 	bl	8000ca0 <HAL_GetTick>
 8001f4e:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8001f50:	68bb      	ldr	r3, [r7, #8]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d002      	beq.n	8001f5c <HAL_SPI_Receive+0x62>
 8001f56:	88fb      	ldrh	r3, [r7, #6]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d101      	bne.n	8001f60 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	e0e1      	b.n	8002124 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001f66:	2b01      	cmp	r3, #1
 8001f68:	d101      	bne.n	8001f6e <HAL_SPI_Receive+0x74>
 8001f6a:	2302      	movs	r3, #2
 8001f6c:	e0da      	b.n	8002124 <HAL_SPI_Receive+0x22a>
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	2201      	movs	r2, #1
 8001f72:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	2204      	movs	r2, #4
 8001f7a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	2200      	movs	r2, #0
 8001f82:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	68ba      	ldr	r2, [r7, #8]
 8001f88:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	88fa      	ldrh	r2, [r7, #6]
 8001f8e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	88fa      	ldrh	r2, [r7, #6]
 8001f94:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	2200      	movs	r2, #0
 8001f9a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	2200      	movs	r2, #0
 8001fac:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	689b      	ldr	r3, [r3, #8]
 8001fb8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001fbc:	d10f      	bne.n	8001fde <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	681a      	ldr	r2, [r3, #0]
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001fcc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	681a      	ldr	r2, [r3, #0]
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8001fdc:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001fe8:	2b40      	cmp	r3, #64	@ 0x40
 8001fea:	d007      	beq.n	8001ffc <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	681a      	ldr	r2, [r3, #0]
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001ffa:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	68db      	ldr	r3, [r3, #12]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d170      	bne.n	80020e6 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002004:	e035      	b.n	8002072 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	689b      	ldr	r3, [r3, #8]
 800200c:	f003 0301 	and.w	r3, r3, #1
 8002010:	2b01      	cmp	r3, #1
 8002012:	d115      	bne.n	8002040 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f103 020c 	add.w	r2, r3, #12
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002020:	7812      	ldrb	r2, [r2, #0]
 8002022:	b2d2      	uxtb	r2, r2
 8002024:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800202a:	1c5a      	adds	r2, r3, #1
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002034:	b29b      	uxth	r3, r3
 8002036:	3b01      	subs	r3, #1
 8002038:	b29a      	uxth	r2, r3
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800203e:	e018      	b.n	8002072 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002040:	f7fe fe2e 	bl	8000ca0 <HAL_GetTick>
 8002044:	4602      	mov	r2, r0
 8002046:	697b      	ldr	r3, [r7, #20]
 8002048:	1ad3      	subs	r3, r2, r3
 800204a:	683a      	ldr	r2, [r7, #0]
 800204c:	429a      	cmp	r2, r3
 800204e:	d803      	bhi.n	8002058 <HAL_SPI_Receive+0x15e>
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002056:	d102      	bne.n	800205e <HAL_SPI_Receive+0x164>
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d109      	bne.n	8002072 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	2201      	movs	r2, #1
 8002062:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	2200      	movs	r2, #0
 800206a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800206e:	2303      	movs	r3, #3
 8002070:	e058      	b.n	8002124 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002076:	b29b      	uxth	r3, r3
 8002078:	2b00      	cmp	r3, #0
 800207a:	d1c4      	bne.n	8002006 <HAL_SPI_Receive+0x10c>
 800207c:	e038      	b.n	80020f0 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	689b      	ldr	r3, [r3, #8]
 8002084:	f003 0301 	and.w	r3, r3, #1
 8002088:	2b01      	cmp	r3, #1
 800208a:	d113      	bne.n	80020b4 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	68da      	ldr	r2, [r3, #12]
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002096:	b292      	uxth	r2, r2
 8002098:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800209e:	1c9a      	adds	r2, r3, #2
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80020a8:	b29b      	uxth	r3, r3
 80020aa:	3b01      	subs	r3, #1
 80020ac:	b29a      	uxth	r2, r3
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80020b2:	e018      	b.n	80020e6 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80020b4:	f7fe fdf4 	bl	8000ca0 <HAL_GetTick>
 80020b8:	4602      	mov	r2, r0
 80020ba:	697b      	ldr	r3, [r7, #20]
 80020bc:	1ad3      	subs	r3, r2, r3
 80020be:	683a      	ldr	r2, [r7, #0]
 80020c0:	429a      	cmp	r2, r3
 80020c2:	d803      	bhi.n	80020cc <HAL_SPI_Receive+0x1d2>
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80020ca:	d102      	bne.n	80020d2 <HAL_SPI_Receive+0x1d8>
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d109      	bne.n	80020e6 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	2201      	movs	r2, #1
 80020d6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	2200      	movs	r2, #0
 80020de:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80020e2:	2303      	movs	r3, #3
 80020e4:	e01e      	b.n	8002124 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80020ea:	b29b      	uxth	r3, r3
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d1c6      	bne.n	800207e <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80020f0:	697a      	ldr	r2, [r7, #20]
 80020f2:	6839      	ldr	r1, [r7, #0]
 80020f4:	68f8      	ldr	r0, [r7, #12]
 80020f6:	f000 fa4b 	bl	8002590 <SPI_EndRxTransaction>
 80020fa:	4603      	mov	r3, r0
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d002      	beq.n	8002106 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	2220      	movs	r2, #32
 8002104:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	2201      	movs	r2, #1
 800210a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	2200      	movs	r2, #0
 8002112:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800211a:	2b00      	cmp	r3, #0
 800211c:	d001      	beq.n	8002122 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 800211e:	2301      	movs	r3, #1
 8002120:	e000      	b.n	8002124 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8002122:	2300      	movs	r3, #0
  }
}
 8002124:	4618      	mov	r0, r3
 8002126:	3718      	adds	r7, #24
 8002128:	46bd      	mov	sp, r7
 800212a:	bd80      	pop	{r7, pc}

0800212c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b08a      	sub	sp, #40	@ 0x28
 8002130:	af00      	add	r7, sp, #0
 8002132:	60f8      	str	r0, [r7, #12]
 8002134:	60b9      	str	r1, [r7, #8]
 8002136:	607a      	str	r2, [r7, #4]
 8002138:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800213a:	2301      	movs	r3, #1
 800213c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800213e:	f7fe fdaf 	bl	8000ca0 <HAL_GetTick>
 8002142:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800214a:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8002152:	887b      	ldrh	r3, [r7, #2]
 8002154:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002156:	7ffb      	ldrb	r3, [r7, #31]
 8002158:	2b01      	cmp	r3, #1
 800215a:	d00c      	beq.n	8002176 <HAL_SPI_TransmitReceive+0x4a>
 800215c:	69bb      	ldr	r3, [r7, #24]
 800215e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002162:	d106      	bne.n	8002172 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	689b      	ldr	r3, [r3, #8]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d102      	bne.n	8002172 <HAL_SPI_TransmitReceive+0x46>
 800216c:	7ffb      	ldrb	r3, [r7, #31]
 800216e:	2b04      	cmp	r3, #4
 8002170:	d001      	beq.n	8002176 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8002172:	2302      	movs	r3, #2
 8002174:	e17f      	b.n	8002476 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002176:	68bb      	ldr	r3, [r7, #8]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d005      	beq.n	8002188 <HAL_SPI_TransmitReceive+0x5c>
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d002      	beq.n	8002188 <HAL_SPI_TransmitReceive+0x5c>
 8002182:	887b      	ldrh	r3, [r7, #2]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d101      	bne.n	800218c <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8002188:	2301      	movs	r3, #1
 800218a:	e174      	b.n	8002476 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002192:	2b01      	cmp	r3, #1
 8002194:	d101      	bne.n	800219a <HAL_SPI_TransmitReceive+0x6e>
 8002196:	2302      	movs	r3, #2
 8002198:	e16d      	b.n	8002476 <HAL_SPI_TransmitReceive+0x34a>
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	2201      	movs	r2, #1
 800219e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80021a8:	b2db      	uxtb	r3, r3
 80021aa:	2b04      	cmp	r3, #4
 80021ac:	d003      	beq.n	80021b6 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	2205      	movs	r2, #5
 80021b2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	2200      	movs	r2, #0
 80021ba:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	687a      	ldr	r2, [r7, #4]
 80021c0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	887a      	ldrh	r2, [r7, #2]
 80021c6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	887a      	ldrh	r2, [r7, #2]
 80021cc:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	68ba      	ldr	r2, [r7, #8]
 80021d2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	887a      	ldrh	r2, [r7, #2]
 80021d8:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	887a      	ldrh	r2, [r7, #2]
 80021de:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	2200      	movs	r2, #0
 80021e4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	2200      	movs	r2, #0
 80021ea:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021f6:	2b40      	cmp	r3, #64	@ 0x40
 80021f8:	d007      	beq.n	800220a <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	681a      	ldr	r2, [r3, #0]
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002208:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	68db      	ldr	r3, [r3, #12]
 800220e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002212:	d17e      	bne.n	8002312 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d002      	beq.n	8002222 <HAL_SPI_TransmitReceive+0xf6>
 800221c:	8afb      	ldrh	r3, [r7, #22]
 800221e:	2b01      	cmp	r3, #1
 8002220:	d16c      	bne.n	80022fc <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002226:	881a      	ldrh	r2, [r3, #0]
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002232:	1c9a      	adds	r2, r3, #2
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800223c:	b29b      	uxth	r3, r3
 800223e:	3b01      	subs	r3, #1
 8002240:	b29a      	uxth	r2, r3
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002246:	e059      	b.n	80022fc <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	689b      	ldr	r3, [r3, #8]
 800224e:	f003 0302 	and.w	r3, r3, #2
 8002252:	2b02      	cmp	r3, #2
 8002254:	d11b      	bne.n	800228e <HAL_SPI_TransmitReceive+0x162>
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800225a:	b29b      	uxth	r3, r3
 800225c:	2b00      	cmp	r3, #0
 800225e:	d016      	beq.n	800228e <HAL_SPI_TransmitReceive+0x162>
 8002260:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002262:	2b01      	cmp	r3, #1
 8002264:	d113      	bne.n	800228e <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800226a:	881a      	ldrh	r2, [r3, #0]
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002276:	1c9a      	adds	r2, r3, #2
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002280:	b29b      	uxth	r3, r3
 8002282:	3b01      	subs	r3, #1
 8002284:	b29a      	uxth	r2, r3
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800228a:	2300      	movs	r3, #0
 800228c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	689b      	ldr	r3, [r3, #8]
 8002294:	f003 0301 	and.w	r3, r3, #1
 8002298:	2b01      	cmp	r3, #1
 800229a:	d119      	bne.n	80022d0 <HAL_SPI_TransmitReceive+0x1a4>
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80022a0:	b29b      	uxth	r3, r3
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d014      	beq.n	80022d0 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	68da      	ldr	r2, [r3, #12]
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022b0:	b292      	uxth	r2, r2
 80022b2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022b8:	1c9a      	adds	r2, r3, #2
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80022c2:	b29b      	uxth	r3, r3
 80022c4:	3b01      	subs	r3, #1
 80022c6:	b29a      	uxth	r2, r3
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80022cc:	2301      	movs	r3, #1
 80022ce:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80022d0:	f7fe fce6 	bl	8000ca0 <HAL_GetTick>
 80022d4:	4602      	mov	r2, r0
 80022d6:	6a3b      	ldr	r3, [r7, #32]
 80022d8:	1ad3      	subs	r3, r2, r3
 80022da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80022dc:	429a      	cmp	r2, r3
 80022de:	d80d      	bhi.n	80022fc <HAL_SPI_TransmitReceive+0x1d0>
 80022e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022e2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80022e6:	d009      	beq.n	80022fc <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	2201      	movs	r2, #1
 80022ec:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	2200      	movs	r2, #0
 80022f4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80022f8:	2303      	movs	r3, #3
 80022fa:	e0bc      	b.n	8002476 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002300:	b29b      	uxth	r3, r3
 8002302:	2b00      	cmp	r3, #0
 8002304:	d1a0      	bne.n	8002248 <HAL_SPI_TransmitReceive+0x11c>
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800230a:	b29b      	uxth	r3, r3
 800230c:	2b00      	cmp	r3, #0
 800230e:	d19b      	bne.n	8002248 <HAL_SPI_TransmitReceive+0x11c>
 8002310:	e082      	b.n	8002418 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d002      	beq.n	8002320 <HAL_SPI_TransmitReceive+0x1f4>
 800231a:	8afb      	ldrh	r3, [r7, #22]
 800231c:	2b01      	cmp	r3, #1
 800231e:	d171      	bne.n	8002404 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	330c      	adds	r3, #12
 800232a:	7812      	ldrb	r2, [r2, #0]
 800232c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002332:	1c5a      	adds	r2, r3, #1
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800233c:	b29b      	uxth	r3, r3
 800233e:	3b01      	subs	r3, #1
 8002340:	b29a      	uxth	r2, r3
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002346:	e05d      	b.n	8002404 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	689b      	ldr	r3, [r3, #8]
 800234e:	f003 0302 	and.w	r3, r3, #2
 8002352:	2b02      	cmp	r3, #2
 8002354:	d11c      	bne.n	8002390 <HAL_SPI_TransmitReceive+0x264>
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800235a:	b29b      	uxth	r3, r3
 800235c:	2b00      	cmp	r3, #0
 800235e:	d017      	beq.n	8002390 <HAL_SPI_TransmitReceive+0x264>
 8002360:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002362:	2b01      	cmp	r3, #1
 8002364:	d114      	bne.n	8002390 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	330c      	adds	r3, #12
 8002370:	7812      	ldrb	r2, [r2, #0]
 8002372:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002378:	1c5a      	adds	r2, r3, #1
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002382:	b29b      	uxth	r3, r3
 8002384:	3b01      	subs	r3, #1
 8002386:	b29a      	uxth	r2, r3
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800238c:	2300      	movs	r3, #0
 800238e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	689b      	ldr	r3, [r3, #8]
 8002396:	f003 0301 	and.w	r3, r3, #1
 800239a:	2b01      	cmp	r3, #1
 800239c:	d119      	bne.n	80023d2 <HAL_SPI_TransmitReceive+0x2a6>
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80023a2:	b29b      	uxth	r3, r3
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d014      	beq.n	80023d2 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	68da      	ldr	r2, [r3, #12]
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023b2:	b2d2      	uxtb	r2, r2
 80023b4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023ba:	1c5a      	adds	r2, r3, #1
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80023c4:	b29b      	uxth	r3, r3
 80023c6:	3b01      	subs	r3, #1
 80023c8:	b29a      	uxth	r2, r3
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80023ce:	2301      	movs	r3, #1
 80023d0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80023d2:	f7fe fc65 	bl	8000ca0 <HAL_GetTick>
 80023d6:	4602      	mov	r2, r0
 80023d8:	6a3b      	ldr	r3, [r7, #32]
 80023da:	1ad3      	subs	r3, r2, r3
 80023dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80023de:	429a      	cmp	r2, r3
 80023e0:	d803      	bhi.n	80023ea <HAL_SPI_TransmitReceive+0x2be>
 80023e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023e4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80023e8:	d102      	bne.n	80023f0 <HAL_SPI_TransmitReceive+0x2c4>
 80023ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d109      	bne.n	8002404 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	2201      	movs	r2, #1
 80023f4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	2200      	movs	r2, #0
 80023fc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8002400:	2303      	movs	r3, #3
 8002402:	e038      	b.n	8002476 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002408:	b29b      	uxth	r3, r3
 800240a:	2b00      	cmp	r3, #0
 800240c:	d19c      	bne.n	8002348 <HAL_SPI_TransmitReceive+0x21c>
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002412:	b29b      	uxth	r3, r3
 8002414:	2b00      	cmp	r3, #0
 8002416:	d197      	bne.n	8002348 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002418:	6a3a      	ldr	r2, [r7, #32]
 800241a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800241c:	68f8      	ldr	r0, [r7, #12]
 800241e:	f000 f91d 	bl	800265c <SPI_EndRxTxTransaction>
 8002422:	4603      	mov	r3, r0
 8002424:	2b00      	cmp	r3, #0
 8002426:	d008      	beq.n	800243a <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	2220      	movs	r2, #32
 800242c:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	2200      	movs	r2, #0
 8002432:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8002436:	2301      	movs	r3, #1
 8002438:	e01d      	b.n	8002476 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	689b      	ldr	r3, [r3, #8]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d10a      	bne.n	8002458 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002442:	2300      	movs	r3, #0
 8002444:	613b      	str	r3, [r7, #16]
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	68db      	ldr	r3, [r3, #12]
 800244c:	613b      	str	r3, [r7, #16]
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	613b      	str	r3, [r7, #16]
 8002456:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	2201      	movs	r2, #1
 800245c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	2200      	movs	r2, #0
 8002464:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800246c:	2b00      	cmp	r3, #0
 800246e:	d001      	beq.n	8002474 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8002470:	2301      	movs	r3, #1
 8002472:	e000      	b.n	8002476 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8002474:	2300      	movs	r3, #0
  }
}
 8002476:	4618      	mov	r0, r3
 8002478:	3728      	adds	r7, #40	@ 0x28
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}
	...

08002480 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b088      	sub	sp, #32
 8002484:	af00      	add	r7, sp, #0
 8002486:	60f8      	str	r0, [r7, #12]
 8002488:	60b9      	str	r1, [r7, #8]
 800248a:	603b      	str	r3, [r7, #0]
 800248c:	4613      	mov	r3, r2
 800248e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002490:	f7fe fc06 	bl	8000ca0 <HAL_GetTick>
 8002494:	4602      	mov	r2, r0
 8002496:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002498:	1a9b      	subs	r3, r3, r2
 800249a:	683a      	ldr	r2, [r7, #0]
 800249c:	4413      	add	r3, r2
 800249e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80024a0:	f7fe fbfe 	bl	8000ca0 <HAL_GetTick>
 80024a4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80024a6:	4b39      	ldr	r3, [pc, #228]	@ (800258c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	015b      	lsls	r3, r3, #5
 80024ac:	0d1b      	lsrs	r3, r3, #20
 80024ae:	69fa      	ldr	r2, [r7, #28]
 80024b0:	fb02 f303 	mul.w	r3, r2, r3
 80024b4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80024b6:	e054      	b.n	8002562 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80024be:	d050      	beq.n	8002562 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80024c0:	f7fe fbee 	bl	8000ca0 <HAL_GetTick>
 80024c4:	4602      	mov	r2, r0
 80024c6:	69bb      	ldr	r3, [r7, #24]
 80024c8:	1ad3      	subs	r3, r2, r3
 80024ca:	69fa      	ldr	r2, [r7, #28]
 80024cc:	429a      	cmp	r2, r3
 80024ce:	d902      	bls.n	80024d6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80024d0:	69fb      	ldr	r3, [r7, #28]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d13d      	bne.n	8002552 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	685a      	ldr	r2, [r3, #4]
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80024e4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80024ee:	d111      	bne.n	8002514 <SPI_WaitFlagStateUntilTimeout+0x94>
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	689b      	ldr	r3, [r3, #8]
 80024f4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80024f8:	d004      	beq.n	8002504 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	689b      	ldr	r3, [r3, #8]
 80024fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002502:	d107      	bne.n	8002514 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	681a      	ldr	r2, [r3, #0]
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002512:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002518:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800251c:	d10f      	bne.n	800253e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	681a      	ldr	r2, [r3, #0]
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800252c:	601a      	str	r2, [r3, #0]
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	681a      	ldr	r2, [r3, #0]
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800253c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	2201      	movs	r2, #1
 8002542:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	2200      	movs	r2, #0
 800254a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800254e:	2303      	movs	r3, #3
 8002550:	e017      	b.n	8002582 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002552:	697b      	ldr	r3, [r7, #20]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d101      	bne.n	800255c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002558:	2300      	movs	r3, #0
 800255a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	3b01      	subs	r3, #1
 8002560:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	689a      	ldr	r2, [r3, #8]
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	4013      	ands	r3, r2
 800256c:	68ba      	ldr	r2, [r7, #8]
 800256e:	429a      	cmp	r2, r3
 8002570:	bf0c      	ite	eq
 8002572:	2301      	moveq	r3, #1
 8002574:	2300      	movne	r3, #0
 8002576:	b2db      	uxtb	r3, r3
 8002578:	461a      	mov	r2, r3
 800257a:	79fb      	ldrb	r3, [r7, #7]
 800257c:	429a      	cmp	r2, r3
 800257e:	d19b      	bne.n	80024b8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002580:	2300      	movs	r3, #0
}
 8002582:	4618      	mov	r0, r3
 8002584:	3720      	adds	r7, #32
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}
 800258a:	bf00      	nop
 800258c:	20000000 	.word	0x20000000

08002590 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b086      	sub	sp, #24
 8002594:	af02      	add	r7, sp, #8
 8002596:	60f8      	str	r0, [r7, #12]
 8002598:	60b9      	str	r1, [r7, #8]
 800259a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80025a4:	d111      	bne.n	80025ca <SPI_EndRxTransaction+0x3a>
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	689b      	ldr	r3, [r3, #8]
 80025aa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80025ae:	d004      	beq.n	80025ba <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	689b      	ldr	r3, [r3, #8]
 80025b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80025b8:	d107      	bne.n	80025ca <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	681a      	ldr	r2, [r3, #0]
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80025c8:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80025d2:	d12a      	bne.n	800262a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	689b      	ldr	r3, [r3, #8]
 80025d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80025dc:	d012      	beq.n	8002604 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	9300      	str	r3, [sp, #0]
 80025e2:	68bb      	ldr	r3, [r7, #8]
 80025e4:	2200      	movs	r2, #0
 80025e6:	2180      	movs	r1, #128	@ 0x80
 80025e8:	68f8      	ldr	r0, [r7, #12]
 80025ea:	f7ff ff49 	bl	8002480 <SPI_WaitFlagStateUntilTimeout>
 80025ee:	4603      	mov	r3, r0
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d02d      	beq.n	8002650 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025f8:	f043 0220 	orr.w	r2, r3, #32
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8002600:	2303      	movs	r3, #3
 8002602:	e026      	b.n	8002652 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	9300      	str	r3, [sp, #0]
 8002608:	68bb      	ldr	r3, [r7, #8]
 800260a:	2200      	movs	r2, #0
 800260c:	2101      	movs	r1, #1
 800260e:	68f8      	ldr	r0, [r7, #12]
 8002610:	f7ff ff36 	bl	8002480 <SPI_WaitFlagStateUntilTimeout>
 8002614:	4603      	mov	r3, r0
 8002616:	2b00      	cmp	r3, #0
 8002618:	d01a      	beq.n	8002650 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800261e:	f043 0220 	orr.w	r2, r3, #32
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8002626:	2303      	movs	r3, #3
 8002628:	e013      	b.n	8002652 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	9300      	str	r3, [sp, #0]
 800262e:	68bb      	ldr	r3, [r7, #8]
 8002630:	2200      	movs	r2, #0
 8002632:	2101      	movs	r1, #1
 8002634:	68f8      	ldr	r0, [r7, #12]
 8002636:	f7ff ff23 	bl	8002480 <SPI_WaitFlagStateUntilTimeout>
 800263a:	4603      	mov	r3, r0
 800263c:	2b00      	cmp	r3, #0
 800263e:	d007      	beq.n	8002650 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002644:	f043 0220 	orr.w	r2, r3, #32
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800264c:	2303      	movs	r3, #3
 800264e:	e000      	b.n	8002652 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8002650:	2300      	movs	r3, #0
}
 8002652:	4618      	mov	r0, r3
 8002654:	3710      	adds	r7, #16
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}
	...

0800265c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b088      	sub	sp, #32
 8002660:	af02      	add	r7, sp, #8
 8002662:	60f8      	str	r0, [r7, #12]
 8002664:	60b9      	str	r1, [r7, #8]
 8002666:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	9300      	str	r3, [sp, #0]
 800266c:	68bb      	ldr	r3, [r7, #8]
 800266e:	2201      	movs	r2, #1
 8002670:	2102      	movs	r1, #2
 8002672:	68f8      	ldr	r0, [r7, #12]
 8002674:	f7ff ff04 	bl	8002480 <SPI_WaitFlagStateUntilTimeout>
 8002678:	4603      	mov	r3, r0
 800267a:	2b00      	cmp	r3, #0
 800267c:	d007      	beq.n	800268e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002682:	f043 0220 	orr.w	r2, r3, #32
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800268a:	2303      	movs	r3, #3
 800268c:	e032      	b.n	80026f4 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800268e:	4b1b      	ldr	r3, [pc, #108]	@ (80026fc <SPI_EndRxTxTransaction+0xa0>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4a1b      	ldr	r2, [pc, #108]	@ (8002700 <SPI_EndRxTxTransaction+0xa4>)
 8002694:	fba2 2303 	umull	r2, r3, r2, r3
 8002698:	0d5b      	lsrs	r3, r3, #21
 800269a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800269e:	fb02 f303 	mul.w	r3, r2, r3
 80026a2:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80026ac:	d112      	bne.n	80026d4 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	9300      	str	r3, [sp, #0]
 80026b2:	68bb      	ldr	r3, [r7, #8]
 80026b4:	2200      	movs	r2, #0
 80026b6:	2180      	movs	r1, #128	@ 0x80
 80026b8:	68f8      	ldr	r0, [r7, #12]
 80026ba:	f7ff fee1 	bl	8002480 <SPI_WaitFlagStateUntilTimeout>
 80026be:	4603      	mov	r3, r0
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d016      	beq.n	80026f2 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026c8:	f043 0220 	orr.w	r2, r3, #32
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80026d0:	2303      	movs	r3, #3
 80026d2:	e00f      	b.n	80026f4 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d00a      	beq.n	80026f0 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80026da:	697b      	ldr	r3, [r7, #20]
 80026dc:	3b01      	subs	r3, #1
 80026de:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	689b      	ldr	r3, [r3, #8]
 80026e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026ea:	2b80      	cmp	r3, #128	@ 0x80
 80026ec:	d0f2      	beq.n	80026d4 <SPI_EndRxTxTransaction+0x78>
 80026ee:	e000      	b.n	80026f2 <SPI_EndRxTxTransaction+0x96>
        break;
 80026f0:	bf00      	nop
  }

  return HAL_OK;
 80026f2:	2300      	movs	r3, #0
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	3718      	adds	r7, #24
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bd80      	pop	{r7, pc}
 80026fc:	20000000 	.word	0x20000000
 8002700:	165e9f81 	.word	0x165e9f81

08002704 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b082      	sub	sp, #8
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d101      	bne.n	8002716 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002712:	2301      	movs	r3, #1
 8002714:	e042      	b.n	800279c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800271c:	b2db      	uxtb	r3, r3
 800271e:	2b00      	cmp	r3, #0
 8002720:	d106      	bne.n	8002730 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2200      	movs	r2, #0
 8002726:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800272a:	6878      	ldr	r0, [r7, #4]
 800272c:	f7fe f97a 	bl	8000a24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2224      	movs	r2, #36	@ 0x24
 8002734:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	68da      	ldr	r2, [r3, #12]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002746:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002748:	6878      	ldr	r0, [r7, #4]
 800274a:	f000 f971 	bl	8002a30 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	691a      	ldr	r2, [r3, #16]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800275c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	695a      	ldr	r2, [r3, #20]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800276c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	68da      	ldr	r2, [r3, #12]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800277c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2200      	movs	r2, #0
 8002782:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2220      	movs	r2, #32
 8002788:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2220      	movs	r2, #32
 8002790:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2200      	movs	r2, #0
 8002798:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800279a:	2300      	movs	r3, #0
}
 800279c:	4618      	mov	r0, r3
 800279e:	3708      	adds	r7, #8
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}

080027a4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b08a      	sub	sp, #40	@ 0x28
 80027a8:	af02      	add	r7, sp, #8
 80027aa:	60f8      	str	r0, [r7, #12]
 80027ac:	60b9      	str	r1, [r7, #8]
 80027ae:	603b      	str	r3, [r7, #0]
 80027b0:	4613      	mov	r3, r2
 80027b2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80027b4:	2300      	movs	r3, #0
 80027b6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80027be:	b2db      	uxtb	r3, r3
 80027c0:	2b20      	cmp	r3, #32
 80027c2:	d175      	bne.n	80028b0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d002      	beq.n	80027d0 <HAL_UART_Transmit+0x2c>
 80027ca:	88fb      	ldrh	r3, [r7, #6]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d101      	bne.n	80027d4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80027d0:	2301      	movs	r3, #1
 80027d2:	e06e      	b.n	80028b2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	2200      	movs	r2, #0
 80027d8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	2221      	movs	r2, #33	@ 0x21
 80027de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80027e2:	f7fe fa5d 	bl	8000ca0 <HAL_GetTick>
 80027e6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	88fa      	ldrh	r2, [r7, #6]
 80027ec:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	88fa      	ldrh	r2, [r7, #6]
 80027f2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	689b      	ldr	r3, [r3, #8]
 80027f8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80027fc:	d108      	bne.n	8002810 <HAL_UART_Transmit+0x6c>
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	691b      	ldr	r3, [r3, #16]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d104      	bne.n	8002810 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002806:	2300      	movs	r3, #0
 8002808:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800280a:	68bb      	ldr	r3, [r7, #8]
 800280c:	61bb      	str	r3, [r7, #24]
 800280e:	e003      	b.n	8002818 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002810:	68bb      	ldr	r3, [r7, #8]
 8002812:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002814:	2300      	movs	r3, #0
 8002816:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002818:	e02e      	b.n	8002878 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	9300      	str	r3, [sp, #0]
 800281e:	697b      	ldr	r3, [r7, #20]
 8002820:	2200      	movs	r2, #0
 8002822:	2180      	movs	r1, #128	@ 0x80
 8002824:	68f8      	ldr	r0, [r7, #12]
 8002826:	f000 f848 	bl	80028ba <UART_WaitOnFlagUntilTimeout>
 800282a:	4603      	mov	r3, r0
 800282c:	2b00      	cmp	r3, #0
 800282e:	d005      	beq.n	800283c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	2220      	movs	r2, #32
 8002834:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002838:	2303      	movs	r3, #3
 800283a:	e03a      	b.n	80028b2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800283c:	69fb      	ldr	r3, [r7, #28]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d10b      	bne.n	800285a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002842:	69bb      	ldr	r3, [r7, #24]
 8002844:	881b      	ldrh	r3, [r3, #0]
 8002846:	461a      	mov	r2, r3
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002850:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002852:	69bb      	ldr	r3, [r7, #24]
 8002854:	3302      	adds	r3, #2
 8002856:	61bb      	str	r3, [r7, #24]
 8002858:	e007      	b.n	800286a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800285a:	69fb      	ldr	r3, [r7, #28]
 800285c:	781a      	ldrb	r2, [r3, #0]
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002864:	69fb      	ldr	r3, [r7, #28]
 8002866:	3301      	adds	r3, #1
 8002868:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800286e:	b29b      	uxth	r3, r3
 8002870:	3b01      	subs	r3, #1
 8002872:	b29a      	uxth	r2, r3
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800287c:	b29b      	uxth	r3, r3
 800287e:	2b00      	cmp	r3, #0
 8002880:	d1cb      	bne.n	800281a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	9300      	str	r3, [sp, #0]
 8002886:	697b      	ldr	r3, [r7, #20]
 8002888:	2200      	movs	r2, #0
 800288a:	2140      	movs	r1, #64	@ 0x40
 800288c:	68f8      	ldr	r0, [r7, #12]
 800288e:	f000 f814 	bl	80028ba <UART_WaitOnFlagUntilTimeout>
 8002892:	4603      	mov	r3, r0
 8002894:	2b00      	cmp	r3, #0
 8002896:	d005      	beq.n	80028a4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	2220      	movs	r2, #32
 800289c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80028a0:	2303      	movs	r3, #3
 80028a2:	e006      	b.n	80028b2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	2220      	movs	r2, #32
 80028a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80028ac:	2300      	movs	r3, #0
 80028ae:	e000      	b.n	80028b2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80028b0:	2302      	movs	r3, #2
  }
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	3720      	adds	r7, #32
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}

080028ba <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80028ba:	b580      	push	{r7, lr}
 80028bc:	b086      	sub	sp, #24
 80028be:	af00      	add	r7, sp, #0
 80028c0:	60f8      	str	r0, [r7, #12]
 80028c2:	60b9      	str	r1, [r7, #8]
 80028c4:	603b      	str	r3, [r7, #0]
 80028c6:	4613      	mov	r3, r2
 80028c8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80028ca:	e03b      	b.n	8002944 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028cc:	6a3b      	ldr	r3, [r7, #32]
 80028ce:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80028d2:	d037      	beq.n	8002944 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028d4:	f7fe f9e4 	bl	8000ca0 <HAL_GetTick>
 80028d8:	4602      	mov	r2, r0
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	1ad3      	subs	r3, r2, r3
 80028de:	6a3a      	ldr	r2, [r7, #32]
 80028e0:	429a      	cmp	r2, r3
 80028e2:	d302      	bcc.n	80028ea <UART_WaitOnFlagUntilTimeout+0x30>
 80028e4:	6a3b      	ldr	r3, [r7, #32]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d101      	bne.n	80028ee <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80028ea:	2303      	movs	r3, #3
 80028ec:	e03a      	b.n	8002964 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	68db      	ldr	r3, [r3, #12]
 80028f4:	f003 0304 	and.w	r3, r3, #4
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d023      	beq.n	8002944 <UART_WaitOnFlagUntilTimeout+0x8a>
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	2b80      	cmp	r3, #128	@ 0x80
 8002900:	d020      	beq.n	8002944 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002902:	68bb      	ldr	r3, [r7, #8]
 8002904:	2b40      	cmp	r3, #64	@ 0x40
 8002906:	d01d      	beq.n	8002944 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f003 0308 	and.w	r3, r3, #8
 8002912:	2b08      	cmp	r3, #8
 8002914:	d116      	bne.n	8002944 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002916:	2300      	movs	r3, #0
 8002918:	617b      	str	r3, [r7, #20]
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	617b      	str	r3, [r7, #20]
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	617b      	str	r3, [r7, #20]
 800292a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800292c:	68f8      	ldr	r0, [r7, #12]
 800292e:	f000 f81d 	bl	800296c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	2208      	movs	r2, #8
 8002936:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	2200      	movs	r2, #0
 800293c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002940:	2301      	movs	r3, #1
 8002942:	e00f      	b.n	8002964 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	681a      	ldr	r2, [r3, #0]
 800294a:	68bb      	ldr	r3, [r7, #8]
 800294c:	4013      	ands	r3, r2
 800294e:	68ba      	ldr	r2, [r7, #8]
 8002950:	429a      	cmp	r2, r3
 8002952:	bf0c      	ite	eq
 8002954:	2301      	moveq	r3, #1
 8002956:	2300      	movne	r3, #0
 8002958:	b2db      	uxtb	r3, r3
 800295a:	461a      	mov	r2, r3
 800295c:	79fb      	ldrb	r3, [r7, #7]
 800295e:	429a      	cmp	r2, r3
 8002960:	d0b4      	beq.n	80028cc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002962:	2300      	movs	r3, #0
}
 8002964:	4618      	mov	r0, r3
 8002966:	3718      	adds	r7, #24
 8002968:	46bd      	mov	sp, r7
 800296a:	bd80      	pop	{r7, pc}

0800296c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800296c:	b480      	push	{r7}
 800296e:	b095      	sub	sp, #84	@ 0x54
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	330c      	adds	r3, #12
 800297a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800297c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800297e:	e853 3f00 	ldrex	r3, [r3]
 8002982:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002984:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002986:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800298a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	330c      	adds	r3, #12
 8002992:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002994:	643a      	str	r2, [r7, #64]	@ 0x40
 8002996:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002998:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800299a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800299c:	e841 2300 	strex	r3, r2, [r1]
 80029a0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80029a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d1e5      	bne.n	8002974 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	3314      	adds	r3, #20
 80029ae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029b0:	6a3b      	ldr	r3, [r7, #32]
 80029b2:	e853 3f00 	ldrex	r3, [r3]
 80029b6:	61fb      	str	r3, [r7, #28]
   return(result);
 80029b8:	69fb      	ldr	r3, [r7, #28]
 80029ba:	f023 0301 	bic.w	r3, r3, #1
 80029be:	64bb      	str	r3, [r7, #72]	@ 0x48
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	3314      	adds	r3, #20
 80029c6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80029c8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80029ca:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029cc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80029ce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80029d0:	e841 2300 	strex	r3, r2, [r1]
 80029d4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80029d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d1e5      	bne.n	80029a8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029e0:	2b01      	cmp	r3, #1
 80029e2:	d119      	bne.n	8002a18 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	330c      	adds	r3, #12
 80029ea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	e853 3f00 	ldrex	r3, [r3]
 80029f2:	60bb      	str	r3, [r7, #8]
   return(result);
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	f023 0310 	bic.w	r3, r3, #16
 80029fa:	647b      	str	r3, [r7, #68]	@ 0x44
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	330c      	adds	r3, #12
 8002a02:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002a04:	61ba      	str	r2, [r7, #24]
 8002a06:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a08:	6979      	ldr	r1, [r7, #20]
 8002a0a:	69ba      	ldr	r2, [r7, #24]
 8002a0c:	e841 2300 	strex	r3, r2, [r1]
 8002a10:	613b      	str	r3, [r7, #16]
   return(result);
 8002a12:	693b      	ldr	r3, [r7, #16]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d1e5      	bne.n	80029e4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2220      	movs	r2, #32
 8002a1c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2200      	movs	r2, #0
 8002a24:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002a26:	bf00      	nop
 8002a28:	3754      	adds	r7, #84	@ 0x54
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bc80      	pop	{r7}
 8002a2e:	4770      	bx	lr

08002a30 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002a30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a34:	b0c0      	sub	sp, #256	@ 0x100
 8002a36:	af00      	add	r7, sp, #0
 8002a38:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	691b      	ldr	r3, [r3, #16]
 8002a44:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002a48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a4c:	68d9      	ldr	r1, [r3, #12]
 8002a4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a52:	681a      	ldr	r2, [r3, #0]
 8002a54:	ea40 0301 	orr.w	r3, r0, r1
 8002a58:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002a5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a5e:	689a      	ldr	r2, [r3, #8]
 8002a60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a64:	691b      	ldr	r3, [r3, #16]
 8002a66:	431a      	orrs	r2, r3
 8002a68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a6c:	695b      	ldr	r3, [r3, #20]
 8002a6e:	431a      	orrs	r2, r3
 8002a70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a74:	69db      	ldr	r3, [r3, #28]
 8002a76:	4313      	orrs	r3, r2
 8002a78:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002a7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	68db      	ldr	r3, [r3, #12]
 8002a84:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002a88:	f021 010c 	bic.w	r1, r1, #12
 8002a8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a90:	681a      	ldr	r2, [r3, #0]
 8002a92:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002a96:	430b      	orrs	r3, r1
 8002a98:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002a9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	695b      	ldr	r3, [r3, #20]
 8002aa2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002aa6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002aaa:	6999      	ldr	r1, [r3, #24]
 8002aac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ab0:	681a      	ldr	r2, [r3, #0]
 8002ab2:	ea40 0301 	orr.w	r3, r0, r1
 8002ab6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002ab8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002abc:	681a      	ldr	r2, [r3, #0]
 8002abe:	4b91      	ldr	r3, [pc, #580]	@ (8002d04 <UART_SetConfig+0x2d4>)
 8002ac0:	429a      	cmp	r2, r3
 8002ac2:	d005      	beq.n	8002ad0 <UART_SetConfig+0xa0>
 8002ac4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ac8:	681a      	ldr	r2, [r3, #0]
 8002aca:	4b8f      	ldr	r3, [pc, #572]	@ (8002d08 <UART_SetConfig+0x2d8>)
 8002acc:	429a      	cmp	r2, r3
 8002ace:	d104      	bne.n	8002ada <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002ad0:	f7ff f832 	bl	8001b38 <HAL_RCC_GetPCLK2Freq>
 8002ad4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002ad8:	e003      	b.n	8002ae2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002ada:	f7ff f819 	bl	8001b10 <HAL_RCC_GetPCLK1Freq>
 8002ade:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002ae2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ae6:	69db      	ldr	r3, [r3, #28]
 8002ae8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002aec:	f040 8110 	bne.w	8002d10 <UART_SetConfig+0x2e0>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002af0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002af4:	2200      	movs	r2, #0
 8002af6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002afa:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002afe:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002b02:	4622      	mov	r2, r4
 8002b04:	462b      	mov	r3, r5
 8002b06:	1891      	adds	r1, r2, r2
 8002b08:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002b0a:	415b      	adcs	r3, r3
 8002b0c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002b0e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002b12:	4620      	mov	r0, r4
 8002b14:	4629      	mov	r1, r5
 8002b16:	4604      	mov	r4, r0
 8002b18:	eb12 0804 	adds.w	r8, r2, r4
 8002b1c:	460c      	mov	r4, r1
 8002b1e:	eb43 0904 	adc.w	r9, r3, r4
 8002b22:	f04f 0200 	mov.w	r2, #0
 8002b26:	f04f 0300 	mov.w	r3, #0
 8002b2a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002b2e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002b32:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002b36:	4690      	mov	r8, r2
 8002b38:	4699      	mov	r9, r3
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	eb18 0303 	adds.w	r3, r8, r3
 8002b40:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002b44:	460b      	mov	r3, r1
 8002b46:	eb49 0303 	adc.w	r3, r9, r3
 8002b4a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002b4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	2200      	movs	r2, #0
 8002b56:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002b5a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002b5e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002b62:	460b      	mov	r3, r1
 8002b64:	18db      	adds	r3, r3, r3
 8002b66:	653b      	str	r3, [r7, #80]	@ 0x50
 8002b68:	4613      	mov	r3, r2
 8002b6a:	eb42 0303 	adc.w	r3, r2, r3
 8002b6e:	657b      	str	r3, [r7, #84]	@ 0x54
 8002b70:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002b74:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002b78:	f7fd fb7a 	bl	8000270 <__aeabi_uldivmod>
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	460b      	mov	r3, r1
 8002b80:	4b62      	ldr	r3, [pc, #392]	@ (8002d0c <UART_SetConfig+0x2dc>)
 8002b82:	fba3 2302 	umull	r2, r3, r3, r2
 8002b86:	095b      	lsrs	r3, r3, #5
 8002b88:	011c      	lsls	r4, r3, #4
 8002b8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002b8e:	2200      	movs	r2, #0
 8002b90:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002b94:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002b98:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002b9c:	4642      	mov	r2, r8
 8002b9e:	464b      	mov	r3, r9
 8002ba0:	1891      	adds	r1, r2, r2
 8002ba2:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002ba4:	415b      	adcs	r3, r3
 8002ba6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002ba8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002bac:	4645      	mov	r5, r8
 8002bae:	eb12 0a05 	adds.w	sl, r2, r5
 8002bb2:	4640      	mov	r0, r8
 8002bb4:	4649      	mov	r1, r9
 8002bb6:	460d      	mov	r5, r1
 8002bb8:	eb43 0b05 	adc.w	fp, r3, r5
 8002bbc:	f04f 0200 	mov.w	r2, #0
 8002bc0:	f04f 0300 	mov.w	r3, #0
 8002bc4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002bc8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002bcc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002bd0:	4692      	mov	sl, r2
 8002bd2:	469b      	mov	fp, r3
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	eb1a 0303 	adds.w	r3, sl, r3
 8002bda:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002bde:	460b      	mov	r3, r1
 8002be0:	eb4b 0303 	adc.w	r3, fp, r3
 8002be4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002be8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002bf4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002bf8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002bfc:	460b      	mov	r3, r1
 8002bfe:	18db      	adds	r3, r3, r3
 8002c00:	643b      	str	r3, [r7, #64]	@ 0x40
 8002c02:	4613      	mov	r3, r2
 8002c04:	eb42 0303 	adc.w	r3, r2, r3
 8002c08:	647b      	str	r3, [r7, #68]	@ 0x44
 8002c0a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002c0e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002c12:	f7fd fb2d 	bl	8000270 <__aeabi_uldivmod>
 8002c16:	4602      	mov	r2, r0
 8002c18:	460b      	mov	r3, r1
 8002c1a:	4611      	mov	r1, r2
 8002c1c:	4b3b      	ldr	r3, [pc, #236]	@ (8002d0c <UART_SetConfig+0x2dc>)
 8002c1e:	fba3 2301 	umull	r2, r3, r3, r1
 8002c22:	095b      	lsrs	r3, r3, #5
 8002c24:	2264      	movs	r2, #100	@ 0x64
 8002c26:	fb02 f303 	mul.w	r3, r2, r3
 8002c2a:	1acb      	subs	r3, r1, r3
 8002c2c:	00db      	lsls	r3, r3, #3
 8002c2e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002c32:	4b36      	ldr	r3, [pc, #216]	@ (8002d0c <UART_SetConfig+0x2dc>)
 8002c34:	fba3 2302 	umull	r2, r3, r3, r2
 8002c38:	095b      	lsrs	r3, r3, #5
 8002c3a:	005b      	lsls	r3, r3, #1
 8002c3c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002c40:	441c      	add	r4, r3
 8002c42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002c46:	2200      	movs	r2, #0
 8002c48:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002c4c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002c50:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002c54:	4642      	mov	r2, r8
 8002c56:	464b      	mov	r3, r9
 8002c58:	1891      	adds	r1, r2, r2
 8002c5a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002c5c:	415b      	adcs	r3, r3
 8002c5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002c60:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002c64:	4641      	mov	r1, r8
 8002c66:	1851      	adds	r1, r2, r1
 8002c68:	6339      	str	r1, [r7, #48]	@ 0x30
 8002c6a:	4649      	mov	r1, r9
 8002c6c:	414b      	adcs	r3, r1
 8002c6e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002c70:	f04f 0200 	mov.w	r2, #0
 8002c74:	f04f 0300 	mov.w	r3, #0
 8002c78:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002c7c:	4659      	mov	r1, fp
 8002c7e:	00cb      	lsls	r3, r1, #3
 8002c80:	4655      	mov	r5, sl
 8002c82:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8002c86:	4651      	mov	r1, sl
 8002c88:	00ca      	lsls	r2, r1, #3
 8002c8a:	4610      	mov	r0, r2
 8002c8c:	4619      	mov	r1, r3
 8002c8e:	4603      	mov	r3, r0
 8002c90:	4642      	mov	r2, r8
 8002c92:	189b      	adds	r3, r3, r2
 8002c94:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002c98:	464b      	mov	r3, r9
 8002c9a:	460a      	mov	r2, r1
 8002c9c:	eb42 0303 	adc.w	r3, r2, r3
 8002ca0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002ca4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	2200      	movs	r2, #0
 8002cac:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002cb0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002cb4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002cb8:	460b      	mov	r3, r1
 8002cba:	18db      	adds	r3, r3, r3
 8002cbc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002cbe:	4613      	mov	r3, r2
 8002cc0:	eb42 0303 	adc.w	r3, r2, r3
 8002cc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002cc6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002cca:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002cce:	f7fd facf 	bl	8000270 <__aeabi_uldivmod>
 8002cd2:	4602      	mov	r2, r0
 8002cd4:	460b      	mov	r3, r1
 8002cd6:	4b0d      	ldr	r3, [pc, #52]	@ (8002d0c <UART_SetConfig+0x2dc>)
 8002cd8:	fba3 1302 	umull	r1, r3, r3, r2
 8002cdc:	095b      	lsrs	r3, r3, #5
 8002cde:	2164      	movs	r1, #100	@ 0x64
 8002ce0:	fb01 f303 	mul.w	r3, r1, r3
 8002ce4:	1ad3      	subs	r3, r2, r3
 8002ce6:	00db      	lsls	r3, r3, #3
 8002ce8:	3332      	adds	r3, #50	@ 0x32
 8002cea:	4a08      	ldr	r2, [pc, #32]	@ (8002d0c <UART_SetConfig+0x2dc>)
 8002cec:	fba2 2303 	umull	r2, r3, r2, r3
 8002cf0:	095b      	lsrs	r3, r3, #5
 8002cf2:	f003 0207 	and.w	r2, r3, #7
 8002cf6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4422      	add	r2, r4
 8002cfe:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002d00:	e10a      	b.n	8002f18 <UART_SetConfig+0x4e8>
 8002d02:	bf00      	nop
 8002d04:	40011000 	.word	0x40011000
 8002d08:	40011400 	.word	0x40011400
 8002d0c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002d10:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002d14:	2200      	movs	r2, #0
 8002d16:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002d1a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002d1e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002d22:	4642      	mov	r2, r8
 8002d24:	464b      	mov	r3, r9
 8002d26:	1891      	adds	r1, r2, r2
 8002d28:	6239      	str	r1, [r7, #32]
 8002d2a:	415b      	adcs	r3, r3
 8002d2c:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d2e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002d32:	4641      	mov	r1, r8
 8002d34:	1854      	adds	r4, r2, r1
 8002d36:	46cc      	mov	ip, r9
 8002d38:	eb43 050c 	adc.w	r5, r3, ip
 8002d3c:	f04f 0200 	mov.w	r2, #0
 8002d40:	f04f 0300 	mov.w	r3, #0
 8002d44:	00eb      	lsls	r3, r5, #3
 8002d46:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d4a:	00e2      	lsls	r2, r4, #3
 8002d4c:	4614      	mov	r4, r2
 8002d4e:	461d      	mov	r5, r3
 8002d50:	4640      	mov	r0, r8
 8002d52:	4649      	mov	r1, r9
 8002d54:	4603      	mov	r3, r0
 8002d56:	18e3      	adds	r3, r4, r3
 8002d58:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002d5c:	460b      	mov	r3, r1
 8002d5e:	eb45 0303 	adc.w	r3, r5, r3
 8002d62:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002d66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002d72:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002d76:	f04f 0200 	mov.w	r2, #0
 8002d7a:	f04f 0300 	mov.w	r3, #0
 8002d7e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002d82:	4629      	mov	r1, r5
 8002d84:	008b      	lsls	r3, r1, #2
 8002d86:	4620      	mov	r0, r4
 8002d88:	4629      	mov	r1, r5
 8002d8a:	4604      	mov	r4, r0
 8002d8c:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8002d90:	4601      	mov	r1, r0
 8002d92:	008a      	lsls	r2, r1, #2
 8002d94:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002d98:	f7fd fa6a 	bl	8000270 <__aeabi_uldivmod>
 8002d9c:	4602      	mov	r2, r0
 8002d9e:	460b      	mov	r3, r1
 8002da0:	4b60      	ldr	r3, [pc, #384]	@ (8002f24 <UART_SetConfig+0x4f4>)
 8002da2:	fba3 2302 	umull	r2, r3, r3, r2
 8002da6:	095b      	lsrs	r3, r3, #5
 8002da8:	011c      	lsls	r4, r3, #4
 8002daa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002dae:	2200      	movs	r2, #0
 8002db0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002db4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002db8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002dbc:	4642      	mov	r2, r8
 8002dbe:	464b      	mov	r3, r9
 8002dc0:	1891      	adds	r1, r2, r2
 8002dc2:	61b9      	str	r1, [r7, #24]
 8002dc4:	415b      	adcs	r3, r3
 8002dc6:	61fb      	str	r3, [r7, #28]
 8002dc8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002dcc:	4641      	mov	r1, r8
 8002dce:	1851      	adds	r1, r2, r1
 8002dd0:	6139      	str	r1, [r7, #16]
 8002dd2:	4649      	mov	r1, r9
 8002dd4:	414b      	adcs	r3, r1
 8002dd6:	617b      	str	r3, [r7, #20]
 8002dd8:	f04f 0200 	mov.w	r2, #0
 8002ddc:	f04f 0300 	mov.w	r3, #0
 8002de0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002de4:	4659      	mov	r1, fp
 8002de6:	00cb      	lsls	r3, r1, #3
 8002de8:	4655      	mov	r5, sl
 8002dea:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8002dee:	4651      	mov	r1, sl
 8002df0:	00ca      	lsls	r2, r1, #3
 8002df2:	4610      	mov	r0, r2
 8002df4:	4619      	mov	r1, r3
 8002df6:	4603      	mov	r3, r0
 8002df8:	4642      	mov	r2, r8
 8002dfa:	189b      	adds	r3, r3, r2
 8002dfc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002e00:	464b      	mov	r3, r9
 8002e02:	460a      	mov	r2, r1
 8002e04:	eb42 0303 	adc.w	r3, r2, r3
 8002e08:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002e0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	2200      	movs	r2, #0
 8002e14:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002e16:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002e18:	f04f 0200 	mov.w	r2, #0
 8002e1c:	f04f 0300 	mov.w	r3, #0
 8002e20:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002e24:	4649      	mov	r1, r9
 8002e26:	008b      	lsls	r3, r1, #2
 8002e28:	4645      	mov	r5, r8
 8002e2a:	ea43 7395 	orr.w	r3, r3, r5, lsr #30
 8002e2e:	4641      	mov	r1, r8
 8002e30:	008a      	lsls	r2, r1, #2
 8002e32:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002e36:	f7fd fa1b 	bl	8000270 <__aeabi_uldivmod>
 8002e3a:	4602      	mov	r2, r0
 8002e3c:	460b      	mov	r3, r1
 8002e3e:	4611      	mov	r1, r2
 8002e40:	4b38      	ldr	r3, [pc, #224]	@ (8002f24 <UART_SetConfig+0x4f4>)
 8002e42:	fba3 2301 	umull	r2, r3, r3, r1
 8002e46:	095b      	lsrs	r3, r3, #5
 8002e48:	2264      	movs	r2, #100	@ 0x64
 8002e4a:	fb02 f303 	mul.w	r3, r2, r3
 8002e4e:	1acb      	subs	r3, r1, r3
 8002e50:	011b      	lsls	r3, r3, #4
 8002e52:	3332      	adds	r3, #50	@ 0x32
 8002e54:	4a33      	ldr	r2, [pc, #204]	@ (8002f24 <UART_SetConfig+0x4f4>)
 8002e56:	fba2 2303 	umull	r2, r3, r2, r3
 8002e5a:	095b      	lsrs	r3, r3, #5
 8002e5c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002e60:	441c      	add	r4, r3
 8002e62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002e66:	2200      	movs	r2, #0
 8002e68:	673b      	str	r3, [r7, #112]	@ 0x70
 8002e6a:	677a      	str	r2, [r7, #116]	@ 0x74
 8002e6c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002e70:	4642      	mov	r2, r8
 8002e72:	464b      	mov	r3, r9
 8002e74:	1891      	adds	r1, r2, r2
 8002e76:	60b9      	str	r1, [r7, #8]
 8002e78:	415b      	adcs	r3, r3
 8002e7a:	60fb      	str	r3, [r7, #12]
 8002e7c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002e80:	4641      	mov	r1, r8
 8002e82:	1851      	adds	r1, r2, r1
 8002e84:	6039      	str	r1, [r7, #0]
 8002e86:	4649      	mov	r1, r9
 8002e88:	414b      	adcs	r3, r1
 8002e8a:	607b      	str	r3, [r7, #4]
 8002e8c:	f04f 0200 	mov.w	r2, #0
 8002e90:	f04f 0300 	mov.w	r3, #0
 8002e94:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002e98:	4659      	mov	r1, fp
 8002e9a:	00cb      	lsls	r3, r1, #3
 8002e9c:	4655      	mov	r5, sl
 8002e9e:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8002ea2:	4651      	mov	r1, sl
 8002ea4:	00ca      	lsls	r2, r1, #3
 8002ea6:	4610      	mov	r0, r2
 8002ea8:	4619      	mov	r1, r3
 8002eaa:	4603      	mov	r3, r0
 8002eac:	4642      	mov	r2, r8
 8002eae:	189b      	adds	r3, r3, r2
 8002eb0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002eb2:	464b      	mov	r3, r9
 8002eb4:	460a      	mov	r2, r1
 8002eb6:	eb42 0303 	adc.w	r3, r2, r3
 8002eba:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002ebc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	663b      	str	r3, [r7, #96]	@ 0x60
 8002ec6:	667a      	str	r2, [r7, #100]	@ 0x64
 8002ec8:	f04f 0200 	mov.w	r2, #0
 8002ecc:	f04f 0300 	mov.w	r3, #0
 8002ed0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002ed4:	4649      	mov	r1, r9
 8002ed6:	008b      	lsls	r3, r1, #2
 8002ed8:	4645      	mov	r5, r8
 8002eda:	ea43 7395 	orr.w	r3, r3, r5, lsr #30
 8002ede:	4641      	mov	r1, r8
 8002ee0:	008a      	lsls	r2, r1, #2
 8002ee2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002ee6:	f7fd f9c3 	bl	8000270 <__aeabi_uldivmod>
 8002eea:	4602      	mov	r2, r0
 8002eec:	460b      	mov	r3, r1
 8002eee:	4b0d      	ldr	r3, [pc, #52]	@ (8002f24 <UART_SetConfig+0x4f4>)
 8002ef0:	fba3 1302 	umull	r1, r3, r3, r2
 8002ef4:	095b      	lsrs	r3, r3, #5
 8002ef6:	2164      	movs	r1, #100	@ 0x64
 8002ef8:	fb01 f303 	mul.w	r3, r1, r3
 8002efc:	1ad3      	subs	r3, r2, r3
 8002efe:	011b      	lsls	r3, r3, #4
 8002f00:	3332      	adds	r3, #50	@ 0x32
 8002f02:	4a08      	ldr	r2, [pc, #32]	@ (8002f24 <UART_SetConfig+0x4f4>)
 8002f04:	fba2 2303 	umull	r2, r3, r2, r3
 8002f08:	095b      	lsrs	r3, r3, #5
 8002f0a:	f003 020f 	and.w	r2, r3, #15
 8002f0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4422      	add	r2, r4
 8002f16:	609a      	str	r2, [r3, #8]
}
 8002f18:	bf00      	nop
 8002f1a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f24:	51eb851f 	.word	0x51eb851f

08002f28 <siprintf>:
 8002f28:	b40e      	push	{r1, r2, r3}
 8002f2a:	b500      	push	{lr}
 8002f2c:	b09c      	sub	sp, #112	@ 0x70
 8002f2e:	ab1d      	add	r3, sp, #116	@ 0x74
 8002f30:	9002      	str	r0, [sp, #8]
 8002f32:	9006      	str	r0, [sp, #24]
 8002f34:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8002f38:	4809      	ldr	r0, [pc, #36]	@ (8002f60 <siprintf+0x38>)
 8002f3a:	9107      	str	r1, [sp, #28]
 8002f3c:	9104      	str	r1, [sp, #16]
 8002f3e:	4909      	ldr	r1, [pc, #36]	@ (8002f64 <siprintf+0x3c>)
 8002f40:	f853 2b04 	ldr.w	r2, [r3], #4
 8002f44:	9105      	str	r1, [sp, #20]
 8002f46:	6800      	ldr	r0, [r0, #0]
 8002f48:	9301      	str	r3, [sp, #4]
 8002f4a:	a902      	add	r1, sp, #8
 8002f4c:	f000 f994 	bl	8003278 <_svfiprintf_r>
 8002f50:	9b02      	ldr	r3, [sp, #8]
 8002f52:	2200      	movs	r2, #0
 8002f54:	701a      	strb	r2, [r3, #0]
 8002f56:	b01c      	add	sp, #112	@ 0x70
 8002f58:	f85d eb04 	ldr.w	lr, [sp], #4
 8002f5c:	b003      	add	sp, #12
 8002f5e:	4770      	bx	lr
 8002f60:	2000000c 	.word	0x2000000c
 8002f64:	ffff0208 	.word	0xffff0208

08002f68 <memset>:
 8002f68:	4402      	add	r2, r0
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d100      	bne.n	8002f72 <memset+0xa>
 8002f70:	4770      	bx	lr
 8002f72:	f803 1b01 	strb.w	r1, [r3], #1
 8002f76:	e7f9      	b.n	8002f6c <memset+0x4>

08002f78 <__errno>:
 8002f78:	4b01      	ldr	r3, [pc, #4]	@ (8002f80 <__errno+0x8>)
 8002f7a:	6818      	ldr	r0, [r3, #0]
 8002f7c:	4770      	bx	lr
 8002f7e:	bf00      	nop
 8002f80:	2000000c 	.word	0x2000000c

08002f84 <__libc_init_array>:
 8002f84:	b570      	push	{r4, r5, r6, lr}
 8002f86:	4d0d      	ldr	r5, [pc, #52]	@ (8002fbc <__libc_init_array+0x38>)
 8002f88:	4c0d      	ldr	r4, [pc, #52]	@ (8002fc0 <__libc_init_array+0x3c>)
 8002f8a:	1b64      	subs	r4, r4, r5
 8002f8c:	10a4      	asrs	r4, r4, #2
 8002f8e:	2600      	movs	r6, #0
 8002f90:	42a6      	cmp	r6, r4
 8002f92:	d109      	bne.n	8002fa8 <__libc_init_array+0x24>
 8002f94:	4d0b      	ldr	r5, [pc, #44]	@ (8002fc4 <__libc_init_array+0x40>)
 8002f96:	4c0c      	ldr	r4, [pc, #48]	@ (8002fc8 <__libc_init_array+0x44>)
 8002f98:	f000 fc66 	bl	8003868 <_init>
 8002f9c:	1b64      	subs	r4, r4, r5
 8002f9e:	10a4      	asrs	r4, r4, #2
 8002fa0:	2600      	movs	r6, #0
 8002fa2:	42a6      	cmp	r6, r4
 8002fa4:	d105      	bne.n	8002fb2 <__libc_init_array+0x2e>
 8002fa6:	bd70      	pop	{r4, r5, r6, pc}
 8002fa8:	f855 3b04 	ldr.w	r3, [r5], #4
 8002fac:	4798      	blx	r3
 8002fae:	3601      	adds	r6, #1
 8002fb0:	e7ee      	b.n	8002f90 <__libc_init_array+0xc>
 8002fb2:	f855 3b04 	ldr.w	r3, [r5], #4
 8002fb6:	4798      	blx	r3
 8002fb8:	3601      	adds	r6, #1
 8002fba:	e7f2      	b.n	8002fa2 <__libc_init_array+0x1e>
 8002fbc:	080038e8 	.word	0x080038e8
 8002fc0:	080038e8 	.word	0x080038e8
 8002fc4:	080038e8 	.word	0x080038e8
 8002fc8:	080038ec 	.word	0x080038ec

08002fcc <__retarget_lock_acquire_recursive>:
 8002fcc:	4770      	bx	lr

08002fce <__retarget_lock_release_recursive>:
 8002fce:	4770      	bx	lr

08002fd0 <_free_r>:
 8002fd0:	b538      	push	{r3, r4, r5, lr}
 8002fd2:	4605      	mov	r5, r0
 8002fd4:	2900      	cmp	r1, #0
 8002fd6:	d041      	beq.n	800305c <_free_r+0x8c>
 8002fd8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002fdc:	1f0c      	subs	r4, r1, #4
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	bfb8      	it	lt
 8002fe2:	18e4      	addlt	r4, r4, r3
 8002fe4:	f000 f8e0 	bl	80031a8 <__malloc_lock>
 8002fe8:	4a1d      	ldr	r2, [pc, #116]	@ (8003060 <_free_r+0x90>)
 8002fea:	6813      	ldr	r3, [r2, #0]
 8002fec:	b933      	cbnz	r3, 8002ffc <_free_r+0x2c>
 8002fee:	6063      	str	r3, [r4, #4]
 8002ff0:	6014      	str	r4, [r2, #0]
 8002ff2:	4628      	mov	r0, r5
 8002ff4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002ff8:	f000 b8dc 	b.w	80031b4 <__malloc_unlock>
 8002ffc:	42a3      	cmp	r3, r4
 8002ffe:	d908      	bls.n	8003012 <_free_r+0x42>
 8003000:	6820      	ldr	r0, [r4, #0]
 8003002:	1821      	adds	r1, r4, r0
 8003004:	428b      	cmp	r3, r1
 8003006:	bf01      	itttt	eq
 8003008:	6819      	ldreq	r1, [r3, #0]
 800300a:	685b      	ldreq	r3, [r3, #4]
 800300c:	1809      	addeq	r1, r1, r0
 800300e:	6021      	streq	r1, [r4, #0]
 8003010:	e7ed      	b.n	8002fee <_free_r+0x1e>
 8003012:	461a      	mov	r2, r3
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	b10b      	cbz	r3, 800301c <_free_r+0x4c>
 8003018:	42a3      	cmp	r3, r4
 800301a:	d9fa      	bls.n	8003012 <_free_r+0x42>
 800301c:	6811      	ldr	r1, [r2, #0]
 800301e:	1850      	adds	r0, r2, r1
 8003020:	42a0      	cmp	r0, r4
 8003022:	d10b      	bne.n	800303c <_free_r+0x6c>
 8003024:	6820      	ldr	r0, [r4, #0]
 8003026:	4401      	add	r1, r0
 8003028:	1850      	adds	r0, r2, r1
 800302a:	4283      	cmp	r3, r0
 800302c:	6011      	str	r1, [r2, #0]
 800302e:	d1e0      	bne.n	8002ff2 <_free_r+0x22>
 8003030:	6818      	ldr	r0, [r3, #0]
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	6053      	str	r3, [r2, #4]
 8003036:	4408      	add	r0, r1
 8003038:	6010      	str	r0, [r2, #0]
 800303a:	e7da      	b.n	8002ff2 <_free_r+0x22>
 800303c:	d902      	bls.n	8003044 <_free_r+0x74>
 800303e:	230c      	movs	r3, #12
 8003040:	602b      	str	r3, [r5, #0]
 8003042:	e7d6      	b.n	8002ff2 <_free_r+0x22>
 8003044:	6820      	ldr	r0, [r4, #0]
 8003046:	1821      	adds	r1, r4, r0
 8003048:	428b      	cmp	r3, r1
 800304a:	bf04      	itt	eq
 800304c:	6819      	ldreq	r1, [r3, #0]
 800304e:	685b      	ldreq	r3, [r3, #4]
 8003050:	6063      	str	r3, [r4, #4]
 8003052:	bf04      	itt	eq
 8003054:	1809      	addeq	r1, r1, r0
 8003056:	6021      	streq	r1, [r4, #0]
 8003058:	6054      	str	r4, [r2, #4]
 800305a:	e7ca      	b.n	8002ff2 <_free_r+0x22>
 800305c:	bd38      	pop	{r3, r4, r5, pc}
 800305e:	bf00      	nop
 8003060:	20000264 	.word	0x20000264

08003064 <sbrk_aligned>:
 8003064:	b570      	push	{r4, r5, r6, lr}
 8003066:	4e0f      	ldr	r6, [pc, #60]	@ (80030a4 <sbrk_aligned+0x40>)
 8003068:	460c      	mov	r4, r1
 800306a:	6831      	ldr	r1, [r6, #0]
 800306c:	4605      	mov	r5, r0
 800306e:	b911      	cbnz	r1, 8003076 <sbrk_aligned+0x12>
 8003070:	f000 fba6 	bl	80037c0 <_sbrk_r>
 8003074:	6030      	str	r0, [r6, #0]
 8003076:	4621      	mov	r1, r4
 8003078:	4628      	mov	r0, r5
 800307a:	f000 fba1 	bl	80037c0 <_sbrk_r>
 800307e:	1c43      	adds	r3, r0, #1
 8003080:	d103      	bne.n	800308a <sbrk_aligned+0x26>
 8003082:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8003086:	4620      	mov	r0, r4
 8003088:	bd70      	pop	{r4, r5, r6, pc}
 800308a:	1cc4      	adds	r4, r0, #3
 800308c:	f024 0403 	bic.w	r4, r4, #3
 8003090:	42a0      	cmp	r0, r4
 8003092:	d0f8      	beq.n	8003086 <sbrk_aligned+0x22>
 8003094:	1a21      	subs	r1, r4, r0
 8003096:	4628      	mov	r0, r5
 8003098:	f000 fb92 	bl	80037c0 <_sbrk_r>
 800309c:	3001      	adds	r0, #1
 800309e:	d1f2      	bne.n	8003086 <sbrk_aligned+0x22>
 80030a0:	e7ef      	b.n	8003082 <sbrk_aligned+0x1e>
 80030a2:	bf00      	nop
 80030a4:	20000260 	.word	0x20000260

080030a8 <_malloc_r>:
 80030a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80030ac:	1ccd      	adds	r5, r1, #3
 80030ae:	f025 0503 	bic.w	r5, r5, #3
 80030b2:	3508      	adds	r5, #8
 80030b4:	2d0c      	cmp	r5, #12
 80030b6:	bf38      	it	cc
 80030b8:	250c      	movcc	r5, #12
 80030ba:	2d00      	cmp	r5, #0
 80030bc:	4606      	mov	r6, r0
 80030be:	db01      	blt.n	80030c4 <_malloc_r+0x1c>
 80030c0:	42a9      	cmp	r1, r5
 80030c2:	d904      	bls.n	80030ce <_malloc_r+0x26>
 80030c4:	230c      	movs	r3, #12
 80030c6:	6033      	str	r3, [r6, #0]
 80030c8:	2000      	movs	r0, #0
 80030ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80030ce:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80031a4 <_malloc_r+0xfc>
 80030d2:	f000 f869 	bl	80031a8 <__malloc_lock>
 80030d6:	f8d8 3000 	ldr.w	r3, [r8]
 80030da:	461c      	mov	r4, r3
 80030dc:	bb44      	cbnz	r4, 8003130 <_malloc_r+0x88>
 80030de:	4629      	mov	r1, r5
 80030e0:	4630      	mov	r0, r6
 80030e2:	f7ff ffbf 	bl	8003064 <sbrk_aligned>
 80030e6:	1c43      	adds	r3, r0, #1
 80030e8:	4604      	mov	r4, r0
 80030ea:	d158      	bne.n	800319e <_malloc_r+0xf6>
 80030ec:	f8d8 4000 	ldr.w	r4, [r8]
 80030f0:	4627      	mov	r7, r4
 80030f2:	2f00      	cmp	r7, #0
 80030f4:	d143      	bne.n	800317e <_malloc_r+0xd6>
 80030f6:	2c00      	cmp	r4, #0
 80030f8:	d04b      	beq.n	8003192 <_malloc_r+0xea>
 80030fa:	6823      	ldr	r3, [r4, #0]
 80030fc:	4639      	mov	r1, r7
 80030fe:	4630      	mov	r0, r6
 8003100:	eb04 0903 	add.w	r9, r4, r3
 8003104:	f000 fb5c 	bl	80037c0 <_sbrk_r>
 8003108:	4581      	cmp	r9, r0
 800310a:	d142      	bne.n	8003192 <_malloc_r+0xea>
 800310c:	6821      	ldr	r1, [r4, #0]
 800310e:	1a6d      	subs	r5, r5, r1
 8003110:	4629      	mov	r1, r5
 8003112:	4630      	mov	r0, r6
 8003114:	f7ff ffa6 	bl	8003064 <sbrk_aligned>
 8003118:	3001      	adds	r0, #1
 800311a:	d03a      	beq.n	8003192 <_malloc_r+0xea>
 800311c:	6823      	ldr	r3, [r4, #0]
 800311e:	442b      	add	r3, r5
 8003120:	6023      	str	r3, [r4, #0]
 8003122:	f8d8 3000 	ldr.w	r3, [r8]
 8003126:	685a      	ldr	r2, [r3, #4]
 8003128:	bb62      	cbnz	r2, 8003184 <_malloc_r+0xdc>
 800312a:	f8c8 7000 	str.w	r7, [r8]
 800312e:	e00f      	b.n	8003150 <_malloc_r+0xa8>
 8003130:	6822      	ldr	r2, [r4, #0]
 8003132:	1b52      	subs	r2, r2, r5
 8003134:	d420      	bmi.n	8003178 <_malloc_r+0xd0>
 8003136:	2a0b      	cmp	r2, #11
 8003138:	d917      	bls.n	800316a <_malloc_r+0xc2>
 800313a:	1961      	adds	r1, r4, r5
 800313c:	42a3      	cmp	r3, r4
 800313e:	6025      	str	r5, [r4, #0]
 8003140:	bf18      	it	ne
 8003142:	6059      	strne	r1, [r3, #4]
 8003144:	6863      	ldr	r3, [r4, #4]
 8003146:	bf08      	it	eq
 8003148:	f8c8 1000 	streq.w	r1, [r8]
 800314c:	5162      	str	r2, [r4, r5]
 800314e:	604b      	str	r3, [r1, #4]
 8003150:	4630      	mov	r0, r6
 8003152:	f000 f82f 	bl	80031b4 <__malloc_unlock>
 8003156:	f104 000b 	add.w	r0, r4, #11
 800315a:	1d23      	adds	r3, r4, #4
 800315c:	f020 0007 	bic.w	r0, r0, #7
 8003160:	1ac2      	subs	r2, r0, r3
 8003162:	bf1c      	itt	ne
 8003164:	1a1b      	subne	r3, r3, r0
 8003166:	50a3      	strne	r3, [r4, r2]
 8003168:	e7af      	b.n	80030ca <_malloc_r+0x22>
 800316a:	6862      	ldr	r2, [r4, #4]
 800316c:	42a3      	cmp	r3, r4
 800316e:	bf0c      	ite	eq
 8003170:	f8c8 2000 	streq.w	r2, [r8]
 8003174:	605a      	strne	r2, [r3, #4]
 8003176:	e7eb      	b.n	8003150 <_malloc_r+0xa8>
 8003178:	4623      	mov	r3, r4
 800317a:	6864      	ldr	r4, [r4, #4]
 800317c:	e7ae      	b.n	80030dc <_malloc_r+0x34>
 800317e:	463c      	mov	r4, r7
 8003180:	687f      	ldr	r7, [r7, #4]
 8003182:	e7b6      	b.n	80030f2 <_malloc_r+0x4a>
 8003184:	461a      	mov	r2, r3
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	42a3      	cmp	r3, r4
 800318a:	d1fb      	bne.n	8003184 <_malloc_r+0xdc>
 800318c:	2300      	movs	r3, #0
 800318e:	6053      	str	r3, [r2, #4]
 8003190:	e7de      	b.n	8003150 <_malloc_r+0xa8>
 8003192:	230c      	movs	r3, #12
 8003194:	6033      	str	r3, [r6, #0]
 8003196:	4630      	mov	r0, r6
 8003198:	f000 f80c 	bl	80031b4 <__malloc_unlock>
 800319c:	e794      	b.n	80030c8 <_malloc_r+0x20>
 800319e:	6005      	str	r5, [r0, #0]
 80031a0:	e7d6      	b.n	8003150 <_malloc_r+0xa8>
 80031a2:	bf00      	nop
 80031a4:	20000264 	.word	0x20000264

080031a8 <__malloc_lock>:
 80031a8:	4801      	ldr	r0, [pc, #4]	@ (80031b0 <__malloc_lock+0x8>)
 80031aa:	f7ff bf0f 	b.w	8002fcc <__retarget_lock_acquire_recursive>
 80031ae:	bf00      	nop
 80031b0:	2000025c 	.word	0x2000025c

080031b4 <__malloc_unlock>:
 80031b4:	4801      	ldr	r0, [pc, #4]	@ (80031bc <__malloc_unlock+0x8>)
 80031b6:	f7ff bf0a 	b.w	8002fce <__retarget_lock_release_recursive>
 80031ba:	bf00      	nop
 80031bc:	2000025c 	.word	0x2000025c

080031c0 <__ssputs_r>:
 80031c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80031c4:	688e      	ldr	r6, [r1, #8]
 80031c6:	461f      	mov	r7, r3
 80031c8:	42be      	cmp	r6, r7
 80031ca:	680b      	ldr	r3, [r1, #0]
 80031cc:	4682      	mov	sl, r0
 80031ce:	460c      	mov	r4, r1
 80031d0:	4690      	mov	r8, r2
 80031d2:	d82d      	bhi.n	8003230 <__ssputs_r+0x70>
 80031d4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80031d8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80031dc:	d026      	beq.n	800322c <__ssputs_r+0x6c>
 80031de:	6965      	ldr	r5, [r4, #20]
 80031e0:	6909      	ldr	r1, [r1, #16]
 80031e2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80031e6:	eba3 0901 	sub.w	r9, r3, r1
 80031ea:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80031ee:	1c7b      	adds	r3, r7, #1
 80031f0:	444b      	add	r3, r9
 80031f2:	106d      	asrs	r5, r5, #1
 80031f4:	429d      	cmp	r5, r3
 80031f6:	bf38      	it	cc
 80031f8:	461d      	movcc	r5, r3
 80031fa:	0553      	lsls	r3, r2, #21
 80031fc:	d527      	bpl.n	800324e <__ssputs_r+0x8e>
 80031fe:	4629      	mov	r1, r5
 8003200:	f7ff ff52 	bl	80030a8 <_malloc_r>
 8003204:	4606      	mov	r6, r0
 8003206:	b360      	cbz	r0, 8003262 <__ssputs_r+0xa2>
 8003208:	6921      	ldr	r1, [r4, #16]
 800320a:	464a      	mov	r2, r9
 800320c:	f000 fae8 	bl	80037e0 <memcpy>
 8003210:	89a3      	ldrh	r3, [r4, #12]
 8003212:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003216:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800321a:	81a3      	strh	r3, [r4, #12]
 800321c:	6126      	str	r6, [r4, #16]
 800321e:	6165      	str	r5, [r4, #20]
 8003220:	444e      	add	r6, r9
 8003222:	eba5 0509 	sub.w	r5, r5, r9
 8003226:	6026      	str	r6, [r4, #0]
 8003228:	60a5      	str	r5, [r4, #8]
 800322a:	463e      	mov	r6, r7
 800322c:	42be      	cmp	r6, r7
 800322e:	d900      	bls.n	8003232 <__ssputs_r+0x72>
 8003230:	463e      	mov	r6, r7
 8003232:	6820      	ldr	r0, [r4, #0]
 8003234:	4632      	mov	r2, r6
 8003236:	4641      	mov	r1, r8
 8003238:	f000 faa8 	bl	800378c <memmove>
 800323c:	68a3      	ldr	r3, [r4, #8]
 800323e:	1b9b      	subs	r3, r3, r6
 8003240:	60a3      	str	r3, [r4, #8]
 8003242:	6823      	ldr	r3, [r4, #0]
 8003244:	4433      	add	r3, r6
 8003246:	6023      	str	r3, [r4, #0]
 8003248:	2000      	movs	r0, #0
 800324a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800324e:	462a      	mov	r2, r5
 8003250:	f000 fad4 	bl	80037fc <_realloc_r>
 8003254:	4606      	mov	r6, r0
 8003256:	2800      	cmp	r0, #0
 8003258:	d1e0      	bne.n	800321c <__ssputs_r+0x5c>
 800325a:	6921      	ldr	r1, [r4, #16]
 800325c:	4650      	mov	r0, sl
 800325e:	f7ff feb7 	bl	8002fd0 <_free_r>
 8003262:	230c      	movs	r3, #12
 8003264:	f8ca 3000 	str.w	r3, [sl]
 8003268:	89a3      	ldrh	r3, [r4, #12]
 800326a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800326e:	81a3      	strh	r3, [r4, #12]
 8003270:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003274:	e7e9      	b.n	800324a <__ssputs_r+0x8a>
	...

08003278 <_svfiprintf_r>:
 8003278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800327c:	4698      	mov	r8, r3
 800327e:	898b      	ldrh	r3, [r1, #12]
 8003280:	061b      	lsls	r3, r3, #24
 8003282:	b09d      	sub	sp, #116	@ 0x74
 8003284:	4607      	mov	r7, r0
 8003286:	460d      	mov	r5, r1
 8003288:	4614      	mov	r4, r2
 800328a:	d510      	bpl.n	80032ae <_svfiprintf_r+0x36>
 800328c:	690b      	ldr	r3, [r1, #16]
 800328e:	b973      	cbnz	r3, 80032ae <_svfiprintf_r+0x36>
 8003290:	2140      	movs	r1, #64	@ 0x40
 8003292:	f7ff ff09 	bl	80030a8 <_malloc_r>
 8003296:	6028      	str	r0, [r5, #0]
 8003298:	6128      	str	r0, [r5, #16]
 800329a:	b930      	cbnz	r0, 80032aa <_svfiprintf_r+0x32>
 800329c:	230c      	movs	r3, #12
 800329e:	603b      	str	r3, [r7, #0]
 80032a0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80032a4:	b01d      	add	sp, #116	@ 0x74
 80032a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80032aa:	2340      	movs	r3, #64	@ 0x40
 80032ac:	616b      	str	r3, [r5, #20]
 80032ae:	2300      	movs	r3, #0
 80032b0:	9309      	str	r3, [sp, #36]	@ 0x24
 80032b2:	2320      	movs	r3, #32
 80032b4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80032b8:	f8cd 800c 	str.w	r8, [sp, #12]
 80032bc:	2330      	movs	r3, #48	@ 0x30
 80032be:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800345c <_svfiprintf_r+0x1e4>
 80032c2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80032c6:	f04f 0901 	mov.w	r9, #1
 80032ca:	4623      	mov	r3, r4
 80032cc:	469a      	mov	sl, r3
 80032ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80032d2:	b10a      	cbz	r2, 80032d8 <_svfiprintf_r+0x60>
 80032d4:	2a25      	cmp	r2, #37	@ 0x25
 80032d6:	d1f9      	bne.n	80032cc <_svfiprintf_r+0x54>
 80032d8:	ebba 0b04 	subs.w	fp, sl, r4
 80032dc:	d00b      	beq.n	80032f6 <_svfiprintf_r+0x7e>
 80032de:	465b      	mov	r3, fp
 80032e0:	4622      	mov	r2, r4
 80032e2:	4629      	mov	r1, r5
 80032e4:	4638      	mov	r0, r7
 80032e6:	f7ff ff6b 	bl	80031c0 <__ssputs_r>
 80032ea:	3001      	adds	r0, #1
 80032ec:	f000 80a7 	beq.w	800343e <_svfiprintf_r+0x1c6>
 80032f0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80032f2:	445a      	add	r2, fp
 80032f4:	9209      	str	r2, [sp, #36]	@ 0x24
 80032f6:	f89a 3000 	ldrb.w	r3, [sl]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	f000 809f 	beq.w	800343e <_svfiprintf_r+0x1c6>
 8003300:	2300      	movs	r3, #0
 8003302:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003306:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800330a:	f10a 0a01 	add.w	sl, sl, #1
 800330e:	9304      	str	r3, [sp, #16]
 8003310:	9307      	str	r3, [sp, #28]
 8003312:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003316:	931a      	str	r3, [sp, #104]	@ 0x68
 8003318:	4654      	mov	r4, sl
 800331a:	2205      	movs	r2, #5
 800331c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003320:	484e      	ldr	r0, [pc, #312]	@ (800345c <_svfiprintf_r+0x1e4>)
 8003322:	f7fc ff55 	bl	80001d0 <memchr>
 8003326:	9a04      	ldr	r2, [sp, #16]
 8003328:	b9d8      	cbnz	r0, 8003362 <_svfiprintf_r+0xea>
 800332a:	06d0      	lsls	r0, r2, #27
 800332c:	bf44      	itt	mi
 800332e:	2320      	movmi	r3, #32
 8003330:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003334:	0711      	lsls	r1, r2, #28
 8003336:	bf44      	itt	mi
 8003338:	232b      	movmi	r3, #43	@ 0x2b
 800333a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800333e:	f89a 3000 	ldrb.w	r3, [sl]
 8003342:	2b2a      	cmp	r3, #42	@ 0x2a
 8003344:	d015      	beq.n	8003372 <_svfiprintf_r+0xfa>
 8003346:	9a07      	ldr	r2, [sp, #28]
 8003348:	4654      	mov	r4, sl
 800334a:	2000      	movs	r0, #0
 800334c:	f04f 0c0a 	mov.w	ip, #10
 8003350:	4621      	mov	r1, r4
 8003352:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003356:	3b30      	subs	r3, #48	@ 0x30
 8003358:	2b09      	cmp	r3, #9
 800335a:	d94b      	bls.n	80033f4 <_svfiprintf_r+0x17c>
 800335c:	b1b0      	cbz	r0, 800338c <_svfiprintf_r+0x114>
 800335e:	9207      	str	r2, [sp, #28]
 8003360:	e014      	b.n	800338c <_svfiprintf_r+0x114>
 8003362:	eba0 0308 	sub.w	r3, r0, r8
 8003366:	fa09 f303 	lsl.w	r3, r9, r3
 800336a:	4313      	orrs	r3, r2
 800336c:	9304      	str	r3, [sp, #16]
 800336e:	46a2      	mov	sl, r4
 8003370:	e7d2      	b.n	8003318 <_svfiprintf_r+0xa0>
 8003372:	9b03      	ldr	r3, [sp, #12]
 8003374:	1d19      	adds	r1, r3, #4
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	9103      	str	r1, [sp, #12]
 800337a:	2b00      	cmp	r3, #0
 800337c:	bfbb      	ittet	lt
 800337e:	425b      	neglt	r3, r3
 8003380:	f042 0202 	orrlt.w	r2, r2, #2
 8003384:	9307      	strge	r3, [sp, #28]
 8003386:	9307      	strlt	r3, [sp, #28]
 8003388:	bfb8      	it	lt
 800338a:	9204      	strlt	r2, [sp, #16]
 800338c:	7823      	ldrb	r3, [r4, #0]
 800338e:	2b2e      	cmp	r3, #46	@ 0x2e
 8003390:	d10a      	bne.n	80033a8 <_svfiprintf_r+0x130>
 8003392:	7863      	ldrb	r3, [r4, #1]
 8003394:	2b2a      	cmp	r3, #42	@ 0x2a
 8003396:	d132      	bne.n	80033fe <_svfiprintf_r+0x186>
 8003398:	9b03      	ldr	r3, [sp, #12]
 800339a:	1d1a      	adds	r2, r3, #4
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	9203      	str	r2, [sp, #12]
 80033a0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80033a4:	3402      	adds	r4, #2
 80033a6:	9305      	str	r3, [sp, #20]
 80033a8:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8003460 <_svfiprintf_r+0x1e8>
 80033ac:	7821      	ldrb	r1, [r4, #0]
 80033ae:	2203      	movs	r2, #3
 80033b0:	4650      	mov	r0, sl
 80033b2:	f7fc ff0d 	bl	80001d0 <memchr>
 80033b6:	b138      	cbz	r0, 80033c8 <_svfiprintf_r+0x150>
 80033b8:	9b04      	ldr	r3, [sp, #16]
 80033ba:	eba0 000a 	sub.w	r0, r0, sl
 80033be:	2240      	movs	r2, #64	@ 0x40
 80033c0:	4082      	lsls	r2, r0
 80033c2:	4313      	orrs	r3, r2
 80033c4:	3401      	adds	r4, #1
 80033c6:	9304      	str	r3, [sp, #16]
 80033c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80033cc:	4825      	ldr	r0, [pc, #148]	@ (8003464 <_svfiprintf_r+0x1ec>)
 80033ce:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80033d2:	2206      	movs	r2, #6
 80033d4:	f7fc fefc 	bl	80001d0 <memchr>
 80033d8:	2800      	cmp	r0, #0
 80033da:	d036      	beq.n	800344a <_svfiprintf_r+0x1d2>
 80033dc:	4b22      	ldr	r3, [pc, #136]	@ (8003468 <_svfiprintf_r+0x1f0>)
 80033de:	bb1b      	cbnz	r3, 8003428 <_svfiprintf_r+0x1b0>
 80033e0:	9b03      	ldr	r3, [sp, #12]
 80033e2:	3307      	adds	r3, #7
 80033e4:	f023 0307 	bic.w	r3, r3, #7
 80033e8:	3308      	adds	r3, #8
 80033ea:	9303      	str	r3, [sp, #12]
 80033ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80033ee:	4433      	add	r3, r6
 80033f0:	9309      	str	r3, [sp, #36]	@ 0x24
 80033f2:	e76a      	b.n	80032ca <_svfiprintf_r+0x52>
 80033f4:	fb0c 3202 	mla	r2, ip, r2, r3
 80033f8:	460c      	mov	r4, r1
 80033fa:	2001      	movs	r0, #1
 80033fc:	e7a8      	b.n	8003350 <_svfiprintf_r+0xd8>
 80033fe:	2300      	movs	r3, #0
 8003400:	3401      	adds	r4, #1
 8003402:	9305      	str	r3, [sp, #20]
 8003404:	4619      	mov	r1, r3
 8003406:	f04f 0c0a 	mov.w	ip, #10
 800340a:	4620      	mov	r0, r4
 800340c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003410:	3a30      	subs	r2, #48	@ 0x30
 8003412:	2a09      	cmp	r2, #9
 8003414:	d903      	bls.n	800341e <_svfiprintf_r+0x1a6>
 8003416:	2b00      	cmp	r3, #0
 8003418:	d0c6      	beq.n	80033a8 <_svfiprintf_r+0x130>
 800341a:	9105      	str	r1, [sp, #20]
 800341c:	e7c4      	b.n	80033a8 <_svfiprintf_r+0x130>
 800341e:	fb0c 2101 	mla	r1, ip, r1, r2
 8003422:	4604      	mov	r4, r0
 8003424:	2301      	movs	r3, #1
 8003426:	e7f0      	b.n	800340a <_svfiprintf_r+0x192>
 8003428:	ab03      	add	r3, sp, #12
 800342a:	9300      	str	r3, [sp, #0]
 800342c:	462a      	mov	r2, r5
 800342e:	4b0f      	ldr	r3, [pc, #60]	@ (800346c <_svfiprintf_r+0x1f4>)
 8003430:	a904      	add	r1, sp, #16
 8003432:	4638      	mov	r0, r7
 8003434:	f3af 8000 	nop.w
 8003438:	1c42      	adds	r2, r0, #1
 800343a:	4606      	mov	r6, r0
 800343c:	d1d6      	bne.n	80033ec <_svfiprintf_r+0x174>
 800343e:	89ab      	ldrh	r3, [r5, #12]
 8003440:	065b      	lsls	r3, r3, #25
 8003442:	f53f af2d 	bmi.w	80032a0 <_svfiprintf_r+0x28>
 8003446:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003448:	e72c      	b.n	80032a4 <_svfiprintf_r+0x2c>
 800344a:	ab03      	add	r3, sp, #12
 800344c:	9300      	str	r3, [sp, #0]
 800344e:	462a      	mov	r2, r5
 8003450:	4b06      	ldr	r3, [pc, #24]	@ (800346c <_svfiprintf_r+0x1f4>)
 8003452:	a904      	add	r1, sp, #16
 8003454:	4638      	mov	r0, r7
 8003456:	f000 f879 	bl	800354c <_printf_i>
 800345a:	e7ed      	b.n	8003438 <_svfiprintf_r+0x1c0>
 800345c:	080038ac 	.word	0x080038ac
 8003460:	080038b2 	.word	0x080038b2
 8003464:	080038b6 	.word	0x080038b6
 8003468:	00000000 	.word	0x00000000
 800346c:	080031c1 	.word	0x080031c1

08003470 <_printf_common>:
 8003470:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003474:	4616      	mov	r6, r2
 8003476:	4698      	mov	r8, r3
 8003478:	688a      	ldr	r2, [r1, #8]
 800347a:	690b      	ldr	r3, [r1, #16]
 800347c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003480:	4293      	cmp	r3, r2
 8003482:	bfb8      	it	lt
 8003484:	4613      	movlt	r3, r2
 8003486:	6033      	str	r3, [r6, #0]
 8003488:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800348c:	4607      	mov	r7, r0
 800348e:	460c      	mov	r4, r1
 8003490:	b10a      	cbz	r2, 8003496 <_printf_common+0x26>
 8003492:	3301      	adds	r3, #1
 8003494:	6033      	str	r3, [r6, #0]
 8003496:	6823      	ldr	r3, [r4, #0]
 8003498:	0699      	lsls	r1, r3, #26
 800349a:	bf42      	ittt	mi
 800349c:	6833      	ldrmi	r3, [r6, #0]
 800349e:	3302      	addmi	r3, #2
 80034a0:	6033      	strmi	r3, [r6, #0]
 80034a2:	6825      	ldr	r5, [r4, #0]
 80034a4:	f015 0506 	ands.w	r5, r5, #6
 80034a8:	d106      	bne.n	80034b8 <_printf_common+0x48>
 80034aa:	f104 0a19 	add.w	sl, r4, #25
 80034ae:	68e3      	ldr	r3, [r4, #12]
 80034b0:	6832      	ldr	r2, [r6, #0]
 80034b2:	1a9b      	subs	r3, r3, r2
 80034b4:	42ab      	cmp	r3, r5
 80034b6:	dc26      	bgt.n	8003506 <_printf_common+0x96>
 80034b8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80034bc:	6822      	ldr	r2, [r4, #0]
 80034be:	3b00      	subs	r3, #0
 80034c0:	bf18      	it	ne
 80034c2:	2301      	movne	r3, #1
 80034c4:	0692      	lsls	r2, r2, #26
 80034c6:	d42b      	bmi.n	8003520 <_printf_common+0xb0>
 80034c8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80034cc:	4641      	mov	r1, r8
 80034ce:	4638      	mov	r0, r7
 80034d0:	47c8      	blx	r9
 80034d2:	3001      	adds	r0, #1
 80034d4:	d01e      	beq.n	8003514 <_printf_common+0xa4>
 80034d6:	6823      	ldr	r3, [r4, #0]
 80034d8:	6922      	ldr	r2, [r4, #16]
 80034da:	f003 0306 	and.w	r3, r3, #6
 80034de:	2b04      	cmp	r3, #4
 80034e0:	bf02      	ittt	eq
 80034e2:	68e5      	ldreq	r5, [r4, #12]
 80034e4:	6833      	ldreq	r3, [r6, #0]
 80034e6:	1aed      	subeq	r5, r5, r3
 80034e8:	68a3      	ldr	r3, [r4, #8]
 80034ea:	bf0c      	ite	eq
 80034ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80034f0:	2500      	movne	r5, #0
 80034f2:	4293      	cmp	r3, r2
 80034f4:	bfc4      	itt	gt
 80034f6:	1a9b      	subgt	r3, r3, r2
 80034f8:	18ed      	addgt	r5, r5, r3
 80034fa:	2600      	movs	r6, #0
 80034fc:	341a      	adds	r4, #26
 80034fe:	42b5      	cmp	r5, r6
 8003500:	d11a      	bne.n	8003538 <_printf_common+0xc8>
 8003502:	2000      	movs	r0, #0
 8003504:	e008      	b.n	8003518 <_printf_common+0xa8>
 8003506:	2301      	movs	r3, #1
 8003508:	4652      	mov	r2, sl
 800350a:	4641      	mov	r1, r8
 800350c:	4638      	mov	r0, r7
 800350e:	47c8      	blx	r9
 8003510:	3001      	adds	r0, #1
 8003512:	d103      	bne.n	800351c <_printf_common+0xac>
 8003514:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003518:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800351c:	3501      	adds	r5, #1
 800351e:	e7c6      	b.n	80034ae <_printf_common+0x3e>
 8003520:	18e1      	adds	r1, r4, r3
 8003522:	1c5a      	adds	r2, r3, #1
 8003524:	2030      	movs	r0, #48	@ 0x30
 8003526:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800352a:	4422      	add	r2, r4
 800352c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003530:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003534:	3302      	adds	r3, #2
 8003536:	e7c7      	b.n	80034c8 <_printf_common+0x58>
 8003538:	2301      	movs	r3, #1
 800353a:	4622      	mov	r2, r4
 800353c:	4641      	mov	r1, r8
 800353e:	4638      	mov	r0, r7
 8003540:	47c8      	blx	r9
 8003542:	3001      	adds	r0, #1
 8003544:	d0e6      	beq.n	8003514 <_printf_common+0xa4>
 8003546:	3601      	adds	r6, #1
 8003548:	e7d9      	b.n	80034fe <_printf_common+0x8e>
	...

0800354c <_printf_i>:
 800354c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003550:	7e0f      	ldrb	r7, [r1, #24]
 8003552:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003554:	2f78      	cmp	r7, #120	@ 0x78
 8003556:	4691      	mov	r9, r2
 8003558:	4680      	mov	r8, r0
 800355a:	460c      	mov	r4, r1
 800355c:	469a      	mov	sl, r3
 800355e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003562:	d807      	bhi.n	8003574 <_printf_i+0x28>
 8003564:	2f62      	cmp	r7, #98	@ 0x62
 8003566:	d80a      	bhi.n	800357e <_printf_i+0x32>
 8003568:	2f00      	cmp	r7, #0
 800356a:	f000 80d2 	beq.w	8003712 <_printf_i+0x1c6>
 800356e:	2f58      	cmp	r7, #88	@ 0x58
 8003570:	f000 80b9 	beq.w	80036e6 <_printf_i+0x19a>
 8003574:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003578:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800357c:	e03a      	b.n	80035f4 <_printf_i+0xa8>
 800357e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003582:	2b15      	cmp	r3, #21
 8003584:	d8f6      	bhi.n	8003574 <_printf_i+0x28>
 8003586:	a101      	add	r1, pc, #4	@ (adr r1, 800358c <_printf_i+0x40>)
 8003588:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800358c:	080035e5 	.word	0x080035e5
 8003590:	080035f9 	.word	0x080035f9
 8003594:	08003575 	.word	0x08003575
 8003598:	08003575 	.word	0x08003575
 800359c:	08003575 	.word	0x08003575
 80035a0:	08003575 	.word	0x08003575
 80035a4:	080035f9 	.word	0x080035f9
 80035a8:	08003575 	.word	0x08003575
 80035ac:	08003575 	.word	0x08003575
 80035b0:	08003575 	.word	0x08003575
 80035b4:	08003575 	.word	0x08003575
 80035b8:	080036f9 	.word	0x080036f9
 80035bc:	08003623 	.word	0x08003623
 80035c0:	080036b3 	.word	0x080036b3
 80035c4:	08003575 	.word	0x08003575
 80035c8:	08003575 	.word	0x08003575
 80035cc:	0800371b 	.word	0x0800371b
 80035d0:	08003575 	.word	0x08003575
 80035d4:	08003623 	.word	0x08003623
 80035d8:	08003575 	.word	0x08003575
 80035dc:	08003575 	.word	0x08003575
 80035e0:	080036bb 	.word	0x080036bb
 80035e4:	6833      	ldr	r3, [r6, #0]
 80035e6:	1d1a      	adds	r2, r3, #4
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	6032      	str	r2, [r6, #0]
 80035ec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80035f0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80035f4:	2301      	movs	r3, #1
 80035f6:	e09d      	b.n	8003734 <_printf_i+0x1e8>
 80035f8:	6833      	ldr	r3, [r6, #0]
 80035fa:	6820      	ldr	r0, [r4, #0]
 80035fc:	1d19      	adds	r1, r3, #4
 80035fe:	6031      	str	r1, [r6, #0]
 8003600:	0606      	lsls	r6, r0, #24
 8003602:	d501      	bpl.n	8003608 <_printf_i+0xbc>
 8003604:	681d      	ldr	r5, [r3, #0]
 8003606:	e003      	b.n	8003610 <_printf_i+0xc4>
 8003608:	0645      	lsls	r5, r0, #25
 800360a:	d5fb      	bpl.n	8003604 <_printf_i+0xb8>
 800360c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003610:	2d00      	cmp	r5, #0
 8003612:	da03      	bge.n	800361c <_printf_i+0xd0>
 8003614:	232d      	movs	r3, #45	@ 0x2d
 8003616:	426d      	negs	r5, r5
 8003618:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800361c:	4859      	ldr	r0, [pc, #356]	@ (8003784 <_printf_i+0x238>)
 800361e:	230a      	movs	r3, #10
 8003620:	e011      	b.n	8003646 <_printf_i+0xfa>
 8003622:	6821      	ldr	r1, [r4, #0]
 8003624:	6833      	ldr	r3, [r6, #0]
 8003626:	0608      	lsls	r0, r1, #24
 8003628:	f853 5b04 	ldr.w	r5, [r3], #4
 800362c:	d402      	bmi.n	8003634 <_printf_i+0xe8>
 800362e:	0649      	lsls	r1, r1, #25
 8003630:	bf48      	it	mi
 8003632:	b2ad      	uxthmi	r5, r5
 8003634:	2f6f      	cmp	r7, #111	@ 0x6f
 8003636:	4853      	ldr	r0, [pc, #332]	@ (8003784 <_printf_i+0x238>)
 8003638:	6033      	str	r3, [r6, #0]
 800363a:	bf14      	ite	ne
 800363c:	230a      	movne	r3, #10
 800363e:	2308      	moveq	r3, #8
 8003640:	2100      	movs	r1, #0
 8003642:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003646:	6866      	ldr	r6, [r4, #4]
 8003648:	60a6      	str	r6, [r4, #8]
 800364a:	2e00      	cmp	r6, #0
 800364c:	bfa2      	ittt	ge
 800364e:	6821      	ldrge	r1, [r4, #0]
 8003650:	f021 0104 	bicge.w	r1, r1, #4
 8003654:	6021      	strge	r1, [r4, #0]
 8003656:	b90d      	cbnz	r5, 800365c <_printf_i+0x110>
 8003658:	2e00      	cmp	r6, #0
 800365a:	d04b      	beq.n	80036f4 <_printf_i+0x1a8>
 800365c:	4616      	mov	r6, r2
 800365e:	fbb5 f1f3 	udiv	r1, r5, r3
 8003662:	fb03 5711 	mls	r7, r3, r1, r5
 8003666:	5dc7      	ldrb	r7, [r0, r7]
 8003668:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800366c:	462f      	mov	r7, r5
 800366e:	42bb      	cmp	r3, r7
 8003670:	460d      	mov	r5, r1
 8003672:	d9f4      	bls.n	800365e <_printf_i+0x112>
 8003674:	2b08      	cmp	r3, #8
 8003676:	d10b      	bne.n	8003690 <_printf_i+0x144>
 8003678:	6823      	ldr	r3, [r4, #0]
 800367a:	07df      	lsls	r7, r3, #31
 800367c:	d508      	bpl.n	8003690 <_printf_i+0x144>
 800367e:	6923      	ldr	r3, [r4, #16]
 8003680:	6861      	ldr	r1, [r4, #4]
 8003682:	4299      	cmp	r1, r3
 8003684:	bfde      	ittt	le
 8003686:	2330      	movle	r3, #48	@ 0x30
 8003688:	f806 3c01 	strble.w	r3, [r6, #-1]
 800368c:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8003690:	1b92      	subs	r2, r2, r6
 8003692:	6122      	str	r2, [r4, #16]
 8003694:	f8cd a000 	str.w	sl, [sp]
 8003698:	464b      	mov	r3, r9
 800369a:	aa03      	add	r2, sp, #12
 800369c:	4621      	mov	r1, r4
 800369e:	4640      	mov	r0, r8
 80036a0:	f7ff fee6 	bl	8003470 <_printf_common>
 80036a4:	3001      	adds	r0, #1
 80036a6:	d14a      	bne.n	800373e <_printf_i+0x1f2>
 80036a8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80036ac:	b004      	add	sp, #16
 80036ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80036b2:	6823      	ldr	r3, [r4, #0]
 80036b4:	f043 0320 	orr.w	r3, r3, #32
 80036b8:	6023      	str	r3, [r4, #0]
 80036ba:	4833      	ldr	r0, [pc, #204]	@ (8003788 <_printf_i+0x23c>)
 80036bc:	2778      	movs	r7, #120	@ 0x78
 80036be:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80036c2:	6823      	ldr	r3, [r4, #0]
 80036c4:	6831      	ldr	r1, [r6, #0]
 80036c6:	061f      	lsls	r7, r3, #24
 80036c8:	f851 5b04 	ldr.w	r5, [r1], #4
 80036cc:	d402      	bmi.n	80036d4 <_printf_i+0x188>
 80036ce:	065f      	lsls	r7, r3, #25
 80036d0:	bf48      	it	mi
 80036d2:	b2ad      	uxthmi	r5, r5
 80036d4:	6031      	str	r1, [r6, #0]
 80036d6:	07d9      	lsls	r1, r3, #31
 80036d8:	bf44      	itt	mi
 80036da:	f043 0320 	orrmi.w	r3, r3, #32
 80036de:	6023      	strmi	r3, [r4, #0]
 80036e0:	b11d      	cbz	r5, 80036ea <_printf_i+0x19e>
 80036e2:	2310      	movs	r3, #16
 80036e4:	e7ac      	b.n	8003640 <_printf_i+0xf4>
 80036e6:	4827      	ldr	r0, [pc, #156]	@ (8003784 <_printf_i+0x238>)
 80036e8:	e7e9      	b.n	80036be <_printf_i+0x172>
 80036ea:	6823      	ldr	r3, [r4, #0]
 80036ec:	f023 0320 	bic.w	r3, r3, #32
 80036f0:	6023      	str	r3, [r4, #0]
 80036f2:	e7f6      	b.n	80036e2 <_printf_i+0x196>
 80036f4:	4616      	mov	r6, r2
 80036f6:	e7bd      	b.n	8003674 <_printf_i+0x128>
 80036f8:	6833      	ldr	r3, [r6, #0]
 80036fa:	6825      	ldr	r5, [r4, #0]
 80036fc:	6961      	ldr	r1, [r4, #20]
 80036fe:	1d18      	adds	r0, r3, #4
 8003700:	6030      	str	r0, [r6, #0]
 8003702:	062e      	lsls	r6, r5, #24
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	d501      	bpl.n	800370c <_printf_i+0x1c0>
 8003708:	6019      	str	r1, [r3, #0]
 800370a:	e002      	b.n	8003712 <_printf_i+0x1c6>
 800370c:	0668      	lsls	r0, r5, #25
 800370e:	d5fb      	bpl.n	8003708 <_printf_i+0x1bc>
 8003710:	8019      	strh	r1, [r3, #0]
 8003712:	2300      	movs	r3, #0
 8003714:	6123      	str	r3, [r4, #16]
 8003716:	4616      	mov	r6, r2
 8003718:	e7bc      	b.n	8003694 <_printf_i+0x148>
 800371a:	6833      	ldr	r3, [r6, #0]
 800371c:	1d1a      	adds	r2, r3, #4
 800371e:	6032      	str	r2, [r6, #0]
 8003720:	681e      	ldr	r6, [r3, #0]
 8003722:	6862      	ldr	r2, [r4, #4]
 8003724:	2100      	movs	r1, #0
 8003726:	4630      	mov	r0, r6
 8003728:	f7fc fd52 	bl	80001d0 <memchr>
 800372c:	b108      	cbz	r0, 8003732 <_printf_i+0x1e6>
 800372e:	1b80      	subs	r0, r0, r6
 8003730:	6060      	str	r0, [r4, #4]
 8003732:	6863      	ldr	r3, [r4, #4]
 8003734:	6123      	str	r3, [r4, #16]
 8003736:	2300      	movs	r3, #0
 8003738:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800373c:	e7aa      	b.n	8003694 <_printf_i+0x148>
 800373e:	6923      	ldr	r3, [r4, #16]
 8003740:	4632      	mov	r2, r6
 8003742:	4649      	mov	r1, r9
 8003744:	4640      	mov	r0, r8
 8003746:	47d0      	blx	sl
 8003748:	3001      	adds	r0, #1
 800374a:	d0ad      	beq.n	80036a8 <_printf_i+0x15c>
 800374c:	6823      	ldr	r3, [r4, #0]
 800374e:	079b      	lsls	r3, r3, #30
 8003750:	d413      	bmi.n	800377a <_printf_i+0x22e>
 8003752:	68e0      	ldr	r0, [r4, #12]
 8003754:	9b03      	ldr	r3, [sp, #12]
 8003756:	4298      	cmp	r0, r3
 8003758:	bfb8      	it	lt
 800375a:	4618      	movlt	r0, r3
 800375c:	e7a6      	b.n	80036ac <_printf_i+0x160>
 800375e:	2301      	movs	r3, #1
 8003760:	4632      	mov	r2, r6
 8003762:	4649      	mov	r1, r9
 8003764:	4640      	mov	r0, r8
 8003766:	47d0      	blx	sl
 8003768:	3001      	adds	r0, #1
 800376a:	d09d      	beq.n	80036a8 <_printf_i+0x15c>
 800376c:	3501      	adds	r5, #1
 800376e:	68e3      	ldr	r3, [r4, #12]
 8003770:	9903      	ldr	r1, [sp, #12]
 8003772:	1a5b      	subs	r3, r3, r1
 8003774:	42ab      	cmp	r3, r5
 8003776:	dcf2      	bgt.n	800375e <_printf_i+0x212>
 8003778:	e7eb      	b.n	8003752 <_printf_i+0x206>
 800377a:	2500      	movs	r5, #0
 800377c:	f104 0619 	add.w	r6, r4, #25
 8003780:	e7f5      	b.n	800376e <_printf_i+0x222>
 8003782:	bf00      	nop
 8003784:	080038bd 	.word	0x080038bd
 8003788:	080038ce 	.word	0x080038ce

0800378c <memmove>:
 800378c:	4288      	cmp	r0, r1
 800378e:	b510      	push	{r4, lr}
 8003790:	eb01 0402 	add.w	r4, r1, r2
 8003794:	d902      	bls.n	800379c <memmove+0x10>
 8003796:	4284      	cmp	r4, r0
 8003798:	4623      	mov	r3, r4
 800379a:	d807      	bhi.n	80037ac <memmove+0x20>
 800379c:	1e43      	subs	r3, r0, #1
 800379e:	42a1      	cmp	r1, r4
 80037a0:	d008      	beq.n	80037b4 <memmove+0x28>
 80037a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80037a6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80037aa:	e7f8      	b.n	800379e <memmove+0x12>
 80037ac:	4402      	add	r2, r0
 80037ae:	4601      	mov	r1, r0
 80037b0:	428a      	cmp	r2, r1
 80037b2:	d100      	bne.n	80037b6 <memmove+0x2a>
 80037b4:	bd10      	pop	{r4, pc}
 80037b6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80037ba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80037be:	e7f7      	b.n	80037b0 <memmove+0x24>

080037c0 <_sbrk_r>:
 80037c0:	b538      	push	{r3, r4, r5, lr}
 80037c2:	4d06      	ldr	r5, [pc, #24]	@ (80037dc <_sbrk_r+0x1c>)
 80037c4:	2300      	movs	r3, #0
 80037c6:	4604      	mov	r4, r0
 80037c8:	4608      	mov	r0, r1
 80037ca:	602b      	str	r3, [r5, #0]
 80037cc:	f7fd f99e 	bl	8000b0c <_sbrk>
 80037d0:	1c43      	adds	r3, r0, #1
 80037d2:	d102      	bne.n	80037da <_sbrk_r+0x1a>
 80037d4:	682b      	ldr	r3, [r5, #0]
 80037d6:	b103      	cbz	r3, 80037da <_sbrk_r+0x1a>
 80037d8:	6023      	str	r3, [r4, #0]
 80037da:	bd38      	pop	{r3, r4, r5, pc}
 80037dc:	20000258 	.word	0x20000258

080037e0 <memcpy>:
 80037e0:	440a      	add	r2, r1
 80037e2:	4291      	cmp	r1, r2
 80037e4:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80037e8:	d100      	bne.n	80037ec <memcpy+0xc>
 80037ea:	4770      	bx	lr
 80037ec:	b510      	push	{r4, lr}
 80037ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80037f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80037f6:	4291      	cmp	r1, r2
 80037f8:	d1f9      	bne.n	80037ee <memcpy+0xe>
 80037fa:	bd10      	pop	{r4, pc}

080037fc <_realloc_r>:
 80037fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003800:	4680      	mov	r8, r0
 8003802:	4615      	mov	r5, r2
 8003804:	460c      	mov	r4, r1
 8003806:	b921      	cbnz	r1, 8003812 <_realloc_r+0x16>
 8003808:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800380c:	4611      	mov	r1, r2
 800380e:	f7ff bc4b 	b.w	80030a8 <_malloc_r>
 8003812:	b92a      	cbnz	r2, 8003820 <_realloc_r+0x24>
 8003814:	f7ff fbdc 	bl	8002fd0 <_free_r>
 8003818:	2400      	movs	r4, #0
 800381a:	4620      	mov	r0, r4
 800381c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003820:	f000 f81a 	bl	8003858 <_malloc_usable_size_r>
 8003824:	4285      	cmp	r5, r0
 8003826:	4606      	mov	r6, r0
 8003828:	d802      	bhi.n	8003830 <_realloc_r+0x34>
 800382a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800382e:	d8f4      	bhi.n	800381a <_realloc_r+0x1e>
 8003830:	4629      	mov	r1, r5
 8003832:	4640      	mov	r0, r8
 8003834:	f7ff fc38 	bl	80030a8 <_malloc_r>
 8003838:	4607      	mov	r7, r0
 800383a:	2800      	cmp	r0, #0
 800383c:	d0ec      	beq.n	8003818 <_realloc_r+0x1c>
 800383e:	42b5      	cmp	r5, r6
 8003840:	462a      	mov	r2, r5
 8003842:	4621      	mov	r1, r4
 8003844:	bf28      	it	cs
 8003846:	4632      	movcs	r2, r6
 8003848:	f7ff ffca 	bl	80037e0 <memcpy>
 800384c:	4621      	mov	r1, r4
 800384e:	4640      	mov	r0, r8
 8003850:	f7ff fbbe 	bl	8002fd0 <_free_r>
 8003854:	463c      	mov	r4, r7
 8003856:	e7e0      	b.n	800381a <_realloc_r+0x1e>

08003858 <_malloc_usable_size_r>:
 8003858:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800385c:	1f18      	subs	r0, r3, #4
 800385e:	2b00      	cmp	r3, #0
 8003860:	bfbc      	itt	lt
 8003862:	580b      	ldrlt	r3, [r1, r0]
 8003864:	18c0      	addlt	r0, r0, r3
 8003866:	4770      	bx	lr

08003868 <_init>:
 8003868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800386a:	bf00      	nop
 800386c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800386e:	bc08      	pop	{r3}
 8003870:	469e      	mov	lr, r3
 8003872:	4770      	bx	lr

08003874 <_fini>:
 8003874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003876:	bf00      	nop
 8003878:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800387a:	bc08      	pop	{r3}
 800387c:	469e      	mov	lr, r3
 800387e:	4770      	bx	lr
