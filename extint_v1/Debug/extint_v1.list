
extint_v1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000044c  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080005d4  080005d4  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080005d4  080005d4  00002004  2**0
                  CONTENTS
  4 .ARM          00000000  080005d4  080005d4  00002004  2**0
                  CONTENTS
  5 .preinit_array 00000000  080005d4  080005d4  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080005d4  080005d4  000015d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080005d8  080005d8  000015d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  080005dc  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00002004  2**0
                  CONTENTS
 10 .bss          0000001c  20000004  20000004  00002004  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000020  20000020  00002004  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
 13 .debug_info   000014ec  00000000  00000000  0000202e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000530  00000000  00000000  0000351a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000100  00000000  00000000  00003a50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000a9  00000000  00000000  00003b50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000180f0  00000000  00000000  00003bf9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001457  00000000  00000000  0001bce9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008bd42  00000000  00000000  0001d140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000a8e82  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000270  00000000  00000000  000a8ec8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loclists 0000001f  00000000  00000000  000a9138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000005f  00000000  00000000  000a9157  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080005bc 	.word	0x080005bc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	080005bc 	.word	0x080005bc

080001c8 <DelayMs>:
uint32_t DWT_Init(void);

#ifndef DELAY_MS
#define DELAY_MS

static inline void DelayMs(volatile uint32_t ms) {
 80001c8:	b480      	push	{r7}
 80001ca:	b085      	sub	sp, #20
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
	uint32_t init_ticks = DWT->CYCCNT;
 80001d0:	4b0e      	ldr	r3, [pc, #56]	@ (800020c <DelayMs+0x44>)
 80001d2:	685b      	ldr	r3, [r3, #4]
 80001d4:	60fb      	str	r3, [r7, #12]
	uint32_t ticks = (SystemCoreClock / 1000);
 80001d6:	4b0e      	ldr	r3, [pc, #56]	@ (8000210 <DelayMs+0x48>)
 80001d8:	681b      	ldr	r3, [r3, #0]
 80001da:	4a0e      	ldr	r2, [pc, #56]	@ (8000214 <DelayMs+0x4c>)
 80001dc:	fba2 2303 	umull	r2, r3, r2, r3
 80001e0:	099b      	lsrs	r3, r3, #6
 80001e2:	60bb      	str	r3, [r7, #8]
	ms *= ticks;
 80001e4:	687b      	ldr	r3, [r7, #4]
 80001e6:	68ba      	ldr	r2, [r7, #8]
 80001e8:	fb02 f303 	mul.w	r3, r2, r3
 80001ec:	607b      	str	r3, [r7, #4]
	while ((DWT->CYCCNT - init_ticks) < ms);
 80001ee:	bf00      	nop
 80001f0:	4b06      	ldr	r3, [pc, #24]	@ (800020c <DelayMs+0x44>)
 80001f2:	685a      	ldr	r2, [r3, #4]
 80001f4:	68fb      	ldr	r3, [r7, #12]
 80001f6:	1ad2      	subs	r2, r2, r3
 80001f8:	687b      	ldr	r3, [r7, #4]
 80001fa:	429a      	cmp	r2, r3
 80001fc:	d3f8      	bcc.n	80001f0 <DelayMs+0x28>
}
 80001fe:	bf00      	nop
 8000200:	bf00      	nop
 8000202:	3714      	adds	r7, #20
 8000204:	46bd      	mov	sp, r7
 8000206:	bc80      	pop	{r7}
 8000208:	4770      	bx	lr
 800020a:	bf00      	nop
 800020c:	e0001000 	.word	0xe0001000
 8000210:	20000000 	.word	0x20000000
 8000214:	10624dd3 	.word	0x10624dd3

08000218 <LedInit>:
Date: Sep 19, 2024
*/

#include "led.h"

void LedInit(uint32_t pin) {
 8000218:	b480      	push	{r7}
 800021a:	b083      	sub	sp, #12
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
	// enable GPIOD clock -- RCC AHB1ENR[GPIO_CLKEN] = 1
	RCC->AHB1ENR |= BV(GPIO_LED_CLKEN);
 8000220:	4b28      	ldr	r3, [pc, #160]	@ (80002c4 <LedInit+0xac>)
 8000222:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000224:	4a27      	ldr	r2, [pc, #156]	@ (80002c4 <LedInit+0xac>)
 8000226:	f043 0308 	orr.w	r3, r3, #8
 800022a:	6313      	str	r3, [r2, #48]	@ 0x30
	// config GPIOD.pin as output -- MODER[2*pin+1:2*pin] - 01
	GPIO_LED->MODER &= ~BV(pin*2+1);
 800022c:	4b26      	ldr	r3, [pc, #152]	@ (80002c8 <LedInit+0xb0>)
 800022e:	681b      	ldr	r3, [r3, #0]
 8000230:	687a      	ldr	r2, [r7, #4]
 8000232:	0052      	lsls	r2, r2, #1
 8000234:	3201      	adds	r2, #1
 8000236:	2101      	movs	r1, #1
 8000238:	fa01 f202 	lsl.w	r2, r1, r2
 800023c:	43d2      	mvns	r2, r2
 800023e:	4611      	mov	r1, r2
 8000240:	4a21      	ldr	r2, [pc, #132]	@ (80002c8 <LedInit+0xb0>)
 8000242:	400b      	ands	r3, r1
 8000244:	6013      	str	r3, [r2, #0]
	GPIO_LED->MODER |= BV(pin*2);
 8000246:	4b20      	ldr	r3, [pc, #128]	@ (80002c8 <LedInit+0xb0>)
 8000248:	681b      	ldr	r3, [r3, #0]
 800024a:	687a      	ldr	r2, [r7, #4]
 800024c:	0052      	lsls	r2, r2, #1
 800024e:	2101      	movs	r1, #1
 8000250:	fa01 f202 	lsl.w	r2, r1, r2
 8000254:	4611      	mov	r1, r2
 8000256:	4a1c      	ldr	r2, [pc, #112]	@ (80002c8 <LedInit+0xb0>)
 8000258:	430b      	orrs	r3, r1
 800025a:	6013      	str	r3, [r2, #0]
	// config GPIOD.pin as pushpull -- OTYPER[pin] - 0
	GPIO_LED->OTYPER &= ~BV(pin);
 800025c:	4b1a      	ldr	r3, [pc, #104]	@ (80002c8 <LedInit+0xb0>)
 800025e:	685b      	ldr	r3, [r3, #4]
 8000260:	2101      	movs	r1, #1
 8000262:	687a      	ldr	r2, [r7, #4]
 8000264:	fa01 f202 	lsl.w	r2, r1, r2
 8000268:	43d2      	mvns	r2, r2
 800026a:	4611      	mov	r1, r2
 800026c:	4a16      	ldr	r2, [pc, #88]	@ (80002c8 <LedInit+0xb0>)
 800026e:	400b      	ands	r3, r1
 8000270:	6053      	str	r3, [r2, #4]
	// config GPIOD.pin as low-speed -- OSPEEDR[2*pin+1:2*pin] - 00
	GPIO_LED->OSPEEDR &= ~(BV(pin*2+1) | BV(pin*2));
 8000272:	4b15      	ldr	r3, [pc, #84]	@ (80002c8 <LedInit+0xb0>)
 8000274:	689b      	ldr	r3, [r3, #8]
 8000276:	687a      	ldr	r2, [r7, #4]
 8000278:	0052      	lsls	r2, r2, #1
 800027a:	3201      	adds	r2, #1
 800027c:	2101      	movs	r1, #1
 800027e:	4091      	lsls	r1, r2
 8000280:	687a      	ldr	r2, [r7, #4]
 8000282:	0052      	lsls	r2, r2, #1
 8000284:	2001      	movs	r0, #1
 8000286:	fa00 f202 	lsl.w	r2, r0, r2
 800028a:	430a      	orrs	r2, r1
 800028c:	43d2      	mvns	r2, r2
 800028e:	4611      	mov	r1, r2
 8000290:	4a0d      	ldr	r2, [pc, #52]	@ (80002c8 <LedInit+0xb0>)
 8000292:	400b      	ands	r3, r1
 8000294:	6093      	str	r3, [r2, #8]
	// config GPIOD.pin with no pullup & pulldown resistor PUPDR[2*pin+1:2*pin] -- 00
	GPIO_LED->PUPDR &= ~(BV(pin*2+1) | BV(pin*2));
 8000296:	4b0c      	ldr	r3, [pc, #48]	@ (80002c8 <LedInit+0xb0>)
 8000298:	68db      	ldr	r3, [r3, #12]
 800029a:	687a      	ldr	r2, [r7, #4]
 800029c:	0052      	lsls	r2, r2, #1
 800029e:	3201      	adds	r2, #1
 80002a0:	2101      	movs	r1, #1
 80002a2:	4091      	lsls	r1, r2
 80002a4:	687a      	ldr	r2, [r7, #4]
 80002a6:	0052      	lsls	r2, r2, #1
 80002a8:	2001      	movs	r0, #1
 80002aa:	fa00 f202 	lsl.w	r2, r0, r2
 80002ae:	430a      	orrs	r2, r1
 80002b0:	43d2      	mvns	r2, r2
 80002b2:	4611      	mov	r1, r2
 80002b4:	4a04      	ldr	r2, [pc, #16]	@ (80002c8 <LedInit+0xb0>)
 80002b6:	400b      	ands	r3, r1
 80002b8:	60d3      	str	r3, [r2, #12]
}
 80002ba:	bf00      	nop
 80002bc:	370c      	adds	r7, #12
 80002be:	46bd      	mov	sp, r7
 80002c0:	bc80      	pop	{r7}
 80002c2:	4770      	bx	lr
 80002c4:	40023800 	.word	0x40023800
 80002c8:	40020c00 	.word	0x40020c00

080002cc <LedOn>:

void LedOn(uint32_t pin) {
 80002cc:	b480      	push	{r7}
 80002ce:	b083      	sub	sp, #12
 80002d0:	af00      	add	r7, sp, #0
 80002d2:	6078      	str	r0, [r7, #4]
	// GPIOD.pin -- ODR[pin] = 1
	GPIO_LED->ODR |= BV(pin);
 80002d4:	4b07      	ldr	r3, [pc, #28]	@ (80002f4 <LedOn+0x28>)
 80002d6:	695b      	ldr	r3, [r3, #20]
 80002d8:	2101      	movs	r1, #1
 80002da:	687a      	ldr	r2, [r7, #4]
 80002dc:	fa01 f202 	lsl.w	r2, r1, r2
 80002e0:	4611      	mov	r1, r2
 80002e2:	4a04      	ldr	r2, [pc, #16]	@ (80002f4 <LedOn+0x28>)
 80002e4:	430b      	orrs	r3, r1
 80002e6:	6153      	str	r3, [r2, #20]
}
 80002e8:	bf00      	nop
 80002ea:	370c      	adds	r7, #12
 80002ec:	46bd      	mov	sp, r7
 80002ee:	bc80      	pop	{r7}
 80002f0:	4770      	bx	lr
 80002f2:	bf00      	nop
 80002f4:	40020c00 	.word	0x40020c00

080002f8 <LedOff>:

void LedOff(uint32_t pin) {
 80002f8:	b480      	push	{r7}
 80002fa:	b083      	sub	sp, #12
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	6078      	str	r0, [r7, #4]
	// GPIOD.pin -- ODR[pin] = 0
	GPIO_LED->ODR &= ~BV(pin);
 8000300:	4b07      	ldr	r3, [pc, #28]	@ (8000320 <LedOff+0x28>)
 8000302:	695b      	ldr	r3, [r3, #20]
 8000304:	2101      	movs	r1, #1
 8000306:	687a      	ldr	r2, [r7, #4]
 8000308:	fa01 f202 	lsl.w	r2, r1, r2
 800030c:	43d2      	mvns	r2, r2
 800030e:	4611      	mov	r1, r2
 8000310:	4a03      	ldr	r2, [pc, #12]	@ (8000320 <LedOff+0x28>)
 8000312:	400b      	ands	r3, r1
 8000314:	6153      	str	r3, [r2, #20]
}
 8000316:	bf00      	nop
 8000318:	370c      	adds	r7, #12
 800031a:	46bd      	mov	sp, r7
 800031c:	bc80      	pop	{r7}
 800031e:	4770      	bx	lr
 8000320:	40020c00 	.word	0x40020c00

08000324 <LedBlink>:

void LedBlink(uint32_t pin, uint32_t delayMs) {
 8000324:	b580      	push	{r7, lr}
 8000326:	b082      	sub	sp, #8
 8000328:	af00      	add	r7, sp, #0
 800032a:	6078      	str	r0, [r7, #4]
 800032c:	6039      	str	r1, [r7, #0]
	LedOn(pin);
 800032e:	6878      	ldr	r0, [r7, #4]
 8000330:	f7ff ffcc 	bl	80002cc <LedOn>
	DelayMs(delayMs);
 8000334:	6838      	ldr	r0, [r7, #0]
 8000336:	f7ff ff47 	bl	80001c8 <DelayMs>
	LedOff(pin);
 800033a:	6878      	ldr	r0, [r7, #4]
 800033c:	f7ff ffdc 	bl	80002f8 <LedOff>
}
 8000340:	bf00      	nop
 8000342:	3708      	adds	r7, #8
 8000344:	46bd      	mov	sp, r7
 8000346:	bd80      	pop	{r7, pc}

08000348 <LedToggle>:

void LedToggle(uint32_t pin) {
 8000348:	b480      	push	{r7}
 800034a:	b083      	sub	sp, #12
 800034c:	af00      	add	r7, sp, #0
 800034e:	6078      	str	r0, [r7, #4]
	// GPIOD.pin -- ODR[pin] ^= 1
	GPIO_LED->ODR ^= BV(pin);
 8000350:	4b07      	ldr	r3, [pc, #28]	@ (8000370 <LedToggle+0x28>)
 8000352:	695b      	ldr	r3, [r3, #20]
 8000354:	2101      	movs	r1, #1
 8000356:	687a      	ldr	r2, [r7, #4]
 8000358:	fa01 f202 	lsl.w	r2, r1, r2
 800035c:	4611      	mov	r1, r2
 800035e:	4a04      	ldr	r2, [pc, #16]	@ (8000370 <LedToggle+0x28>)
 8000360:	404b      	eors	r3, r1
 8000362:	6153      	str	r3, [r2, #20]
}
 8000364:	bf00      	nop
 8000366:	370c      	adds	r7, #12
 8000368:	46bd      	mov	sp, r7
 800036a:	bc80      	pop	{r7}
 800036c:	4770      	bx	lr
 800036e:	bf00      	nop
 8000370:	40020c00 	.word	0x40020c00

08000374 <DelayMs>:
static inline void DelayMs(volatile uint32_t ms) {
 8000374:	b480      	push	{r7}
 8000376:	b085      	sub	sp, #20
 8000378:	af00      	add	r7, sp, #0
 800037a:	6078      	str	r0, [r7, #4]
	uint32_t init_ticks = DWT->CYCCNT;
 800037c:	4b0e      	ldr	r3, [pc, #56]	@ (80003b8 <DelayMs+0x44>)
 800037e:	685b      	ldr	r3, [r3, #4]
 8000380:	60fb      	str	r3, [r7, #12]
	uint32_t ticks = (SystemCoreClock / 1000);
 8000382:	4b0e      	ldr	r3, [pc, #56]	@ (80003bc <DelayMs+0x48>)
 8000384:	681b      	ldr	r3, [r3, #0]
 8000386:	4a0e      	ldr	r2, [pc, #56]	@ (80003c0 <DelayMs+0x4c>)
 8000388:	fba2 2303 	umull	r2, r3, r2, r3
 800038c:	099b      	lsrs	r3, r3, #6
 800038e:	60bb      	str	r3, [r7, #8]
	ms *= ticks;
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	68ba      	ldr	r2, [r7, #8]
 8000394:	fb02 f303 	mul.w	r3, r2, r3
 8000398:	607b      	str	r3, [r7, #4]
	while ((DWT->CYCCNT - init_ticks) < ms);
 800039a:	bf00      	nop
 800039c:	4b06      	ldr	r3, [pc, #24]	@ (80003b8 <DelayMs+0x44>)
 800039e:	685a      	ldr	r2, [r3, #4]
 80003a0:	68fb      	ldr	r3, [r7, #12]
 80003a2:	1ad2      	subs	r2, r2, r3
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	429a      	cmp	r2, r3
 80003a8:	d3f8      	bcc.n	800039c <DelayMs+0x28>
}
 80003aa:	bf00      	nop
 80003ac:	bf00      	nop
 80003ae:	3714      	adds	r7, #20
 80003b0:	46bd      	mov	sp, r7
 80003b2:	bc80      	pop	{r7}
 80003b4:	4770      	bx	lr
 80003b6:	bf00      	nop
 80003b8:	e0001000 	.word	0xe0001000
 80003bc:	20000000 	.word	0x20000000
 80003c0:	10624dd3 	.word	0x10624dd3

080003c4 <main>:

#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

int main(void) {
 80003c4:	b580      	push	{r7, lr}
 80003c6:	af00      	add	r7, sp, #0
	SystemInit();
 80003c8:	f000 f874 	bl	80004b4 <SystemInit>
	SwitchInit();
 80003cc:	f000 f82e 	bl	800042c <SwitchInit>
	LedInit(LED_RED_PIN);
 80003d0:	200e      	movs	r0, #14
 80003d2:	f7ff ff21 	bl	8000218 <LedInit>
	LedInit(LED_GREEN_PIN);
 80003d6:	200c      	movs	r0, #12
 80003d8:	f7ff ff1e 	bl	8000218 <LedInit>
	while(1) {
		LedBlink(LED_GREEN_PIN, 1000);
 80003dc:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80003e0:	200c      	movs	r0, #12
 80003e2:	f7ff ff9f 	bl	8000324 <LedBlink>
		DelayMs(1000);
 80003e6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80003ea:	f7ff ffc3 	bl	8000374 <DelayMs>
		LedBlink(LED_GREEN_PIN, 1000);
 80003ee:	bf00      	nop
 80003f0:	e7f4      	b.n	80003dc <main+0x18>
	...

080003f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80003f4:	b480      	push	{r7}
 80003f6:	b083      	sub	sp, #12
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	4603      	mov	r3, r0
 80003fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80003fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000402:	2b00      	cmp	r3, #0
 8000404:	db0b      	blt.n	800041e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000406:	79fb      	ldrb	r3, [r7, #7]
 8000408:	f003 021f 	and.w	r2, r3, #31
 800040c:	4906      	ldr	r1, [pc, #24]	@ (8000428 <__NVIC_EnableIRQ+0x34>)
 800040e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000412:	095b      	lsrs	r3, r3, #5
 8000414:	2001      	movs	r0, #1
 8000416:	fa00 f202 	lsl.w	r2, r0, r2
 800041a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800041e:	bf00      	nop
 8000420:	370c      	adds	r7, #12
 8000422:	46bd      	mov	sp, r7
 8000424:	bc80      	pop	{r7}
 8000426:	4770      	bx	lr
 8000428:	e000e100 	.word	0xe000e100

0800042c <SwitchInit>:
*/

#include "switch_intr.h"
#include "led.h"

void SwitchInit(void) {
 800042c:	b580      	push	{r7, lr}
 800042e:	af00      	add	r7, sp, #0
	// Enable GPIO clock
    RCC->AHB1ENR |= BV(SWITCH_GPIO_CLKEN);
 8000430:	4b14      	ldr	r3, [pc, #80]	@ (8000484 <SwitchInit+0x58>)
 8000432:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000434:	4a13      	ldr	r2, [pc, #76]	@ (8000484 <SwitchInit+0x58>)
 8000436:	f043 0301 	orr.w	r3, r3, #1
 800043a:	6313      	str	r3, [r2, #48]	@ 0x30
	// Set gpio mode as input
    GPIOA->MODER &= ~(BV(SWITCH_PIN*2+1) | BV(SWITCH_PIN*2));
 800043c:	4b12      	ldr	r3, [pc, #72]	@ (8000488 <SwitchInit+0x5c>)
 800043e:	681b      	ldr	r3, [r3, #0]
 8000440:	4a11      	ldr	r2, [pc, #68]	@ (8000488 <SwitchInit+0x5c>)
 8000442:	f023 0303 	bic.w	r3, r3, #3
 8000446:	6013      	str	r3, [r2, #0]
	// set no pull-up pull-down registers
    GPIOA->PUPDR &= ~(BV(SWITCH_PIN*2+1) | BV(SWITCH_PIN*2));
 8000448:	4b0f      	ldr	r3, [pc, #60]	@ (8000488 <SwitchInit+0x5c>)
 800044a:	68db      	ldr	r3, [r3, #12]
 800044c:	4a0e      	ldr	r2, [pc, #56]	@ (8000488 <SwitchInit+0x5c>)
 800044e:	f023 0303 	bic.w	r3, r3, #3
 8000452:	60d3      	str	r3, [r2, #12]
	EXTI->FTSR |= BV(SWITCH_EXTI);
 8000454:	4b0d      	ldr	r3, [pc, #52]	@ (800048c <SwitchInit+0x60>)
 8000456:	68db      	ldr	r3, [r3, #12]
 8000458:	4a0c      	ldr	r2, [pc, #48]	@ (800048c <SwitchInit+0x60>)
 800045a:	f043 0301 	orr.w	r3, r3, #1
 800045e:	60d3      	str	r3, [r2, #12]
	EXTI->IMR |= BV(SWITCH_EXTI);
 8000460:	4b0a      	ldr	r3, [pc, #40]	@ (800048c <SwitchInit+0x60>)
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	4a09      	ldr	r2, [pc, #36]	@ (800048c <SwitchInit+0x60>)
 8000466:	f043 0301 	orr.w	r3, r3, #1
 800046a:	6013      	str	r3, [r2, #0]
	SYSCFG->EXTICR[0] &= ~(BV(3) | BV(2) | BV(1) | BV(0));
 800046c:	4b08      	ldr	r3, [pc, #32]	@ (8000490 <SwitchInit+0x64>)
 800046e:	689b      	ldr	r3, [r3, #8]
 8000470:	4a07      	ldr	r2, [pc, #28]	@ (8000490 <SwitchInit+0x64>)
 8000472:	f023 030f 	bic.w	r3, r3, #15
 8000476:	6093      	str	r3, [r2, #8]
	NVIC_EnableIRQ(EXTI0_IRQn);
 8000478:	2006      	movs	r0, #6
 800047a:	f7ff ffbb 	bl	80003f4 <__NVIC_EnableIRQ>

}
 800047e:	bf00      	nop
 8000480:	bd80      	pop	{r7, pc}
 8000482:	bf00      	nop
 8000484:	40023800 	.word	0x40023800
 8000488:	40020000 	.word	0x40020000
 800048c:	40013c00 	.word	0x40013c00
 8000490:	40013800 	.word	0x40013800

08000494 <EXTI0_IRQHandler>:

// intr handler(ISR) written with exactly same name as of handler fn name in vector table.
// it overrides the WEAK function written in startup.S
void EXTI0_IRQHandler(void) {
 8000494:	b580      	push	{r7, lr}
 8000496:	af00      	add	r7, sp, #0
	EXTI->PR |= BV(SWITCH_EXTI);
 8000498:	4b05      	ldr	r3, [pc, #20]	@ (80004b0 <EXTI0_IRQHandler+0x1c>)
 800049a:	695b      	ldr	r3, [r3, #20]
 800049c:	4a04      	ldr	r2, [pc, #16]	@ (80004b0 <EXTI0_IRQHandler+0x1c>)
 800049e:	f043 0301 	orr.w	r3, r3, #1
 80004a2:	6153      	str	r3, [r2, #20]
	LedToggle(LED_RED_PIN);
 80004a4:	200e      	movs	r0, #14
 80004a6:	f7ff ff4f 	bl	8000348 <LedToggle>
}
 80004aa:	bf00      	nop
 80004ac:	bd80      	pop	{r7, pc}
 80004ae:	bf00      	nop
 80004b0:	40013c00 	.word	0x40013c00

080004b4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	af00      	add	r7, sp, #0
  DWT_Init();
 80004b8:	f000 f802 	bl	80004c0 <DWT_Init>
}
 80004bc:	bf00      	nop
 80004be:	bd80      	pop	{r7, pc}

080004c0 <DWT_Init>:
}
#pragma GCC pop_options


uint32_t DWT_Init(void)
{
 80004c0:	b480      	push	{r7}
 80004c2:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 80004c4:	4b14      	ldr	r3, [pc, #80]	@ (8000518 <DWT_Init+0x58>)
 80004c6:	68db      	ldr	r3, [r3, #12]
 80004c8:	4a13      	ldr	r2, [pc, #76]	@ (8000518 <DWT_Init+0x58>)
 80004ca:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80004ce:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 80004d0:	4b11      	ldr	r3, [pc, #68]	@ (8000518 <DWT_Init+0x58>)
 80004d2:	68db      	ldr	r3, [r3, #12]
 80004d4:	4a10      	ldr	r2, [pc, #64]	@ (8000518 <DWT_Init+0x58>)
 80004d6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80004da:	60d3      	str	r3, [r2, #12]
    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 80004dc:	4b0f      	ldr	r3, [pc, #60]	@ (800051c <DWT_Init+0x5c>)
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	4a0e      	ldr	r2, [pc, #56]	@ (800051c <DWT_Init+0x5c>)
 80004e2:	f023 0301 	bic.w	r3, r3, #1
 80004e6:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 80004e8:	4b0c      	ldr	r3, [pc, #48]	@ (800051c <DWT_Init+0x5c>)
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	4a0b      	ldr	r2, [pc, #44]	@ (800051c <DWT_Init+0x5c>)
 80004ee:	f043 0301 	orr.w	r3, r3, #1
 80004f2:	6013      	str	r3, [r2, #0]
    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 80004f4:	4b09      	ldr	r3, [pc, #36]	@ (800051c <DWT_Init+0x5c>)
 80004f6:	2200      	movs	r2, #0
 80004f8:	605a      	str	r2, [r3, #4]
    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 80004fa:	bf00      	nop
    __ASM volatile ("NOP");
 80004fc:	bf00      	nop
    __ASM volatile ("NOP");
 80004fe:	bf00      	nop
    /* Check if clock cycle counter has started: 0 on success */
    return !(DWT->CYCCNT);
 8000500:	4b06      	ldr	r3, [pc, #24]	@ (800051c <DWT_Init+0x5c>)
 8000502:	685b      	ldr	r3, [r3, #4]
 8000504:	2b00      	cmp	r3, #0
 8000506:	bf0c      	ite	eq
 8000508:	2301      	moveq	r3, #1
 800050a:	2300      	movne	r3, #0
 800050c:	b2db      	uxtb	r3, r3
}
 800050e:	4618      	mov	r0, r3
 8000510:	46bd      	mov	sp, r7
 8000512:	bc80      	pop	{r7}
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop
 8000518:	e000edf0 	.word	0xe000edf0
 800051c:	e0001000 	.word	0xe0001000

08000520 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000520:	480d      	ldr	r0, [pc, #52]	@ (8000558 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000522:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000524:	f7ff ffc6 	bl	80004b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000528:	480c      	ldr	r0, [pc, #48]	@ (800055c <LoopForever+0x6>)
  ldr r1, =_edata
 800052a:	490d      	ldr	r1, [pc, #52]	@ (8000560 <LoopForever+0xa>)
  ldr r2, =_sidata
 800052c:	4a0d      	ldr	r2, [pc, #52]	@ (8000564 <LoopForever+0xe>)
  movs r3, #0
 800052e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000530:	e002      	b.n	8000538 <LoopCopyDataInit>

08000532 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000532:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000534:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000536:	3304      	adds	r3, #4

08000538 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000538:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800053a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800053c:	d3f9      	bcc.n	8000532 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800053e:	4a0a      	ldr	r2, [pc, #40]	@ (8000568 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000540:	4c0a      	ldr	r4, [pc, #40]	@ (800056c <LoopForever+0x16>)
  movs r3, #0
 8000542:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000544:	e001      	b.n	800054a <LoopFillZerobss>

08000546 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000546:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000548:	3204      	adds	r2, #4

0800054a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800054a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800054c:	d3fb      	bcc.n	8000546 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800054e:	f000 f811 	bl	8000574 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000552:	f7ff ff37 	bl	80003c4 <main>

08000556 <LoopForever>:

LoopForever:
  b LoopForever
 8000556:	e7fe      	b.n	8000556 <LoopForever>
  ldr   r0, =_estack
 8000558:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800055c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000560:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000564:	080005dc 	.word	0x080005dc
  ldr r2, =_sbss
 8000568:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 800056c:	20000020 	.word	0x20000020

08000570 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000570:	e7fe      	b.n	8000570 <ADC_IRQHandler>
	...

08000574 <__libc_init_array>:
 8000574:	b570      	push	{r4, r5, r6, lr}
 8000576:	4d0d      	ldr	r5, [pc, #52]	@ (80005ac <__libc_init_array+0x38>)
 8000578:	4c0d      	ldr	r4, [pc, #52]	@ (80005b0 <__libc_init_array+0x3c>)
 800057a:	1b64      	subs	r4, r4, r5
 800057c:	10a4      	asrs	r4, r4, #2
 800057e:	2600      	movs	r6, #0
 8000580:	42a6      	cmp	r6, r4
 8000582:	d109      	bne.n	8000598 <__libc_init_array+0x24>
 8000584:	4d0b      	ldr	r5, [pc, #44]	@ (80005b4 <__libc_init_array+0x40>)
 8000586:	4c0c      	ldr	r4, [pc, #48]	@ (80005b8 <__libc_init_array+0x44>)
 8000588:	f000 f818 	bl	80005bc <_init>
 800058c:	1b64      	subs	r4, r4, r5
 800058e:	10a4      	asrs	r4, r4, #2
 8000590:	2600      	movs	r6, #0
 8000592:	42a6      	cmp	r6, r4
 8000594:	d105      	bne.n	80005a2 <__libc_init_array+0x2e>
 8000596:	bd70      	pop	{r4, r5, r6, pc}
 8000598:	f855 3b04 	ldr.w	r3, [r5], #4
 800059c:	4798      	blx	r3
 800059e:	3601      	adds	r6, #1
 80005a0:	e7ee      	b.n	8000580 <__libc_init_array+0xc>
 80005a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80005a6:	4798      	blx	r3
 80005a8:	3601      	adds	r6, #1
 80005aa:	e7f2      	b.n	8000592 <__libc_init_array+0x1e>
 80005ac:	080005d4 	.word	0x080005d4
 80005b0:	080005d4 	.word	0x080005d4
 80005b4:	080005d4 	.word	0x080005d4
 80005b8:	080005d8 	.word	0x080005d8

080005bc <_init>:
 80005bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005be:	bf00      	nop
 80005c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005c2:	bc08      	pop	{r3}
 80005c4:	469e      	mov	lr, r3
 80005c6:	4770      	bx	lr

080005c8 <_fini>:
 80005c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005ca:	bf00      	nop
 80005cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005ce:	bc08      	pop	{r3}
 80005d0:	469e      	mov	lr, r3
 80005d2:	4770      	bx	lr
